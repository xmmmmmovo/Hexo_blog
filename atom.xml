<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>异国迷宫的十字路口</title>
  
  <subtitle>一位弱鸡带学生的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.fivezha.cn/"/>
  <updated>2021-07-03T04:20:08.312Z</updated>
  <id>http://blog.fivezha.cn/</id>
  
  <author>
    <name>xmmmmmovo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录一次修复我的赛睿鼠标的过程</title>
    <link href="http://blog.fivezha.cn/2021/02/23/steelseries-mouse-change-microchip/"/>
    <id>http://blog.fivezha.cn/2021/02/23/steelseries-mouse-change-microchip/</id>
    <published>2021-02-23T11:35:36.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>我的鼠标坏了，一是左键单击变成双击了，二是滚轮一点也不灵敏了，总是滑半天页面才上下移动非常小的距离。<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鼠标坏了，无缘无故的坏了，还是两处一起坏。首先是我的左键，我的左键现在点击一下变成了两下，导致我经常b站无法暂停视频，标签页连续关掉两个……其次则是我的滚轮，这个比我的左键更加的恶劣，基本上滚半天页面才移动非常小的距离，并且这个距离也非常的不定，经常时好时坏，有时一下滚很多，有时一点也不滚动，非常难受，像一滩淤泥一样，让我非常的恶心。所以我打算买点材料修理一下这个淤泥一样的鼠标。</p><h2 id="左键问题"><a href="#左键问题" class="headerlink" title="左键问题"></a>左键问题</h2><p>经过查阅发现这个是微动芯片的问题。淘宝搜了一下，大概都在3~8元钱，所以果断下单了一个比较好的，只用了8元还包邮qwq。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/IMG_20210223_212013.jpg" alt="IMG_20210223_212013" title="">                </div>                <div class="image-caption">IMG_20210223_212013</div>            </figure><p>到货之后就是拆鼠标了，翻到后面拆下橡胶垫，下面有总共四颗螺丝，拧下来之后就可以直接把后盖拆下来了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/IMG_20210223_183638.jpg" alt="IMG_20210223_183638" title="">                </div>                <div class="image-caption">IMG_20210223_183638</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/IMG_20210223_184124.jpg" alt="IMG_20210223_184124" title="">                </div>                <div class="image-caption">IMG_20210223_184124</div>            </figure><p>之后就是先断开彩色电源线，注意要拆下来主板的话要拧下来主板上的两颗固定的螺丝，然后把两边的卡扣往外一扣，直接就可以把主板整块的拆下。看见原装的微动芯片正是<code>OMRON</code><del>（都拆过一遍了你这不是废话吗）</del>，所以直接把淘宝的换上去就好了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/IMG_20210223_184313.jpg" alt="IMG_20210223_184313" title="">                </div>                <div class="image-caption">IMG_20210223_184313</div>            </figure><p>P.S.：这个微动芯片旁边甚至写着大大的<code>CHINA</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/IMG_20210223_185104.jpg" alt="IMG_20210223_185104" title="">                </div>                <div class="image-caption">IMG_20210223_185104</div>            </figure><p>焊接的过程就不讲了，因为板子后面写的很清楚，并且焊点清晰，锡的熔点也很低，很好搞。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210223214527947.png" alt="image-20210223214527947" title="">                </div>                <div class="image-caption">image-20210223214527947</div>            </figure><p>最后直接插上去加焊一下就好了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210223214601128.png" alt="image-20210223214601128" title="">                </div>                <div class="image-caption">image-20210223214601128</div>            </figure><h2 id="滚轮问题"><a href="#滚轮问题" class="headerlink" title="滚轮问题"></a>滚轮问题</h2><p>根据知乎上的广大网友交流知道这个可能是滚轮传感器不灵导致的，所以只需要用酒精擦洗一下滚轮传感器的原件，去除氧化或者污物遮挡的部分，就能修好了，所以我这就来试一下这个方法。</p><p>因为当时没有留图片，就只能借一下知乎网友的图片了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/v2-fbdfab010933dfc48c5acee6aae0633f_720w-20210223220656643.jpg" alt="v2-fbdfab010933dfc48c5acee6aae0633f_720w" title="">                </div>                <div class="image-caption">v2-fbdfab010933dfc48c5acee6aae0633f_720w</div>            </figure><p>就是把中间红色传感器拿酒精擦拭便可以了。</p><p>顺手还把各个原件拿酒精清理了一下~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/IMG_20210223_184005.jpg" alt="IMG_20210223_184005" title="">                </div>                <div class="image-caption">IMG_20210223_184005</div>            </figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>修理完成的我的鼠标，用两个字形容就是：“舒爽”，简直就像是新的一样，非常的流畅。这样我就不用再花钱买新的鼠标咯。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的鼠标坏了，一是左键单击变成双击了，二是滚轮一点也不灵敏了，总是滑半天页面才上下移动非常小的距离。
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="技术杂类" scheme="http://blog.fivezha.cn/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>【译】探索Rust中的动态分发</title>
    <link href="http://blog.fivezha.cn/2021/02/07/translation-Exploring-Dynamic-Dispatch-in-Rust/"/>
    <id>http://blog.fivezha.cn/2021/02/07/translation-Exploring-Dynamic-Dispatch-in-Rust/</id>
    <published>2021-02-07T07:43:03.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>关于Rust中trait object和虚表<a id="more"></a></p><blockquote><p>原文链接：<a href="https://alschwalm.com/blog/static/2017/03/07/exploring-dynamic-dispatch-in-rust/" target="_blank" rel="noopener">Exploring Dynamic Dispatch in Rust</a></p><p>时间：2017-3-07</p><p>本文发表时间在2018edtion之前，观点可能不代表最新版本Rust（比如现在有了dyn关键词）</p></blockquote><p>首先我要说的是我是Rust的新手（尽管到目前为止我很喜欢这门语言！），因此，如果我出现了技术错误，请告知我，我会试着纠正。所以，开始吧。<br>在下面代码片段中可以看到我研究动态分发的真正原因。假设我要创建一个CloningLab结构体，其中包含一个由<code>trait object</code>（在本例中为Mammal）构成的<code>vector</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CloningLab</span></span> &#123;</span><br><span class="line">    subjects: <span class="built_in">Vec</span>&lt;<span class="built_in">Box</span>&lt;Mammal&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Mammal</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">walk</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">run</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Clone)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span></span> &#123;</span><br><span class="line">    meow_factor: <span class="built_in">u8</span>,</span><br><span class="line">    purr_factor: <span class="built_in">u8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Mammal <span class="keyword">for</span> Cat &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">walk</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Cat::walk"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">run</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Cat::run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常运行。你可以可以遍历subjects向量(vector)，并可以调用<code>run</code>或<code>walk</code>方法。但是，当你想对一个<code>trait object</code>添加一个额外的<code>trait</code>约束的话便会报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CloningLab</span></span> &#123;</span><br><span class="line">    subjects: <span class="built_in">Vec</span>&lt;<span class="built_in">Box</span>&lt;Mammal + <span class="built_in">Clone</span>&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> CloningLab &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">clone_subjects</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Box</span>&lt;Mammal + <span class="built_in">Clone</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.subjects.clone()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error[E0225]: only the builtin traits can be used <span class="keyword">as</span> closure or object bounds</span><br><span class="line"> --&gt; test1.rs:<span class="number">3</span>:<span class="number">32</span></span><br><span class="line">  |</span><br><span class="line"><span class="number">3</span> |     subjects: <span class="built_in">Vec</span>&lt;<span class="built_in">Box</span>&lt;Mammal + <span class="built_in">Clone</span>&gt;&gt;,</span><br><span class="line">  |                                ^^^^^ non-builtin <span class="class"><span class="keyword">trait</span> <span class="title">used</span></span> <span class="keyword">as</span> bounds</span><br></pre></td></tr></table></figure><p>这令我非常的惊奇。在我看来，一个具有多个约束的<code>trait object</code>大抵可以类比于<code>C++</code>中的多继承。我以为其中实例都拥有多个虚函数表指针(vpointer)对应每一个基类，并且能正确分发。鉴于Rust仍还是一门年轻的语言，我很理解为什么开发人员可能不希望引入这种复杂性大大提升的特性(一直坚持糟糕的设计则会事倍功半)，但是我想弄清楚这样的系统究竟是如何运作的(或无法运作)。</p><h3 id="Rust中的虚表"><a href="#Rust中的虚表" class="headerlink" title="Rust中的虚表"></a>Rust中的虚表</h3><p>如<code>C++</code>那样，动态分发在Rust中是通过函数指针表实现的（<a href="https://doc.rust-lang.org/book/trait-objects.html#representation" target="_blank" rel="noopener">在Rust文档中有描述</a>）。根据文档，构成<code>Cat</code>的<code>Mammal</code>这个<code>trait object</code>的内存布局由两个指针组成，如下所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/cat_layout-2.png" alt="cat_layout-2" title="">                </div>                <div class="image-caption">cat_layout-2</div>            </figure><p>令我惊讶的是，对象的数据成员还有一个中间层。这看起来和C++表示形式有所不同：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/cat_layout_cpp.png" alt="cat_layout_cpp" title="">                </div>                <div class="image-caption">cat_layout_cpp</div>            </figure><p>先是虚表(vtable)指针，随后则是数据成员。Rust方法很有趣。 “构造”<code>trait object</code>时会产生成本，这与C++的方法不同，在C++中，强制转换为基类指针是零成本的（或者对于多重继承来说只是一些附加成本）。但这成本很小。 Rust方法的好处是，如果对象从未在多态上下文中使用过，则该对象不必存储虚表指针。我认为Rust励使用单态性这种说法比较好一些，所以这可能是一个不错的权衡方案。</p><h3 id="多约束trait-object"><a href="#多约束trait-object" class="headerlink" title="多约束trait object"></a>多约束trait object</h3><p>让我们回到最开始的那个问题，让我们思考一下这个问题如何在<code>C++</code>中解决。如果我们有为某个结构体实现的多个<code>trait</code>(纯虚类)，那么我们的结构体实例内存布局将如下(例：<code>Mammal</code>和<code>Clone</code>)：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/cat_and_clone_cpp-1.png" alt="cat_and_clone_cpp-1" title="">                </div>                <div class="image-caption">cat_and_clone_cpp-1</div>            </figure><p>可以看到我们现在有多个虚表指针，每个指针对应于<code>Cat</code>继承的一个基类（包含虚函数）。为了把一个<code>Cat*</code>转为<code>Mammal*</code>，我们不需要做任何事，但是要把<code>Cat*</code>转为一个<code>Clone*</code>，编译器将会为<code>this</code>指针增加 8 字节（用来跳到下一个指针，假定 <code>sizeof(void*) == 8</code> ）。</p><p>不难想象在Rust中类似的情形：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/cat_clone_rust_candidate_1-1.png" alt="cat_clone_rust_candidate_1-1" title="">                </div>                <div class="image-caption">cat_clone_rust_candidate_1-1</div>            </figure><p>所以现在在这个<code>trait object</code>里面有两个虚表指针了。如果编译器需要对于<code>Mammal + Clone</code>这个<code>trait object</code>履行动态分发的原则的话，它可以访问对应虚表中的对应项并执行调用。然而Rust(还)并不支持结构体继承，所以并不存在把正确的子对象作为<code>self</code>传递的问题。<code>self</code>永远指向的是<code>data</code>指针。</p><p>这看上去好像可以很好的运行，但是这种方案也带来了一些冗余。对于这个类型的大小（size）、对齐（alignment）以及<code>drop</code>指针使我们有了多份拷贝。我们可以通过组合虚表来消除这些冗余。这基本上就是当你执行 trait 继承时会发生的事情：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">CloneMammal</span></span>: <span class="built_in">Clone</span> + Mammal&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; CloneMammal <span class="keyword">for</span> T <span class="keyword">where</span> T: <span class="built_in">Clone</span> + Mammal&#123;&#125;</span><br></pre></td></tr></table></figure><p>以这种方式使用 trait 继承是一个通常建议的技巧，以绕过 trait 对象的正常限制。trait 继承的使用产生了一个单独的虚表，没有任何冗余。所以内存布局如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/clone_mammal_rust-1.png" alt="clone_mammal_rust-1" title="">                </div>                <div class="image-caption">clone_mammal_rust-1</div>            </figure><p><strong>译者：翻译到一半结果发现有人已经翻译完了😅️(人麻了)</strong></p><p><strong>那就直接贴网址吧 下面的基本是复制的翻译:<a href="https://juejin.cn/post/6872898487244029960" target="_blank" rel="noopener">点击跳转</a></strong></p><p>更加简单！并且你现在就可以这么做！或许我们真正想要的是，当我们写出一个多约束的 trait 对象时，让编译器为我们生成一个这样的 trait（译者注：指仅含有单个虚表的 trait）。但是等一下，这里存在一些重要的限制。即，你不能把一个<code>Clone + Mammal</code>的 trait 对象转为一个<code>Clone</code>的 trait 对象。这似乎是很奇怪的行为，但是不难看到为什么这样的转换行不通。</p><p>假定你尝试写出下面的代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = Cat &#123;</span><br><span class="line">  meow_factor: <span class="number">7</span></span><br><span class="line">  purr_factor: <span class="number">8</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No problem, a CloneMammal is impl for Cat</span></span><br><span class="line"><span class="keyword">let</span> clone_mammal: &amp;CloneMammal = cat;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error!</span></span><br><span class="line"><span class="keyword">let</span> clone: &amp;<span class="built_in">Clone</span> = &amp;clone_mammal;</span><br></pre></td></tr></table></figure><p>第 10 行一定无法编译，因为编译器不可能找到对应的虚表来放入这个 trait 对象。它只知道这个被引用的对象实现了<code>Clone + Mammal</code>，但是它无法区分这二者。当然，我们可以区分它一定是个<code>Cat</code>，但是如果代码像下面这样呢：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = Cat &#123;</span><br><span class="line">  meow_factor: <span class="number">7</span></span><br><span class="line">  purr_factor: <span class="number">8</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = Dog &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone_mammal: &amp;CloneMammal;</span><br><span class="line"><span class="keyword">if</span> get_random_bool() == <span class="literal">true</span> &#123;</span><br><span class="line">  clone_mammal = &amp;cat;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  clone_mammal = &amp;dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error! How can the compiler know what vtable to</span></span><br><span class="line"><span class="comment">// point to?</span></span><br><span class="line"><span class="keyword">let</span> clone: &amp;<span class="built_in">Clone</span> = &amp;clone_mammal;</span><br></pre></td></tr></table></figure><p>这里的问题就更加清晰了。编译器怎么知道要对 17 行正在构造的 trait 对象放入什么样的虚表呢？如果<code>clone_mammal</code>指向一个<code>Cat</code>，那么它应该是<code>Clone</code>的<code>Cat</code>虚表，如果它指向一个<code>Dog</code>，那么它应该是<code>Clone</code>的<code>Dog</code>虚表。<br> 所以 trait 继承这种方式有这种限制。你无法把一个 trait 对象转成 trait 对象的其他类型，即使当这个你想要的 trait 对象比你已经拥有的更加具体。</p><p>多个虚表指针的方式对于具有多约束的trait对象来说，看起来是一种好的方式。通过它，转换为一个低约束的trait对象就不是问题了。编译器应该使用的虚表就是<code>Clone</code>虚表指针指向的位置。</p><p><strong>下面就不是我复制的了</strong></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我希望完成这些能对一些读者带来收获。它肯定帮助我整理了对<code>trait object</code>的思考方式。在实践中，我认为这并不是一个真正紧迫的问题，这个限制只是让我感到惊讶罢了。</p><h4 id="最终代码-自己实现"><a href="#最终代码-自己实现" class="headerlink" title="最终代码(自己实现)"></a>最终代码(自己实现)</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">NewTrait</span></span>: Mammal + std::clone::<span class="built_in">Clone</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CloningLab</span></span>&lt;T: NewTrait&gt; &#123;</span><br><span class="line">    subjects: <span class="built_in">Vec</span>&lt;<span class="built_in">Box</span>&lt;T&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T: NewTrait&gt; CloningLab&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">clone_subjects</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">Box</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.subjects.clone()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Mammal</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">walk</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">run</span></span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Clone)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span></span> &#123;</span><br><span class="line">    meow_factor: <span class="built_in">u8</span>,</span><br><span class="line">    purr_factor: <span class="built_in">u8</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Mammal <span class="keyword">for</span> Cat &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">walk</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Cat::walk"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">run</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Cat::run"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，解决思路便是以泛型限制<code>trait object</code>，可能是<code>Rust</code>团队希望单态和多态分别用不同的语法来实现吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Rust中trait object和虚表
    
    </summary>
    
    
      <category term="translation" scheme="http://blog.fivezha.cn/categories/translation/"/>
    
    
      <category term="rust" scheme="http://blog.fivezha.cn/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>MacBook Pro(2020 M1)半个月使用体验</title>
    <link href="http://blog.fivezha.cn/2021/01/26/a-week-with-macbookpro-m1/"/>
    <id>http://blog.fivezha.cn/2021/01/26/a-week-with-macbookpro-m1/</id>
    <published>2021-01-26T05:29:35.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>记录我这半个月以来使用M1芯片版本的MacBookPro的各种优缺点和坑点<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为听闻Mac开发很爽之类的言论，再加上看了各种M1芯片评测视频之后，个人决定购买这台<code>MacBook Pro (2020 M1)</code>。以下便是个人这半个月来使用的体会。</p><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126183625360.png" alt="image-20210126183625360" title="">                </div>                <div class="image-caption">image-20210126183625360</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126183902163.png" alt="image-20210126183902163" title="">                </div>                <div class="image-caption">image-20210126183902163</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126184724275.png" alt="image-20210126184724275" title="">                </div>                <div class="image-caption">image-20210126184724275</div>            </figure><p>传承着苹果一贯的设计，金属机身 + 抛光苹果LOGO + TouchBar。但是本次macbook的键盘再也不是之前让人诟病的蝶式键盘了，而是配备了全新的妙控键盘，个人认为手感还是不如本人上一个游戏本，但是对于一个轻薄本来说，也是能说得过去的水平。</p><h3 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h3><p>触控板可谓是MBP的灵魂所在了，又大又顺滑，同时多种手势和压感区分也让你面对这台电脑就如同面对一台巨大的iPad一样，毫不夸张的说，这个超大的触控板对于我来说已经是可以完美替代鼠标的存在了，配合TouchBar，基本上可以不用移动很多距离便可以完成许多操作。</p><h3 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h3><p>Retina屏幕+HDPI，开机的那一刻，艳丽又精确的颜色，肆意又狂妄，让人赞叹又享受。同时macOS对于颜色管理这块也是拿捏的死死的，专用的屏幕颜色管理软件+方便的导入导出功能，让你随意切换色彩空间映射，真不愧是设计师的最爱。</p><h3 id="TouchBar"><a href="#TouchBar" class="headerlink" title="TouchBar"></a>TouchBar</h3><p>这个的确值得单独拿出来说，TouchBar在许多应用中都有适配，比如我现在正在使用的<code>Typora</code>，TouchBar上便是如插入代码块、图片、表格等常用的操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126225027949.png" alt="Typora" title="">                </div>                <div class="image-caption">Typora</div>            </figure><p>而在<code>IDEA</code>中则是编译和运行的快捷键，甚至在<code>IINA</code>中，TouchBar甚至展示了整个视频的预览，可以快速拖动。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126225051404.png" alt="IINA" title="">                </div>                <div class="image-caption">IINA</div>            </figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>本次的接口是非常不满意的，从四个TypeC变成了两个TypeC接口，同时支持<code>USB4.0</code>和<code>雷电3</code>协议，这就导致去掉电源占用的一个接口之后只剩下了一个接口提供日常使用，显而易见，扩展坞是少不了了。顺便一提，貌似<code>雷电3</code>协议的外设都非常贵（比如4K显示器啥的），个人偏向DIY(显示器之类的完全可以DIY)和寻找替代品。</p><h3 id="M1芯片"><a href="#M1芯片" class="headerlink" title="M1芯片"></a>M1芯片</h3><p>关于这个芯片的跑分就不说了，b站上很多up都说过。个人认为这颗芯片是要比10代低压<code>i9</code>要强的，平时生活中完全感受不到卡顿，基本上没有看到过占用100%的情况（可能是多核优化问题）。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126183612584.png" alt="macOS" title="">                </div>                <div class="image-caption">macOS</div>            </figure><p>个人选择的是16g+512g的组合，虽然没用过8G版本，但是个人上一个游戏本开始使用的便是8G内存，开始如果说是日常使用还是比较够用的，但是如果打开多个<code>IDE</code>或者打开<code>Android Srudio</code>之后，内存就会被迅速占满，进而使用交换内存，到了这个时候，电脑即使使用ssd作为交换内存，也还是非常的卡顿，具体现象就是输入一个字母需要等待很久时间才会出现代码提示，并且经常性的无响应，需要等待许久才能恢复，同时虚拟机开发也无法进行，实在是难受至极。所以针对吃内存更加严重的macOS，个人果断选取了16g版本。因为IDE大多<code>1g</code>起步，并且还要加本地<code>MySQL</code>之类的应用，硬盘大小起步便需要256g了，如果再加上某些依赖文件夹(没错！说的就是你！node_modules！)，那磁盘占用绝对是巨量的，所以我选择了512g版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/1" alt="物理界最新黑洞理论结果" title="">                </div>                <div class="image-caption">物理界最新黑洞理论结果</div>            </figure><h2 id="续航"><a href="#续航" class="headerlink" title="续航"></a>续航</h2><p>得益于<code>ARM</code>芯片的低功耗，本代续航能力达到了一个极其恐怖的地步，2个小时代码作业之后电量竟然只下降了15%。照着么推算官方说14个小时的续航时长大概是准确的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210214151814187.png" alt="image-20210214151814187" title="">                </div>                <div class="image-caption">image-20210214151814187</div>            </figure><p>这次我找了个教室写了一下午代码+看视频，可以看到1点的时候是<code>90%</code>的电量，到了5点的时候则是近<code>50%</code>的电量。</p><p>可以看到在4个小时只是掉了<code>40%</code>的电量，所以说如果是轻度使用的话大概应该能撑到14小时左右，如果是一直coding+看视频大概也就10小时就耗完电量了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210305171343745.png" alt="image-20210305171343745" title="">                </div>                <div class="image-caption">image-20210305171343745</div>            </figure><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>经过这半个月macOS的体验生活,个人感觉这的确是一个风格色彩突出的一个系统，有非常多的偏执的操作需要适应，没办法，大抵这就是从系统到芯片垄断的后果吧。</p><ul><li>正常鼠标无法平滑滚动(软件解决)</li><li>明明设置鼠标滚轮方向和触摸板滚轮方向是不同位置的选项，但实际却是连通的选项(软件解决)</li><li>Finder非常不好用，复制粘贴快捷键混乱(软件解决)</li><li><strong>注意：m1版本的MacBook进入恢复模式是长按开机键</strong></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>这里个人主要是来推荐一下自己日常经常使用的工具和应用~</p><h4 id="Brew"><a href="#Brew" class="headerlink" title="Brew"></a>Brew</h4><p>包管理器，相当于<code>apt-get</code>和<code>yum</code>。</p><h4 id="iTerm2-Oh-my-Zsh"><a href="#iTerm2-Oh-my-Zsh" class="headerlink" title="iTerm2 + Oh-my-Zsh"></a>iTerm2 + Oh-my-Zsh</h4><p><code>Shell</code>美化套装，支持多种主题配色，搭配好了非常漂亮。</p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p><code>Markdown</code>编写软件，即时渲染，非常方便好用。</p><h4 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a>IINA</h4><p>颜值和功能兼顾的视频播放器，同时对于TouchBar兼容很好。功能很全面，各种常用的功能都有。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126233206444.png" alt="image-20210126233206444" title="">                </div>                <div class="image-caption">image-20210126233206444</div>            </figure><h4 id="Office365"><a href="#Office365" class="headerlink" title="Office365"></a>Office365</h4><p>全家桶，不解释。</p><h4 id="Parallels-Desktop"><a href="#Parallels-Desktop" class="headerlink" title="Parallels Desktop"></a>Parallels Desktop</h4><p>指定虚拟机，融合模式非常好用，有针对m1优化的版本。</p><h4 id="Clipy"><a href="#Clipy" class="headerlink" title="Clipy"></a>Clipy</h4><p>一个剪贴板软件，完全免费，同时有片段保存功能。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126233106244.png" alt="image-20210126233106244" title="">                </div>                <div class="image-caption">image-20210126233106244</div>            </figure><h4 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h4><p>截图软件，给你如同windows上qq截图一般的截图体验。</p><h4 id="The-Unarchiver"><a href="#The-Unarchiver" class="headerlink" title="The Unarchiver"></a>The Unarchiver</h4><p>一个免费的解压缩软件，用来替换本来的解压缩软件的。</p><h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h4><p>图床软件，可以和Typora联合使用，支持多种图床。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126233816606.png" alt="image-20210126233816606" title="">                </div>                <div class="image-caption">image-20210126233816606</div>            </figure><h4 id="新建文件菜单"><a href="#新建文件菜单" class="headerlink" title="新建文件菜单"></a>新建文件菜单</h4><p>顾名思义，给你的Finder里面加一个新建文件的按钮。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126233851624.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="Mos"><a href="#Mos" class="headerlink" title="Mos"></a>Mos</h4><p>给你更加流畅的鼠标滚轮操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126234123607.png" alt="image-20210126234123607" title="">                </div>                <div class="image-caption">image-20210126234123607</div>            </figure><h4 id="Motrix"><a href="#Motrix" class="headerlink" title="Motrix"></a>Motrix</h4><p>非常好用的开源免费下载软件，支持直链、链接、种子任务，<del>其实是Aira2套娃</del>，总的来说少有的免费还好用的软件。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126234409924.png" alt="image-20210126234409924" title="">                </div>                <div class="image-caption">image-20210126234409924</div>            </figure><h4 id="Magnet"><a href="#Magnet" class="headerlink" title="Magnet"></a>Magnet</h4><p>macOS中非常好用的屏幕管理软件，可以快速的进行上下分屏，左右分屏，三等分屏等操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210126235555476.png" alt="image-20210126235555476" title="">                </div>                <div class="image-caption">image-20210126235555476</div>            </figure><h4 id="ClashX"><a href="#ClashX" class="headerlink" title="ClashX"></a>ClashX</h4><p>好用的梯子，定制化功能非常多。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>语言这块基本上很多都适配了，比如常用的<code>C/C++</code>，<code>Java</code>，<code>Node Js</code>，<code>Go</code>，<code>Rust</code>等语言都对于m1进行了适配。</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><h3 id="Visual-Studio-Code-Insiders"><a href="#Visual-Studio-Code-Insiders" class="headerlink" title="Visual Studio Code Insiders"></a>Visual Studio Code Insiders</h3><p>这里我使用的是ARM优化版本的vscode，整个使用下来是极其流畅的，基本上<code>jupyter notebook</code>都是秒开，同时文件渲染也很迅速，感觉比<code>Clion</code>还快很多。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210127000440340.png" alt="image-20210127000440340" title="">                </div>                <div class="image-caption">image-20210127000440340</div>            </figure><h4 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h4><p>这里其实是代指的<code>JetBrains</code>全家桶，当然也是流畅的，不过第一次打开，输入第一个字母的时候要等一两秒才会出来提示，不过过了之后就丝滑顺畅。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210127000733116.png" alt="image-20210127000733116" title="">                </div>                <div class="image-caption">image-20210127000733116</div>            </figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>总的来说，如果你是用来日常使用或者进行视频剪辑操作的话，这台电脑就完全够用了，甚至还有很多的性能溢出足以让你用3-5年也没问题。但是如果你是用来进行日常开发，编程等技术类的用途的话，个人建议是观望一段时间，因为大多数日常软件都已经适配了，但是开发相关的软件却有很多没有适配，亦或者是还存在许多Bug，所以提议观望半年或者等M1X。</p><p>还有就是关于为什么这段时间都没有发技术相关的博客了，主要原因是最近在准备毕业设计和找工作，背八股文和刷算法，没有什么可以写，如果有时间大抵可以把我最近《CSAPP》和《现代操作系统》的一些笔记分享一下，那大概就这样了，没什么好讲的了，该去学习了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录我这半个月以来使用M1芯片版本的MacBookPro的各种优缺点和坑点
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>2020年，我都干了些什么？</title>
    <link href="http://blog.fivezha.cn/2021/01/01/what-i-do-in-2020/"/>
    <id>http://blog.fivezha.cn/2021/01/01/what-i-do-in-2020/</id>
    <published>2021-01-01T13:53:51.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>在2020年的末尾对于我整一年的学习经历进行的思考总结<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章本来是应该1月1日完成的，但是突然出现了各种各样的事件，导致我在博客更新方面的计划一拖再拖，以至于现在才有时间来更新这篇迟来的年度总结(呜呜呜太难了)，为表歉意，在下也只能给大家看一看我<strong>元旦当天</strong>早上爬起来去山顶看日出的返图了~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210115103817622.png" alt="未升起" title="">                </div>                <div class="image-caption">未升起</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210115103423040.png" alt="升起" title="">                </div>                <div class="image-caption">升起</div>            </figure><p>2020年，注定是不平凡的一年，年初的疫情直到年末都还在不断影响着我们的生活方式，甚至感觉一年从开头到结尾都如此的压抑。</p><p>如果说去年一年的生活是自由且洒脱，那么今年则是闭塞而拘谨，比赛感情上的双重失利，不禁又使得自己对三年来建立起来的自信心产生了动摇，但是万事皆要以辨证的思想来看，正所谓<code>祸兮福所倚，福兮祸所伏</code>，这一年来我也学了很多，因为疫情原因，在家的时间可以说是比之前三年的总和还要多，使得自己可以静下心来学习一些东西的同时放松自己的身心，思考自己的规划方向，就在今年我的<code>Github</code>提交数达到了惊人的<code>1728</code>次，首次破干👏🏻👏🏻👏🏻。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/image-20210115104751365.png" alt="image-20210115104751365" title="">                </div>                <div class="image-caption">image-20210115104751365</div>            </figure><p>当然，生活再怎么苦，形式再怎么严峻，生活也还是要过的，趁着这我就简要回忆一下我这一年的成长与学习吧。</p><h2 id="寒假"><a href="#寒假" class="headerlink" title="寒假"></a>寒假</h2><p>寒假伊始，大家还未沉浸在<code>抗疫救灾</code>的紧张当中，除<code>湖北</code>地区可能还比较紧张，大家还是处于一种准备过年的愉快氛围当中，当然在下也是准备欢快过年的其中一分子 ，甚至母上打算除夕夜驾车去<code>西安</code>玩(PS：去了)，所以在下就在一些杂七杂八的家事，B站，一些杂乱的代码中度过了这年前的一段时间，平淡又无趣。</p><p>当时的我万万没想到的是，无趣的生活将因为疫情的原因如病毒般扩散至这一年的每一个角落。除夕夜，直到我、母上还有我妹到达<code>西安</code>的当天，全国的旅游景点宣告停止开放，使得两日不间断的驾车生活被宣告毫无意义，只得原路返回。<code>恨</code>，无比的憎恨，憎恨当时食用野味的那位“人才”(<code>1.20</code>更新：外交部发言人发话了！🇺🇸真有你的！)。但是又有什么办法呢，在浩瀚宇宙中，自己只是任人推搡的浮萍罢了，只能混迹在人群中随着宇宙变化，海水涨落而行动，此次我深刻的意识到了，要对于形势有着明确的认知，才能对于下一步有着正确的行动，不然，大多就是无用功罢了。</p><h2 id="网课"><a href="#网课" class="headerlink" title="网课"></a>网课</h2><p>随着疫情的不断加重，我们不意外的被安排在了家里上网课。网课生活可以说是“惬意”的，因为本来就不想上那些没有什么兴趣的课程，如若在学校上课，电脑是一定带不到教室里面去的，而在家中上课，则可以以正当理由在课上使用电脑，给了我不小的便利，然而，这学期对我而言，其实实在是没有学到什么东西，大部分都是在兜兜转转中度过，在无所事事的瞎写中度过，在三分钟热度中度过，这其中大部分的原因也只能归咎与自身吧，但还有一些外部私事的影响导致了我这学期没有什么长进（这里恕在下无可奉告）。</p><p>这半学期中间其实还穿插了一个比赛，代码还没有开源，并且因为”某些原因“导致我们并未拿到很好的成绩，只能说自己还不够”努力“吧(笑)。</p><h2 id="暑假"><a href="#暑假" class="headerlink" title="暑假"></a>暑假</h2><p>暑假生活可以说是自己开始着手提升自我的开始，首先刚开始我便定下了考研的目标(虽然最后不考了)，开始准备考研。但是我内心实在是没有考研的兴趣，对于我来说，写代码远比枯燥乏味的做题有趣的多，所以我个人用了整整一个月的时间去刷了算法，学了一些之前没有怎么了解过的细枝末节的计算机知识，学习了<code>《算法(第四版)》</code>，在此一提，这本书实在是厚实，课后题对于我来说有点吃力，通常卡住一道题一天都有可能，但就在这时候我的算法提升迅速，周赛经常3~4题，还是很好的一本书的，内容极其详实，配图也很精美。</p><p>第二个月就是复习考研罢了（但其实根本没有复习，每天都是打打游戏看看视频啥的度过了），没什么好说的。</p><h2 id="返校"><a href="#返校" class="headerlink" title="返校"></a>返校</h2><p>在经历了9个月的”假期“之后，我终于返回了有点陌生了的学校，见到了许久未见的兄弟们，终于可以愉悦的一起玩耍了(第二天晚上就出去搓了一顿饭)。但这时我其实还未开始复习，同时也要完成物联网大课设，最后完成课设，答辩完成之后已经是10月了，时间已经是不够用的状态了。9月-11月的生活可以看下面这篇文章：<a href="https://blog.fivezha.cn/2020/10/15/recent-situation-2020-10/">我停更的这两个月都在干什么</a></p><p>之后就在12月的时候，我发觉自己基本没有可能了(还有两科一遍都没有看完，政治也还没开始)，故放弃考研。这里说一下，个人认为研究生中，导师的作用是&gt;&gt;&gt;学校的作用的，因为研究生不是如同本科那样的思想来教学了，研究生对于方向，眼界和科研能力都有一定的要求，如果没有一个称职的导师，个人感觉至少我自己是很难一个人走下去的，我如果以极低的分数进去的话也比较难调到好的导师。所以我决定放弃考研，备战春招。</p><p>其中还有一个插曲，就是毕设选题了，关于其吐槽这个可以看下面这篇文章：<a href="https://blog.fivezha.cn/2020/12/11/final-project-wesite-bugs/">关于学校毕设管理系统的吐槽</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文虽然不是1月1日发表的，但是却是1月1日开始写的，总结了我这一年来的经历，大抵也算是一篇垃圾流水帐吧，如若你能看到这里，在下在此表示由衷的感谢你能在浩如烟海的互联网中画时间看我这样一位小透明写的一篇流水帐文章，再次感谢🙏🏻。</p><p>每当鱼肚泛白，日出东方之时，便会感叹时间如白驹过隙，悄然流逝，希望新的一年能够一扫去年的阴霾，自信而又细心的迎接每一天，沉下心来学习，每次只做一件事并把它做好。</p><p>2020，再见👋🏻</p><p>2021，你好🙂️</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在2020年的末尾对于我整一年的学习经历进行的思考总结
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="思考感悟" scheme="http://blog.fivezha.cn/tags/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于学校毕设管理系统的吐槽</title>
    <link href="http://blog.fivezha.cn/2020/12/11/final-project-wesite-bugs/"/>
    <id>http://blog.fivezha.cn/2020/12/11/final-project-wesite-bugs/</id>
    <published>2020-12-11T03:34:34.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>只是一篇白开水文章，用来吐槽我们学校的管理系统的<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有人问，马老师发生什么事了？我一看，奥，原来是昨天，有两个年轻人，一个码龄，三年多，一个码龄四年多。他们说：“诶…有一个说是毕设系统有问题，马老师你能不能教教我看”，然后上来就是一个html检索，吭，一个sql注入，一个字典查密码。我说年轻人不讲武德，他忙说对不起，他说他是乱注的。他可不是乱注的，一个“; and 1=1 and 1=2”， 一个“and 0&lt;&gt;(select count(*) from *)”， 训练有所，看来是有备而来。这两个年轻人不讲武德，来骗！来偷袭我这外包公司写的管理系统，这好吗？这不好。我劝这位年轻人，耗子尾汁。好好反思。以后不要再犯这样的小聪明。武林要以和为贵，要讲武德，不要搞窝里斗。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>哈哈哈，开个小玩笑，来讲一下昨天一晚上发现的搞笑事情吧，起初题目公布了，我们就是浏览了一下，但是他这个系统选题没有指导老师，很烦，就打算从<code>api</code>来看是否有什么思路找出来。结果这一看直接傻眼了，我滴天哪，这个系统竟然把所有数据都写在了一个<code>api</code>里面，这我是真的没想到的，各种隐私数据，导师信息，需求分析，题目类别，id，就连导师密码都写在里面了，不禁令人直呼真牛哇！真牛哇！这都可以的吗，这种程度的程序员都能出来拿工资吗？？现在计算机行业这么不饱和？？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211120711154.png" alt="image-20201211120711154" title="">                </div>                <div class="image-caption">image-20201211120711154</div>            </figure><p>起初，我就是把这些数据爬了下来然后提取了一下数据发群里然后就没再管，直到晚上朋友发的一句话才有了下面这些剧情…….</p><h2 id="快乐的耍网站时间"><a href="#快乐的耍网站时间" class="headerlink" title="快乐的耍网站时间"></a>快乐的耍网站时间</h2><h3 id="裸写在html里面的js和接口"><a href="#裸写在html里面的js和接口" class="headerlink" title="裸写在html里面的js和接口"></a>裸写在html里面的js和接口</h3><p>晚上，有一位朋友<code>L</code>说这个网站有bug，可以提前选课。起初我是很好奇的，因为提示的api只有一个校验，云端校验并且没有时间戳相关提交字段，怎么说都没办法绕过检测。然后就有了下面的对话：</p><blockquote><p>“选课的api和校验的api不是一个啊”</p><p>“???不是，你怎么知道的api地址的”</p><p>“直接根据<code>id</code>search一下就能找到了”</p></blockquote><p>我立马根据他所说的去搜索了一下，然后就发现了下面的这段令人哭笑不得的代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211122145573.png" alt="image-20201211122145573" title="">                </div>                <div class="image-caption">image-20201211122145573</div>            </figure><p>奥，闹了半天这个云端校验就是个幌子，选课代码直接裸写到<code>html</code>里面，真有你的啊，青峰软件！到了这时，我才明白，这个网站根本就不是<code>vue</code>之类的主流框架写的，而是利用<code>JQuery</code>和<code>Html</code>粗劣的拼接起来的垃圾平台，甚至<code>JS</code>文件都不是引入+混淆，而是直接正大光明的写到文件里面，好家伙！我直接™好家伙！</p><p>然后我就先自己选了~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201212192048922.png" alt="image-20201212192048922" title="">                </div>                <div class="image-caption">image-20201212192048922</div>            </figure><h3 id="跨专业选题"><a href="#跨专业选题" class="headerlink" title="跨专业选题"></a>跨专业选题</h3><p>根据说明，本专业的人本来只能选本专业的题目的，然而既然选课api被发现了,又发现了参数信息，得知这个选题只要一个<code>id</code>就可以选了，那么我能不能拿别的专业题目来请求选课呢？答案竟然是可以的，后台完全没有对于专业进行相关的校验，直接就是可以随便选了，再次惊呼好家伙！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211125210778.png" alt="image-20201211125210778" title="">                </div>                <div class="image-caption">image-20201211125210778</div>            </figure><h3 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h3><p>既然这个平台都这样了，为什么不再进一步呢，然后！就有了更加惊人的发现，这！个！网！站！居！然！没！有！做！防！注！入！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211125514580.png" alt="image-20201211125514580" title="">                </div>                <div class="image-caption">image-20201211125514580</div>            </figure><p>再！次！好！家！伙！</p><h3 id="弱口令问题-密码加密问题"><a href="#弱口令问题-密码加密问题" class="headerlink" title="弱口令问题+密码加密问题"></a>弱口令问题+密码加密问题</h3><p>本来弱口令不算做问题，但是教师的初始密码和****<em>\</em> (此处保密删除)，这就是很大的问题了。起初发现这个问题是因为在最开始获取数据的时候了解到了密码，查看格式知道是<code>md5</code>加密，本来这种加密手段直接弱口令表/彩虹表一查就出来的，然而，这里的规律提示所有老师的密码都是一样的……然后果断尝试<code>**************</code>(保密)，就……..就成功了！？好家伙，这也可以的吗？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211130751186.png" alt="image-20201211130751186" title="">                </div>                <div class="image-caption">image-20201211130751186</div>            </figure><h3 id="session没有黑名单"><a href="#session没有黑名单" class="headerlink" title="session没有黑名单"></a>session没有黑名单</h3><p>这个就是老生常谈了，到了这个地步我已经不指望了。果然，没有黑名单处理，session直接持久化保存，不会被顶掉。<code>CSRF</code>攻击防御措施也没有，甚至有时候<code>session id</code>都是放在<code>param</code>里面的，不得不说外包公司的程序员真的是想象力”天马行空”。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>根据上面的各种漏洞，我们基本可以做到：</p><blockquote><p>利用老师的cookie进行sql注入，达到删库或者shell提权操作，搞垮平台或者直接全部删掉(包括binlog)，然后直接溜之大吉不被任何人发现。</p></blockquote><p>吐槽到这，心理已经对这个学校失望透顶了，外包都只能找到这种程度的，这种甚至不该是公司产品，只不过是一个学生的课程设计级别的罢了。不，可能真的是学生作品，外包公司二次外包，三次外包，最后流入到学生手上的又有多少呢，这一层层之间回扣又吃了多少占比呢，我不敢想象，只能感叹：“还好大学四年没有选择赚钱而选择了学习啊！”</p><p>希望学弟学妹们也要引以为戒，写出来能用的代码很容易，写出来可以用的代码却很难，不要老想着那些既得利益，而要长远观察自身的潜在价值，明白自己这个阶段该学习什么，能有什么竞争力，能有什么样的金钱效应，为自己得到什么利益。不要最后35岁烂在外包公司写这种垃圾代码最后“被优化”。</p><blockquote><p><strong>天下熙熙皆为利来，天下攘攘皆为利往</strong></p></blockquote><p>人总是会为了利益不择手段的，哪怕是骗，抢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只是一篇白开水文章，用来吐槽我们学校的管理系统的
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="思考感悟" scheme="http://blog.fivezha.cn/tags/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/"/>
    
      <category term="技术杂类" scheme="http://blog.fivezha.cn/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>我停更的这两个月都在干什么</title>
    <link href="http://blog.fivezha.cn/2020/10/15/recent-situation-2020-10/"/>
    <id>http://blog.fivezha.cn/2020/10/15/recent-situation-2020-10/</id>
    <published>2020-10-15T14:03:36.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>本博客可能要有一段时间不更新了(泣)<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经有一段时间(两个月)没更新过博客了。上下思索，主要有两个原因：一是开学了，事务变多，无心管理博客相关更新，再加上大四的老狗已经无法再在实验室混日子了，导致我现在碰电脑的时间几乎消失掉了；二是面临考研（其实我是不想考的 但是被父母裹挟 很难受），从早晨6：30起床去图书馆再到晚上9：30回去，11点宿舍熄灯，实在是没有时间进行长时间的编程作业，对于博客也没有有效的产出。综上原因，本博客大概率在<strong>12月28日</strong>之前不会更新了。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>那么开学的这两个月我到底干了什么呢？细细想来大概就几件事情了。</p><h3 id="物联网大课设"><a href="#物联网大课设" class="headerlink" title="物联网大课设"></a>物联网大课设</h3><p>首先便是物联网大课设了，这个课设的全面程度其实大概是和毕设差不多的吧，不仅要前端后端硬件，还需要安卓来辅佐，实在是全(sang)面(xin)完(bing)善(kuang)呢。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201015225354.png" alt="image-20201015225354513" title="">                </div>                <div class="image-caption">image-20201015225354513</div>            </figure><p>上面虽然说的四个人组队，但是如果真的经历过课设/大作业的懂得都懂，其实大多是时间就是一个人写完。这个课设说混也好混，因为课设不挂人，只要你过去了，然后项目能跑起来，就能过(分数不在考虑范围)。然而我不知道怎么想的，就是愣是想要把这个课设做的尽量的完美，可能是为了给自己大学四年的技术栈做一个总结吧，我这么想着，就做了整整半个多月，甚至还抽出一天通宵写课设。可以说这个课设是融入了我大学学来的精华了。</p><p>开源地址：<a href="https://github.com/xmmmmmovo/SmartGreenhouse" target="_blank" rel="noopener">https://github.com/xmmmmmovo/SmartGreenhouse</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201015231958.jpg" alt="通宵时间" title="">                </div>                <div class="image-caption">通宵时间</div>            </figure><p>最后附上一张项目的架构图片：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016085721.png" alt="架构图" title="">                </div>                <div class="image-caption">架构图</div>            </figure><p>和一点截图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016090532.jpg" alt="安卓" title="">                </div>                <div class="image-caption">安卓</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016090547.png" alt="web" title="">                </div>                <div class="image-caption">web</div>            </figure><h3 id="综测奖学金"><a href="#综测奖学金" class="headerlink" title="综测奖学金"></a>综测奖学金</h3><p>这个事情算是近期来最舒服的一件事情了<del>(毕竟没有人跟钱过不去)</del>，经过了一整年的艰苦学习，终于拿到了一等奖学金了。回首这一年的学习时光，实在是艰辛，前半年每节课都坐在第一排认真听课，在最后一周无数门考试考试周中拼尽力气，在这后半年网课生活中，通宵写文档，可以说这一年，很累，但是确实是我大学三年废物生活中最有意义的一年了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016085946.png" alt="image-20201016085946052" title="">                </div>                <div class="image-caption">image-20201016085946052</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/IMG_20201113_231300.jpg" alt="IMG_20201113_231300" title="">                </div>                <div class="image-caption">IMG_20201113_231300</div>            </figure><p>对了，这个事情还收回了我当时大二结束立下的flag，成功收回一等奖学金flag，舒服~</p><h3 id="玩乐"><a href="#玩乐" class="headerlink" title="玩乐"></a>玩乐</h3><p>虽然考研复习很紧张，本鼠人还是抽出了国庆一天时间跟朋友出去尽情的玩耍，吃了海底捞(我的奖学金​哭了😥​)，看了姜子牙。最大的感触可能就是希望自己像最后彩蛋里那样，一战封神吧。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016092156.png" alt="快乐的火锅人" title="">                </div>                <div class="image-caption">快乐的火锅人</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016100714.jpg" alt="等待排队时候的咖啡" title="">                </div>                <div class="image-caption">等待排队时候的咖啡</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016100531.jpg" alt="祝大家一战封神" title="">                </div>                <div class="image-caption">祝大家一战封神</div>            </figure><h3 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h3><p>关于复习进度，其实由于自身原因，已经不知道拉下多少进度了，已经准备不去考研去找工作了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>感谢你能有耐心来看本废物的这篇流水账文章，我虽然平日自嘲为废物带学生，但是真的到了该拼一枪的时候还是会去稍微的努力一下的，正所谓”宁可身冷，不可心冷；宁可人穷，不可志穷”。再高耸的山峰，如若自己在山脚便退却，便永世不得参得一览众山小的美貌了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本博客可能要有一段时间不更新了(泣)
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="通知" scheme="http://blog.fivezha.cn/tags/%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>记一次核酸检测经历</title>
    <link href="http://blog.fivezha.cn/2020/08/23/fever-test/"/>
    <id>http://blog.fivezha.cn/2020/08/23/fever-test/</id>
    <published>2020-08-22T16:23:45.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次很慌的核酸检测经历<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>收到电话通知了，没有事情，检测是阴性，烧也退下去了。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>20号早晨莫名其妙发烧了，本来以为没事情的，结果吃了退烧药啥的都不管用，一直到了第二天还在发烧，有点慌了，就去医院做了一下核酸检测。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822012133.png" alt="image-20200822012126040" title="">                </div>                <div class="image-caption">image-20200822012126040</div>            </figure><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>总结一下 <strong>核酸检测</strong> 的基本步骤吧:</p><ol><li>填表</li><li>医生采样</li><li>完毕</li></ol><p>看上去就这么简单吧, 但是这个采样又是什么样子的呢?</p><p>这里其实有两种方案, 第一种就是下面这种,先来看看描述:</p><blockquote><p>采样人员一手轻扶被采集人员的头部，一手执拭子，拭子贴鼻孔进入，沿下鼻道的底部向后缓缓深入，由于鼻道呈弧形，不可用力过猛，以免发生外伤出血。<strong>待拭子顶端到达鼻咽腔后壁时，轻轻旋转一周</strong>（如遇反射性咳嗽，应停留片刻） ，然后缓缓取出拭子，将拭子头浸入含2～3ml病毒保存液（也可使用等渗盐溶液、组织培养液或磷酸盐缓冲液）的管中，尾部弃去，旋紧管盖。</p></blockquote><p>听上去是不是云里雾里的? 然而相信我, 直接看到图片之后直接会 <strong>心 肺 停 止</strong> 的, 你看这难道不是处刑吗?</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822085940.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822085949.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822085955.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>啊哈, 不过好在这里还有第二个方案, 也是更加普及的方案:</p><blockquote><p>被采集人员先用生理盐水漱口，采样人员将拭子放入无菌生理盐水中湿润(禁止将拭子放入病毒保存液中，避免抗生素引起过敏)，被采集人员头部微仰，嘴张大，并发“啊”音，<strong>露出两侧咽扁桃体，将拭子越过舌根，在被采集者两侧咽扁桃体稍微用力来回擦拭至少3次，然后再在咽后壁上下擦拭至少3次</strong>，将拭子头浸入含2～3ml病毒保存液（也可使用等渗盐溶液、组织培养液或磷酸盐缓冲液）的管中，尾部弃去，旋紧管盖。咽拭子也可与鼻咽拭子放置于同一管中。</p></blockquote><p>“看上去”是不是更加”温柔”了?啧啧啧, 请看下面这个图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822090002.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>没错! 这个就是直接往你喉咙里捅…….直接捅到嗓子眼的那种……</p><p>”什么？你以为是二选一？“哦不，是两个都要做！感觉呢，感觉就是非常酸爽，就像是吃了一斤的芥末混合着催吐剂一样，整个人都不好了。。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822090008.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>也不知道怎么作下了，一直发烧到了22号才有所好转，体温恢复了正常，但是头痛难忍+胳膊莫名其妙的极其酸痛使得我现在无法入睡，只得起床写下此篇小记，用以记录和转移注意力缓解疼痛感。。。。</p><p>最后附上检查结果：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200823013557.png" alt="image-20200823013551713" title="">                </div>                <div class="image-caption">image-20200823013551713</div>            </figure></p><p>不过医生的字真的是草的不得了。。。。但起码还能看懂点。。。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200823013656.png" alt="image-20200823013649688" title="">                </div>                <div class="image-caption">image-20200823013649688</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次很慌的核酸检测经历
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>给准大一的萌新们的一份小指南</title>
    <link href="http://blog.fivezha.cn/2020/08/11/freshman-guide/"/>
    <id>http://blog.fivezha.cn/2020/08/11/freshman-guide/</id>
    <published>2020-08-11T03:29:51.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>本文章原写于<code>2019-08-14</code>，现转移到个人博客上用来继续给各位刚入大学的萌新指出一条路来。<a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>首先欢迎来到中北大学大数据学院！</p><p>这个暑假，强烈建议打一下C语言，高数的基础，还有请不要忘记你所学过的英语知识。</p><p>开学虽然没有考试，但是你要想比别人走的更远，请先比别人准备更多的东西。</p><p>开学之后会有实验室宣讲纳新，咱们院的话具体有安卓，动漫，物联网，自主可控，大数据与网络安全，ACM/ICPC集训队。(<strong>注</strong>:群文件里有咱们院各个实验室简介,可以先简单了解一下,但还是要看宣讲选择)</p><p>软件学院有ACM实验室和网络安全研究所，喜欢硬件机器人或者机械之类的话六院（仪器电子）有机器人实验室，五院（信息与通信）有卓创，信号与系统，十五院（电器）有电子，电气，轨道等等。</p><p>所以说，基本上只要有想学的方向都会有相应的学习平台。</p><p><strong>P.S. 群文件里已经根据下面的标题分好类了所以下面所有群文件资料地址请看标题。以后群文件代指群文件里/标题名文件夹</strong></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="解压缩工具"><a href="#解压缩工具" class="headerlink" title="解压缩工具"></a>解压缩工具</h4><ul><li>bandizip (BANDIZIP-SETUP.exe)<ul><li>一个免费轻量的压缩解压缩工具 并且里面的自动解压功能很好用！</li></ul></li></ul><h4 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h4><ul><li>百度网盘下载(这里本来是pandownload的，但是凉了)</li><li>qBittorrentEE-v4.2.5.12</li></ul><h4 id="PDF阅读工具"><a href="#PDF阅读工具" class="headerlink" title="PDF阅读工具"></a>PDF阅读工具</h4><ul><li>文电通PDF reader(GaaihoReader_CHS_ALL_4.20.exe)<ul><li>一个台湾公司出品的软件，免费没有广告，并且很轻量！</li></ul></li><li>Adobe Acrobat</li></ul><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><p>这门课是你们刚上大学便会开的课程，并且也大概率是你学的第一门语言，重要性不必分说。</p><p>并且实验室面试也是会参考<strong>一部分</strong>C语言知识储量的，所以很重要！</p><h4 id="资料！"><a href="#资料！" class="headerlink" title="资料！"></a>资料！</h4><h5 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h5><p>编程软件乃是基础，群文件里有电脑端跟Android手机端(IOS请自行解决因为我也没用过233333)两个编程软件：</p><ul><li>DEV-Cpp(Dev-Cpp 5.11 TDM-GCC 4.9.2 Setup.exe)<ul><li>电脑端软件 安装步骤也是配套的</li></ul></li><li>SimpleC(simpleC_1.2.29.apk)<ul><li>Android编程软件</li></ul></li><li>C/C++-programming language 离线<ul><li>IOS编程软件</li><li>这个因为苹果政策原因只能贴AppStore网址了</li><li><a href="https://apps.apple.com/cn/app/c-c-programming-language-%E7%A6%BB%E7%BA%BF/id1016322367" target="_blank" rel="noopener">https://apps.apple.com/cn/app/c-c-programming-language-%E7%A6%BB%E7%BA%BF/id1016322367</a></li></ul></li><li>C/C++$<ul><li>同样是IOS上的，这个是上面那个的付费版多了代码提示</li><li><a href="https://apps.apple.com/cn/app/c-c-%24/id1003101482" target="_blank" rel="noopener">https://apps.apple.com/cn/app/c-c-%24/id1003101482</a></li></ul></li></ul><h5 id="书本"><a href="#书本" class="headerlink" title="书本"></a>书本</h5><p>群文件里有一本<strong>C Primer Plus (第五版) 中文版.pdf</strong>，这本书讲授C语言很全面，基本各个类型均有涉及，比课本要讲的清晰明确，是很好的入门书籍。</p><h5 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h5><p>这边推荐浙江大学<strong>翁恺</strong>老师的网课，网易云课堂/中国大学MOOC跟B站搜索翁恺便可找到</p><p>下面贴出网易云课堂的网址：</p><p><a href="https://mooc.study.163.com/course/1000002011#/info" target="_blank" rel="noopener">https://mooc.study.163.com/course/1000002011#/info</a></p><p>中国大学MOOC还没有开课也贴一下：</p><p><a href="https://www.icourse163.org/course/ZJU-199001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-199001</a></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>python作为一门类脚本语言，其最大的特点就是简单易学，入门迅速，并且上手后很容易写出成品程序，可以快速树立编程信心，让自己对编程有兴趣，多写代码也对自己大有益处。</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul><li>群文件里有<code>Environment Variable Setting.zip</code>文件 这个是自动配置脚本</li><li>如果不会使用也可以参考下面的博客:<br><a href="https://zhuanlan.zhihu.com/p/42984735" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42984735</a></li></ul><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><ul><li>廖雪峰博客：全面而又细致的入门级教程，不过只有纯文字<br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400</a></li><li>莫烦python：带有视频，容量上较廖雪峰先生博客少<br><a href="https://morvanzhou.github.io/tutorials/python-basic/basic/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/basic/</a></li><li>十分钟 Python 从 Zero 到 Hero：适合有一定基础的(学过至少一门语言的)<br><a href="https://zhuanlan.zhihu.com/p/33406196" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33406196</a></li></ul><h3 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h3><p>高等数学，以下简称高数。这是你们大学生活中极其重要的一门学科，因为计算机 ≈ 数学知识的应用，所以高数线代概率请务必打好基础。</p><p>并且在日后的编程中，无论是业务还是算法，用到数学知识的地方都是极多的，尤其是当下最热门的人工智能方向，更是数学应用的极致体现。</p><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><ul><li>PPT<ul><li>群文件里有高数上课用的PPT</li></ul></li><li>川大徐小湛老师的视频<ul><li>这个讲的很慢很仔细 适合没有基础的萌新看</li><li>上部分视频：<br><a href="https://www.bilibili.com/video/av57879350?from=search&amp;seid=1260147609372582774" target="_blank" rel="noopener">https://www.bilibili.com/video/av57879350?from=search&amp;seid=1260147609372582774</a></li><li>下部分视频：<br><a href="https://www.bilibili.com/video/av57932680?from=search&amp;seid=1260147609372582774" target="_blank" rel="noopener">https://www.bilibili.com/video/av57932680?from=search&amp;seid=1260147609372582774</a></li></ul></li></ul><h3 id="英语知识"><a href="#英语知识" class="headerlink" title="英语知识"></a>英语知识</h3><p>不要扔掉英语！</p><p>不要扔掉英语！</p><p>不要扔掉英语！</p><p>大学生尤其是计算机系的学生，英语极其重要，因为第一手，最前沿的资料大多都是英文资料，不要等着有人翻译成中文，因为那时这个技术已经落后了！</p><p>所以先从单词开始，像高中那样慢慢积累吧，因为一门语言是不可能一蹴而就的。</p><p>不要忘了大学等级考试也是很重要的。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>上面说了很多，但是并不是让你都学习，浅尝辄止不如不学，还有半个月的暑假生活，在下希望宁们能够把其中一样做好便已经超出大部分人很多了。</p><p>​                                                                                                                                                  </p><p>​                                                                                                                                                    ———-2019.08.14</p><p>​                                                                                                                                                                卑微小扎</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章原写于&lt;code&gt;2019-08-14&lt;/code&gt;，现转移到个人博客上用来继续给各位刚入大学的萌新指出一条路来。
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="萌新指南" scheme="http://blog.fivezha.cn/tags/%E8%90%8C%E6%96%B0%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(7)---二分搜索和一些应用</title>
    <link href="http://blog.fivezha.cn/2020/07/31/algorithm4-1-binary-search/"/>
    <id>http://blog.fivezha.cn/2020/07/31/algorithm4-1-binary-search/</id>
    <published>2020-07-30T22:57:49.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>二分搜索和一些用到二分思想的题目<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二分搜索可以说是应用非常广泛的一类算法了，非常多的暴力算法优化方案都是在一些条件下用二分，并且二分效率很高，可以让$\mathcal{O}(N)$算法秒变$\mathcal{O}(log_2N)$，效率大大提高<del>(超时就先往二分上靠再说)</del>，故本篇文章就讨论一下二分算法和一些关于二分的题目。</p><h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><p>最基础的版本，用于在一个有序序列中查找需要的元素：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个列表中二分查找到某个值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 11:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 需要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo 左范围 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hi 右范围 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 查找到了就返回下标，没查找到就返回-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">binarySearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = _hi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">val</span> mid = lo + (hi - lo) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            key &lt; list[mid] -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            key &gt; list[mid] -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每一次都会是比上一次缩减<strong>1/2</strong>的搜查量，$\cfrac{N}{2^k} = 1$，所以时间复杂度为<br>$$<br>\mathcal{O}(\log_2N)<br>$$<br>空间复杂度为<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="查找列表中是否存在某元素"><a href="#查找列表中是否存在某元素" class="headerlink" title="查找列表中是否存在某元素"></a>查找列表中是否存在某元素</h2><p>查找列表中是否存在某元素，这个问题，其实用<code>遍历</code>或者<code>二分</code>都可以解，并且不会特别影响时间复杂度，因为排序算法时间复杂度$\mathcal{O}(Nlog_2N)$已经决定了这个算法的时间复杂度，但是利用二分搜索更能提升算法效率，说不准就卡那么几毫秒。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找列表中是否存在某元素，利用[binarySearch]二分查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 11:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 需要查找的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">containsInList</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> sorted = list.sorted()</span><br><span class="line">    <span class="comment">// 这里调用了上面的函数</span></span><br><span class="line">    <span class="keyword">val</span> res = binarySearch(sorted, key)</span><br><span class="line">    <span class="keyword">return</span> res != -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<br>$$<br>\mathcal{O}(Nlog_2N + log_2N)\\<br>=\mathcal{O}(Nlog_2N)<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(N)<br>$$<br>因为启用了额外的数组。</p><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>本题目也可以使用二分搜索做，最开始是使用蛮力法解决，时间复杂度为$\mathcal{O}(N^3)$，将其中最后一个元素的选取改为二分查找后便成为了$\mathcal{O}(N^2)$，复杂度大大降低。原理就是先排序，依旧是两重循环找出前两个数字，第三个数值利用二分法从剩余元素中找。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找已排序元素中是否有重复元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 11:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否存在重复元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">containsDuplicatesInSorted</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until list.size - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list[i] == list[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分法[binarySearch]求三数之和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 满足和为0的所有组合的列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 数组元素小于3个时抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">threeSumBinaryFast</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;, num: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> res = LinkedList&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">    <span class="keyword">val</span> sl = list.sorted().run &#123;</span><br><span class="line">        <span class="keyword">if</span> (containsDuplicatesInSorted(<span class="keyword">this</span>))</span><br><span class="line">            distinct()</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list.size &lt; <span class="number">3</span>) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"数组非重复元素小于3个!"</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> sl.indices) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> i + <span class="number">1</span> until sl.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> k = binarySearch(sl, num - (sl[i] + sl[j]), j + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (k != -<span class="number">1</span>) &#123;</span><br><span class="line">                res.add(listOf(sl[i], sl[j], sl[k]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度方面，排序+循环时间复杂度$\mathcal{O}(N\log_2N+N^2\log_2N)$，化简得：<br>$$<br>\mathcal{O}(N^2)<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(N)<br>$$<br>排序产生的中间数组。</p><h2 id="数组局部最小元素"><a href="#数组局部最小元素" class="headerlink" title="数组局部最小元素"></a>数组局部最小元素</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200731122225.png" alt="题目描述" title="">                </div>                <div class="image-caption">题目描述</div>            </figure><p>思路已经很明确了，即是每一次都往小部分缩小<strong>1/2</strong>的范围，最终查找到的符合条件的mid就成功了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部最小元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左边界 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右边界 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最小元素数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 数组元素小于3个时抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">partialMinElem</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">Number</span>&gt;, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.size &lt; <span class="number">3</span>) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"数组元素小于3个！"</span>)</span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = _hi</span><br><span class="line">    <span class="comment">// 两边需要单独测试</span></span><br><span class="line">    <span class="keyword">if</span> (list[lo] &lt; list[lo + <span class="number">1</span>]) <span class="keyword">return</span> lo</span><br><span class="line">    <span class="keyword">if</span> (list[hi] &lt; list[hi - <span class="number">1</span>]) <span class="keyword">return</span> hi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo <span class="keyword">in</span> _lo..hi &amp;&amp; hi &lt;= _hi) &#123;</span><br><span class="line">        <span class="comment">// 取mid</span></span><br><span class="line">        <span class="keyword">val</span> mid = lo + (hi - lo) / <span class="number">2</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里分为三个情况</span></span><br><span class="line"><span class="comment">         * ↘↗直接返回</span></span><br><span class="line"><span class="comment">         * ↗↗往左走</span></span><br><span class="line"><span class="comment">         * ↗↘都可以，原题是往小的地方走(因为部分排序过的数组会更快)</span></span><br><span class="line"><span class="comment">         * ↘↘往右走</span></span><br><span class="line"><span class="comment">         * 总之就是往小的地方走</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            mid == _lo -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &lt; list[mid + <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> lo = mid + <span class="number">1</span></span><br><span class="line">            mid == _hi -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &lt; list[mid - <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            list[mid - <span class="number">1</span>] &gt; list[mid] &amp;&amp; list[mid] &lt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &lt; list[mid] &amp;&amp; list[mid] &lt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &lt; list[mid] &amp;&amp; list[mid] &gt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[mid - <span class="number">1</span>] &gt;= list[mid + <span class="number">1</span>]) lo = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当所有元素都是一样的时候才没有最小值，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度(最差)：<br>$$<br>\mathcal{O}(2log_2N)<br>$$<br>为什么是这个时间复杂度呢，因为在最差情况下，向一边走完之后发现没有结果，然后就往另一边走，才发现结果，所以总体是$\mathcal{O}(2log_2N)$。</p><p>空间复杂度：<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="矩阵局部最小元素"><a href="#矩阵局部最小元素" class="headerlink" title="矩阵局部最小元素"></a>矩阵局部最小元素</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200731214656.png" alt="题目描述" title="">                </div>                <div class="image-caption">题目描述</div>            </figure><p>这个题目也是跟上个题目类似，就是每一次缩减<strong>1/2</strong>的大小，不过这个并非数组，而是一个矩阵，所以我们对于复杂度不能用上一个题目那种分析方式来写。本题目的思路便是先从最中间元素开始搜查，根据上一题目的四种情况进行讨论，横向讨论完在下一次用纵向讨论，这样每一次都是缩减<strong>1/2</strong>，最终找到负荷情况的i，j就可以了。</p><p>但其实这个题目<strong>混沌的一批</strong>，如果用<code>遍历+二分</code>的做法的话，就会使得时间复杂度成为$\mathcal{O}(Nlog_2N)$，而非题目所要求的$\mathcal{O}(N)$，所以才要一直二分下去。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 矩阵局部最小元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix 矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最小元素数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 矩阵为空的时候抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">matrixPartialMinElem</span><span class="params">(matrix: <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">T</span>&gt;&gt;)</span></span>: Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.isEmpty()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"矩阵不能为空！"</span>)</span><br><span class="line">    <span class="keyword">var</span> lor = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> hir = matrix.size - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lor &lt;= hir) &#123;</span><br><span class="line">        <span class="keyword">val</span> mr = lor + (hir - lor) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> kc = partialMinElem(matrix[mr])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            kc == -<span class="number">1</span> -&gt; &#123;</span><br><span class="line">                lor++</span><br><span class="line">            &#125;</span><br><span class="line">            mr == <span class="number">0</span> -&gt;</span><br><span class="line">                <span class="keyword">if</span> (matrix[mr + <span class="number">1</span>][kc] &gt; matrix[mr][kc])</span><br><span class="line">                    <span class="keyword">return</span> Pair(mr, kc)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    lor = mr + <span class="number">1</span></span><br><span class="line">            mr == matrix.size - <span class="number">1</span> -&gt;</span><br><span class="line">                <span class="keyword">if</span> (matrix[mr][kc] &lt; matrix[mr - <span class="number">1</span>][kc])</span><br><span class="line">                    <span class="keyword">return</span> Pair(mr, kc)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    hir = mr - <span class="number">1</span></span><br><span class="line">            matrix[mr - <span class="number">1</span>][kc] &gt; matrix[mr][kc] &amp;&amp; matrix[mr][kc] &lt; matrix[mr + <span class="number">1</span>][kc] -&gt;</span><br><span class="line">                <span class="keyword">return</span> Pair(mr, kc)</span><br><span class="line">            matrix[mr - <span class="number">1</span>][kc] &lt; matrix[mr][kc] &amp;&amp; matrix[mr][kc] &lt; matrix[mr + <span class="number">1</span>][kc] -&gt;</span><br><span class="line">                hir = mr - <span class="number">1</span></span><br><span class="line">            matrix[mr - <span class="number">1</span>][kc] &lt; matrix[mr][kc] &amp;&amp; matrix[mr][kc] &gt; matrix[mr + <span class="number">1</span>][kc] -&gt;</span><br><span class="line">                <span class="keyword">if</span> (matrix[mr - <span class="number">1</span>][kc] &gt;= matrix[mr + <span class="number">1</span>][kc]) lor = mr + <span class="number">1</span> <span class="keyword">else</span> hir = mr - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; lor = mr + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Pair(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度方面：</p><p>这个我怎么推都是$\mathcal{O}((log_2N)^2)$的复杂度（其实有推出一个$\mathcal{O}(2N)$来，但是总感觉不是特别靠谱），如果有大佬能推出来$\mathcal{O}(N)$的复杂度可以在下面留言，感谢！</p><p>空间复杂度方面：<br>$$<br>\mathcal{O}(1)<br>$$<br>没什么好说的。</p><h2 id="双调查找"><a href="#双调查找" class="headerlink" title="双调查找"></a>双调查找</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200802133254.png" alt="image-20200802133247034" title="">                </div>                <div class="image-caption">image-20200802133247034</div>            </figure><p>可以发现，这个像是局部最小值的变形，这里面必定有<strong>极大值</strong>，所以我们把问题分解成了三个子问题：</p><ol><li>找到最大值</li><li>向左二分找值</li><li>向右二分找值</li></ol><p>这样三个二分查找总共最差则是$\mathcal{O}(3log_2N)$，满足题意。为什么这里可以直接用二分法找最大值呢，因为这个数组很特殊，先增后减，可以说局部最大值就是最大值，所以可以利用二分查找直接找出。</p><p>局部最大函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部最大元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左边界 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右边界 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最大元素下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 数组元素小于3个时抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">partialMaxElem</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = _hi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="comment">// 取mid</span></span><br><span class="line">        <span class="keyword">val</span> mid = lo + (hi - lo) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            mid == _lo -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &gt; list[mid + <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> lo = mid + <span class="number">1</span></span><br><span class="line">            mid == _hi -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &gt; list[mid - <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            list[mid - <span class="number">1</span>] &lt; list[mid] &amp;&amp; list[mid] &gt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &gt; list[mid] &amp;&amp; list[mid] &gt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &gt; list[mid] &amp;&amp; list[mid] &lt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[mid - <span class="number">1</span>] &lt;= list[mid + <span class="number">1</span>]) lo = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当所有元素都是一样的时候才没有最小值，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双栈查找函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双调查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/31 15:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左边界 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右边界 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 查找元素下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 查不到最大元素时抛出常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">doubleToneSearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> mi = partialMaxElem(list)</span><br><span class="line">    <span class="keyword">if</span> (mi == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"请输入正确的双调列表！"</span>)</span><br><span class="line">    <span class="keyword">if</span> (list[mi] == key)</span><br><span class="line">        <span class="keyword">return</span> mi</span><br><span class="line">    <span class="keyword">val</span> l = binarySearch(list, key, _lo, mi - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> r = binarySearch(list.subList(mi + <span class="number">1</span>, _hi + <span class="number">1</span>).reversed(), key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">        r == -<span class="number">1</span> -&gt; l</span><br><span class="line">        l == -<span class="number">1</span> -&gt; _hi - r</span><br><span class="line">        <span class="keyword">else</span> -&gt; l</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度（最差）：<br>$$<br>\mathcal{O}((\frac{1}{2}+\frac{1}{2}+2)log_2N) =\\<br>\mathcal{O}(3log_2N)<br>$$</p><p>空间复杂度：<br>$$<br>\mathcal{O}(N)<br>$$<br>用了一半的反转数组。</p><h2 id="仅用加减实现的二分查找"><a href="#仅用加减实现的二分查找" class="headerlink" title="仅用加减实现的二分查找"></a>仅用加减实现的二分查找</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200802233108.png" alt="image-20200802233108582" title="">                </div>                <div class="image-caption">image-20200802233108582</div>            </figure><p>说的挺高深的，其实就是利用倒了<code>斐波那契数列</code>，个人感觉可能还能有数列满足指数级，暂时还没时间去想，有空可能会去想。</p><p>为什么能用<code>斐波那契数列</code>来求解呢？这还要跟<code>斐波那契数列</code>的特性有关系，我们知道<code>斐波那契数列</code>的规律是这样的：<br>$$<br>\mathcal{f}(n)=<br>\begin{cases}<br>1,  &amp; \mbox{if }n\mbox{ is 1} \\<br>1, &amp; \mbox{if }n\mbox{ is 2} \\<br>\mathcal{f}(n - 1) + \mathcal{f}(n-2), &amp;\mbox{if }n\mbox{ is &gt;=3}<br>\end{cases}<br>$$<br>所以从分割点的左右两边来看，都包含有<code>f(1)..f(n-2)</code>的所有信息，只不过右边比左边多出了<code>f(n-1)</code>，所以无论是左边分还是右边往下分，都是可以分离直到<code>f(1)</code>产生的，这就是为什么能用<code>斐波那契数列</code>代替二分搜索的原因。</p><p>知道了原因，我们就来思考条件，首先一个首要条件便是：<strong>列表大小必须是斐波那契数列其中的某个元素 - 1</strong>才可以进行，所以我们需要先将数组扩充到大于这个数组长度的最小<code>斐波那契数列</code>的值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建最大值大于[length]的第一个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/3 1:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 最长值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 数列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">makeFibonacciListUntilLength</span><span class="params">(length: <span class="type">Int</span>)</span></span>: List&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (length) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; emptyList()</span><br><span class="line">        <span class="number">1</span> -&gt; listOf(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="number">2</span> -&gt; listOf(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> fl = mutableListOf(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">var</span> nv = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> (length &gt; nv - <span class="number">1</span>) &#123;</span><br><span class="line">                fl.add(nv)</span><br><span class="line">                nv += fl[fl.size - <span class="number">2</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            fl.add(nv)</span><br><span class="line">            fl</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契二分搜索</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/31 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 需要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左范围 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右范围 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 查找到了就返回下标，没查找到就返回-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">fibonacciBinarySearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (list.size &lt; <span class="number">3</span>) <span class="keyword">return</span> list.indexOf(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时最末尾的值肯定是刚好大于长度的那个</span></span><br><span class="line">    <span class="keyword">val</span> fbl = makeFibonacciListUntilLength(_hi - _lo + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> tl = list.toMutableList()</span><br><span class="line">    tl.addAll(List((fbl.last() - <span class="number">1</span> - list.size)) &#123; list.last() &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = <span class="keyword">if</span> (_hi == list.lastIndex) tl.lastIndex <span class="keyword">else</span> _hi</span><br><span class="line">    <span class="keyword">var</span> k = fbl.lastIndex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">val</span> mid = lo + fbl[k - <span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            tl[mid] &gt; key -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">                k--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 小堆就-2，因为少了f(n-1)的信息</span></span><br><span class="line">            tl[mid] &lt; key -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">                k -= <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">return</span> <span class="keyword">if</span> (mid &gt;= _hi) list.lastIndex <span class="keyword">else</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<br>$$<br>\mathcal{O}(log_2N)<br>$$<br>空间复杂度：<br>$$<br>\mathcal{O}(N)<br>$$<br>越往后来说空间增加都近似于前一个数值的$\frac{1}{3}$，所以空间复杂度约为$\mathcal{O}(N)$</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二分搜索和一些用到二分思想的题目
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>如何利用GitHubAction自动化测试你的kotlin程序并部署文档到GithubPage</title>
    <link href="http://blog.fivezha.cn/2020/07/28/github-action-kotlin-test-action/"/>
    <id>http://blog.fivezha.cn/2020/07/28/github-action-kotlin-test-action/</id>
    <published>2020-07-28T01:42:12.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>简单的实践操作<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天一直在写算法，但是一个一个测试太麻烦了，并且也没有文档看，简直累人，所以就写了个<code>action</code>让它自动生成并部署到<code>GithubPage</code>上面去，爽了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ......</span><br><span class="line">    testImplementation(</span><br><span class="line">            <span class="string">'org.assertj:assertj-core:3.12.2'</span>,</span><br><span class="line">            <span class="string">'org.junit.jupiter:junit-jupiter-api:5.4.2'</span></span><br><span class="line">    )</span><br><span class="line">    testRuntime(<span class="string">'org.junit.jupiter:junit-jupiter-engine:5.4.2'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试task"><a href="#编写测试task" class="headerlink" title="编写测试task"></a>编写测试task</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成！看看效果吧~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728100426.png" alt="test" title="">                </div>                <div class="image-caption">test</div>            </figure><p>测试成功~</p><h2 id="文档生成"><a href="#文档生成" class="headerlink" title="文档生成"></a>文档生成</h2><p>本次使用的是<code>kotlin</code>官方文档生成器<a href="https://github.com/Kotlin/dokka" target="_blank" rel="noopener"><strong>dokka</strong></a>，内含有多种生成方案，并且可以集成到<code>Gradle</code>中，爽的。</p><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>这里以插件方式引入：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    ......</span><br><span class="line">    id <span class="string">'org.jetbrains.dokka'</span> version <span class="string">'0.10.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写task"><a href="#编写task" class="headerlink" title="编写task"></a>编写task</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">dokka &#123;</span><br><span class="line">    <span class="comment">// 样式，具体看官方文档</span></span><br><span class="line">    outputFormat = <span class="string">'javadoc'</span></span><br><span class="line">    outputDirectory = <span class="string">"$buildDir/dokka"</span></span><br><span class="line">    disableAutoconfiguration = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    cacheRoot = <span class="string">'default'</span></span><br><span class="line"></span><br><span class="line">    configuration &#123;</span><br><span class="line">        moduleName = <span class="string">'doc'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use to include or exclude non public members.</span></span><br><span class="line">        includeNonPublic = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do not output deprecated members. Applies globally, can be overridden by packageOptions</span></span><br><span class="line">        skipDeprecated = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions</span></span><br><span class="line">        reportUndocumented = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do not create index pages for empty packages</span></span><br><span class="line">        skipEmptyPackages = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// This is a list of platform names that will be shown in the final result. See the "Platforms" section of this readme</span></span><br><span class="line">        targets = [<span class="string">"JVM"</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Platform used for code analysis. See the "Platforms" section of this readme</span></span><br><span class="line">        platform = <span class="string">"JVM"</span></span><br><span class="line"></span><br><span class="line">        sourceRoot &#123;</span><br><span class="line">            <span class="comment">// 源文件目录</span></span><br><span class="line">            path = <span class="string">"src"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sourceLink &#123;</span><br><span class="line">            <span class="comment">// Unix based directory relative path to the root of the project (where you execute gradle respectively).</span></span><br><span class="line">            path = <span class="string">"src/main/kotlin"</span> <span class="comment">// or simply "./"</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// URL showing where the source code can be accessed through the web browser</span></span><br><span class="line">            url = <span class="string">"https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions/blob/master/src/main/kotlin"</span> <span class="comment">//remove src/main/kotlin if you use "./" above</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定行数前缀，github是#L</span></span><br><span class="line">            lineSuffix = <span class="string">"#L"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于链接java官方文档</span></span><br><span class="line">        jdkVersion = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disable linking to online kotlin-stdlib documentation</span></span><br><span class="line">        noStdlibLink = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disable linking to online JDK documentation</span></span><br><span class="line">        noJdkLink = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成！看看效果~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728101048.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728101144.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功~</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>每次都运行脚本太累了，干脆直接用<code>CI</code>自动跑了，这里用的是<code>GithubAction</code>，具体如何使用可以看：<a href="https://blog.fivezha.cn/2020/07/21/github-action-demo/">如何利用GitHubAction和GithubPage部署React应用</a> 这篇，这里只写出<code>yml</code>文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Test</span> <span class="string">Workflow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Kotlin</span> <span class="string">Tests</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">      <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 验证wrapper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">validate</span> <span class="string">wrapper</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">gradle/wrapper-validation-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装jdk</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 缓存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Gradle</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.gradle/caches</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle-$&#123;&#123;</span> <span class="string">hashFiles('**/*.gradle')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 给权限</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Grant</span> <span class="string">execute</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">gradlew</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 测试程序</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">with</span> <span class="string">gradle</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Doc</span> <span class="string">Workflow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span> <span class="string">[published]</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Kotlin</span> <span class="string">Documentation</span> <span class="string">Generation</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">      <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 验证wrapper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">validate</span> <span class="string">wrapper</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">gradle/wrapper-validation-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装jdk</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 缓存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Gradle</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.gradle/caches</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle-$&#123;&#123;</span> <span class="string">hashFiles('**/*.gradle')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 给权限</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Grant</span> <span class="string">execute</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">gradlew</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 缓存</span></span><br><span class="line">      <span class="comment"># 暂时还未找到hash值的解决方案，找到了请pr</span></span><br><span class="line">      <span class="comment"># - name: Cache Dokka</span></span><br><span class="line">      <span class="comment">#   uses: actions/cache@v2</span></span><br><span class="line">      <span class="comment">#   with:</span></span><br><span class="line">      <span class="comment">#     path: ~/.cache/dokka</span></span><br><span class="line">      <span class="comment">#     key: $&#123;&#123; runner.os &#125;&#125;-dokka-$&#123;&#123; hashFiles('**/*') &#125;&#125;</span></span><br><span class="line">      <span class="comment">#     restore-keys: $&#123;&#123; runner.os &#125;&#125;-dokka</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 生成文档</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">documentation</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">dokka</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 部署到ghpage</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./build/dokka</span></span><br></pre></td></tr></table></figure><p>完成！测试一下~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728101648.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功~</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>爽到了爽到了~</p><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">GitHub地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的实践操作
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="gradle" scheme="http://blog.fivezha.cn/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>如何利用GitHubAction和gulp自动化部署压缩你的GithubPage+Hexo博客</title>
    <link href="http://blog.fivezha.cn/2020/07/24/github-action-blog/"/>
    <id>http://blog.fivezha.cn/2020/07/24/github-action-blog/</id>
    <published>2020-07-24T13:37:09.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>差点翻车<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>GithubAction</code>作为<code>Github</code>提供的免费的<code>CI/CD</code>服务，让开发者感受到了自动化的爽，相比起<code>Travis CI</code>来说，<code>GitHubAction</code>集成方便，非常适合快速部署的操作，本教程便是一篇如何利用<code>GithubAction</code>对于<code>GithubPage+Hexo</code>博客进行自动化部署，并利用<code>gulp</code>进行压缩。</p><h2 id="配置GithubAction"><a href="#配置GithubAction" class="headerlink" title="配置GithubAction"></a>配置GithubAction</h2><h3 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h3><p>首先依旧是申请key，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724215856700.png" alt="image-20200724215856700" title="">                </div>                <div class="image-caption">image-20200724215856700</div>            </figure><p>此时会生成<strong>.pub的公钥与没有后缀的私钥</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721154822499.png" alt="成功生成密钥" title="">                </div>                <div class="image-caption">成功生成密钥</div>            </figure><h3 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h3><p>首先新建一个空仓库，用于存放你的博客根目录，新建完成后将<strong>博客根目录</strong>所有文件都上传到这个仓库中，传完项目结构大体如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220337436.png" alt="image-20200724220337436" title="">                </div>                <div class="image-caption">image-20200724220337436</div>            </figure><p>然后开始配置仓库，首先</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220449987.png" alt="image-20200724220449987" title="">                </div>                <div class="image-caption">image-20200724220449987</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220517055.png" alt="image-20200724220517055" title="">                </div>                <div class="image-caption">image-20200724220517055</div>            </figure><p>配置成你的公钥，然后在上传博客的仓库中，上传你的私钥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220651398.png" alt="image-20200724220651398" title="">                </div>                <div class="image-caption">image-20200724220651398</div>            </figure><p><strong>注意这里的私钥名字一定要跟后面Action里面设置的一样！(不知道就跟我一样)</strong></p><h3 id="配置workflow"><a href="#配置workflow" class="headerlink" title="配置workflow"></a>配置workflow</h3><p>在博客根目录新建<code>.github</code>文件夹，再在<code>.github</code>文件夹里新建<code>workflows</code>文件夹，新建完在<code>workflows</code>文件夹里新建<code>deploy.yml</code>文件，然后按照如下编写：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库就运行</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 切换到master</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装node</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">11.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">"11.x"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 缓存 node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装hexo并生成</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 部署到GitHubPage</span></span><br><span class="line">    <span class="comment"># from https://github.com/peaceiris/actions-gh-pages    </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="comment"># 这里写你自己的仓库名</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">xmmmmmovo/xmmmmmovo.github.io</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>好了，这样就已经配置完成了，你每次提交到此仓库，便会自动帮你运行部署到GithubPage上去。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221510619.png" alt="image-20200724221510619" title="">                </div>                <div class="image-caption">image-20200724221510619</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221450653.png" alt="image-20200724221450653" title="">                </div>                <div class="image-caption">image-20200724221450653</div>            </figure><p>可以看到，已经成功运行了。</p><h2 id="配置gulp"><a href="#配置gulp" class="headerlink" title="配置gulp"></a>配置gulp</h2><p>我们随便点开一个文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221832348.png" alt="image-20200724221832348" title="">                </div>                <div class="image-caption">image-20200724221832348</div>            </figure><p>可以看到，里面充斥着大量的空格，积少成多，这会占用非常多的时间，让你的博客感觉加载起来很慢，所以既然我们都是全自动化部署了，我们不如直接在进行一遍压缩操作，这样使你博客加载的更加迅速，体验更加良好。</p><h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><p>首先进到博客根目录，然后打开命令行，输入(这里其实你直接在<code>package.json</code>里面写也行(因为node_modules已经没用了)，但是我比较懒)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp@3.9.1 gulp-minify-css gulp-htmlmin gulp-htmlclean --save-dev</span><br></pre></td></tr></table></figure><p>待完成后，改写<code>deploy.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库就运行</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 切换到master</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装node</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">11.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">"11.x"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 缓存 node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装hexo并生成</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">gulp</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 部署到GitHubPage</span></span><br><span class="line">    <span class="comment"># from https://github.com/peaceiris/actions-gh-pages    </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="comment"># 这里写你自己的仓库名</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">xmmmmmovo/xmmmmmovo.github.io</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="comment"># 这里我改成了与原格式相似格式的commit message</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">'Site updated: $<span class="template-variable">&#123;&#123; github.event.head_commit.timestamp &#125;&#125;</span>'</span></span><br></pre></td></tr></table></figure><p>然后编写<code>gulpfile.js</code>文件用来加载<code>gulp</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>]);</span><br></pre></td></tr></table></figure><p>此时再次提交，等待<code>GithubAction</code>完成之后，便可以查看效果了~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724222548668.png" alt="image-20200724222548668" title="">                </div>                <div class="image-caption">image-20200724222548668</div>            </figure><p>可以看到800多行瞬间变为了16行，是不是很爽~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;差点翻车
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(6)---如何利用六个栈使队列所有操作时间复杂度达到O(1)</title>
    <link href="http://blog.fivezha.cn/2020/07/23/algorithm4-1-threestackqueue/"/>
    <id>http://blog.fivezha.cn/2020/07/23/algorithm4-1-threestackqueue/</id>
    <published>2020-07-23T10:11:16.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>第一次看见的前面就标有极难的题目<a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>本问题其实是有一篇论文作为参考的:</p><div class="row">    <embed src="https://ecommons.cornell.edu/bitstream/handle/1813/6273/80-433.pdf" width="100%" height="550" type="application/pdf"></div><p>这篇论文是以<code>LISP</code>作为实现语言的，我们本次依旧是使用<code>kotlin</code>进行实现。</p><p>当然，这里三个栈需要实现的是<strong>双向队列</strong>的<strong>API</strong>，六个栈实现的是<strong>单向队列</strong>。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>首先，先要说明一个事情——其实栈的实现大多数都是利用<code>顺序表</code>来进行实现的，但是根据算法第四版里面的实现方案，栈其实是利用链表来实现的，虽然不影响后面复杂度分析，但是底层区别首先在这里说清楚。</p><p>然而，队列的实现有着<code>顺序表</code>和<code>链表</code>两种解决方案，用<code>顺序表</code>虽然出队列也依旧是$\mathcal{O}(1)$的效率，但是随着标志位的后移，需要的空间会<strong>线性增长</strong>，但是如果不后移则会变成$\mathcal{O}(N)$的复杂度，所以衍生出了<code>循环队列</code>的中间方案。不过<code>Java</code>源码中，给出了一个非常巧妙的方案，它将<code>Queue</code>和<code>Deque</code>作为一个接口，让其他数据结构实现这个接口，这样无论是<code>链表</code>还是<code>线性表</code>，只要实现了这个接口，就可以作为队列来使用。</p><p>言归正传，回到这个问题，要分析多个栈实现队列，我们首先分析双栈情况，就是左右横跳，用另一个栈作为中间栈，每一次出队列先把所有的元素移动到另一个栈中再出栈，这样出栈时间复杂度$\mathcal{O}(N)$，入栈直接压入原栈，时间复杂度$\mathcal{O}(1)$，但如果我们再利用多个栈进行模拟，就可以把所有操作压缩到$\mathcal{O}(1)$的时间复杂度了。</p><p>根据算法第四版的题目描述，设定的是利用3个栈进行实现，但是这是均摊时间复杂度之后达到的$\mathcal{O}(1)$，不是真$\mathcal{O}(1)$，所以本文章又给出了第二种利用六个栈实现的方案。</p><h2 id="三个栈实现双向队列-虚假的-mathcal-O-1"><a href="#三个栈实现双向队列-虚假的-mathcal-O-1" class="headerlink" title="三个栈实现双向队列(虚假的$\mathcal{O}(1)$)"></a>三个栈实现双向队列(虚假的$\mathcal{O}(1)$)</h2><p>主要实现<code>Deque</code>的几个方法，具体代码解释已经写到注释里面了，所以直接放代码了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用三个栈实现队列</span></span><br><span class="line"><span class="comment"> * 使得所有操作都是O(1)</span></span><br><span class="line"><span class="comment"> *  @Author xmmmmmovo</span></span><br><span class="line"><span class="comment"> *  @Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackDeque</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 左栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示存储的栈位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tmpIsRight = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">            lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; tst.isEmpty()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入左队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushLeft</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        lst.push(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入右队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        rst.push(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出左队列(对应的是入右队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popLeft</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 这里如果左栈有值的话就说明要么左边插入值了</span></span><br><span class="line"><span class="comment">            * 要么右边或者中转栈转移到了左栈，无论哪种情况都是栈顶就是最左</span></span><br><span class="line"><span class="comment">            * 直接出栈就可以</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            lst.isNotEmpty() -&gt; lst.pop()</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里先判断中转栈内容是否是存的右栈的内容</span></span><br><span class="line"><span class="comment">             * 判断如果是右栈的内容，再判断中转栈是否是空的</span></span><br><span class="line"><span class="comment">             * 如果不是就说明右栈已经转移到中转栈中了</span></span><br><span class="line"><span class="comment">             * 相当于移动到了左栈，所以直接弹出中转栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isNotEmpty() &amp;&amp; tmpIsRight -&gt; tst.pop()</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里先判断中转栈内容是否是存的右栈的内容</span></span><br><span class="line"><span class="comment">             * 判断如果不是右栈的内容，再判断中转栈是否是空的</span></span><br><span class="line"><span class="comment">             * 如果不是就说明是左栈移动到了中栈了</span></span><br><span class="line"><span class="comment">             * 相当于移动到了右栈，所以先弹出到左栈再弹出左栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isNotEmpty() &amp;&amp; !tmpIsRight -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (tst.isNotEmpty())</span><br><span class="line">                    lst.push(tst.pop())</span><br><span class="line">                lst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里如果是中转栈是空的并且右栈不为空</span></span><br><span class="line"><span class="comment">             * 就直接转移到中转栈再弹出中转栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isEmpty() &amp;&amp; rst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (rst.isNotEmpty())</span><br><span class="line">                    tst.push(rst.pop())</span><br><span class="line">                tmpIsRight = <span class="literal">true</span> <span class="comment">// 存的是右栈</span></span><br><span class="line">                tst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 所有栈都没有内容，自然就抛出异常</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出右队列(对应的是出左队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popRight</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            rst.isNotEmpty() -&gt; rst.pop()</span><br><span class="line">            tst.isNotEmpty() &amp;&amp; !tmpIsRight -&gt; tst.pop()</span><br><span class="line">            tst.isNotEmpty() &amp;&amp; tmpIsRight -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (!tst.isEmpty())</span><br><span class="line">                    rst.push(tst.pop())</span><br><span class="line">                rst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            tst.isEmpty() &amp;&amp; lst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (lst.isNotEmpty())</span><br><span class="line">                    tst.push(lst.pop())</span><br><span class="line">                tmpIsRight = <span class="literal">false</span> <span class="comment">// 存的是左栈</span></span><br><span class="line">                tst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = lst.size + rst.size + tst.size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">asList</span><span class="params">()</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> list = mutableListOf&lt;T&gt;()</span><br><span class="line">        lst.forEach &#123;</span><br><span class="line">            list.add(it)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果非空那就得判断tmp里面存储的是左还是右了</span></span><br><span class="line">        <span class="comment">// 但是右栈一定要翻转</span></span><br><span class="line">        tst.run &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmpIsRight) <span class="keyword">this</span> <span class="keyword">else</span> reversed()</span><br><span class="line">        &#125;.forEach &#123; list.add(it) &#125;</span><br><span class="line">        rst.reversed().forEach &#123;</span><br><span class="line">            list.add(it)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String = asList().toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sq = StackDeque&lt;String&gt;()</span><br><span class="line">sq.pushLeft(<span class="string">"a"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"b"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"c"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"d"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"e"</span>)</span><br><span class="line">println(sq.popRight())</span><br><span class="line">sq.pushRight(<span class="string">"f"</span>)</span><br><span class="line">sq.pushRight(<span class="string">"g"</span>)</span><br><span class="line">sq.pushRight(<span class="string">"h"</span>)</span><br><span class="line">println(sq.asList())</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200725134752097.png" alt="image-20200725134752097" title="">                </div>                <div class="image-caption">image-20200725134752097</div>            </figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>时间复杂度：</p><p>这里我们主要分析出队列的时间复杂度，因为入队列操作仅是一个入栈操作，时间复杂度：<br>$$<br>\mathcal{O}(1)<br>$$<br>出队列方面，因为两端出队列思想相似，所以仅分析其中一边即可。</p><p>可以看到，首先先说明一下，队列是先进先出的，所以是<code>右进左出</code>，<code>左进右出</code>，选择右进左出分析，可以看到出方向首先尝试从另一边栈进行出栈操作，如果成功就是$\mathcal{O}(1)$，如果失败就继续判断中转栈是否是右栈内容，尝试从中转栈进行出栈，成功依旧是$\mathcal{O}(1)$，当中转栈是左栈或者只有右栈不为空的时候，所需要的时间复杂度才为$\mathcal{O}(N)$，所以考虑N个元素，最差情况是便是<code>左进右出</code>情况，因为此时才会存在移栈，此时仅在第一次出队列时时间复杂度为$\mathcal{O}(N)$。所以均摊时间复杂度下，出队列操作的时间复杂度为：<br>$$<br>\mathcal{O}(N/N)\\<br>= \mathcal{O}(1)<br>$$<br>可以看到是均摊后时间复杂度才达到$\mathcal{O}(1)$，所以是虚假的$\mathcal{O}(1)$。</p><p>空间复杂度：</p><p>虽然这里用到了三个栈，但是所有需求空间加起来是等于添加的总元素的，所以空间是成线性增长的，所以空间复杂度是：<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="六个栈实现单向队列-真正的-mathcal-O-1"><a href="#六个栈实现单向队列-真正的-mathcal-O-1" class="headerlink" title="六个栈实现单向队列(真正的$\mathcal{O}(1)$)"></a>六个栈实现单向队列(真正的$\mathcal{O}(1)$)</h2><p>因为双向会更加绕，所以这里选用单项队列进行讲解，主要方向是<code>右进左出</code>。当然，这里的思想跟上面的有些许不同，三个栈的情况是存在单次操作$\mathcal{O}(N)$的，所以在这里我们将解决这个问题。</p><p>参考博客文章：<a href="https://www.cnblogs.com/ikesnowy/p/7157813.html" target="_blank" rel="noopener">点此跳转</a></p><p>根据上面的思路，我们发现了整个实现的思路就是<strong>均摊</strong>，作为双向队列，如果仅用三个栈的话，中间栈只能存储一个栈，所以我们无论如何都需要有一次进行单个栈所有元素转存的方案，所以无法均摊到单个操作上(如果有四个栈可能可行)，但是本次仅用作单项队列，所以对于出栈来说只是左栈需要转存，所以可以把转存操作均摊到每一个出栈操作上来。</p><p>整体思路上是在入队列的时候便使得左右两个栈尽量相等，然后在出栈的时候再进行判断。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2020. xmmmmmovo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用六个栈实现单向队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 16:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackDequeOpt</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> lst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> rst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左栈替换栈 用于复制时转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tlst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右栈替换栈 用于复制时候入队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> trst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左翻转栈，用于保护左栈原有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> lstrev = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于复制过程中的出栈操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> hlst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否在复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isCopying = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要复制数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> needCopy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:54</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; tlst.isEmpty() &amp;&amp; trst.isEmpty() &amp;&amp; lstrev.isEmpty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入右队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:55</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 左栈大于右栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff &gt; <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                needCopy = <span class="number">0</span></span><br><span class="line">                rst.push(element)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 左右栈相等的时候，因为不知道下一步操作</span></span><br><span class="line"><span class="comment">             * 所以提前准备来进行复制操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff == <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                rst.push(element)</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                hlst = lst.clone()</span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果还在复制直接 入栈到中转栈</span></span><br><span class="line"><span class="comment">             * 因为原栈需要别的用处</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying -&gt; &#123;</span><br><span class="line">                tlst.push(element)</span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出左队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:55</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回队列第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 没有元素时抛出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popLeft</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果没有在copy的时候并且左大于右则直接左栈弹出</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff &gt; <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> lst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果没有在复制并且左栈刚好等于右栈，那么就直接弹出左栈</span></span><br><span class="line"><span class="comment">             * 这样左栈小于右栈，进入复制状态</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff == <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> t = lst.pop()</span><br><span class="line">                hlst = lst.clone()</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">                <span class="keyword">return</span> t</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 因为复制状态下，所有左栈元素会到hlst中所以直接hlst出栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> t = hlst.pop()</span><br><span class="line">                needCopy--</span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">                <span class="keyword">return</span> t</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预览元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:56</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回队列第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 没有元素时抛出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peekLeft</span><span class="params">()</span></span>: T = <span class="keyword">if</span> (isCopying) hlst.peek() <span class="keyword">else</span> lst.peek()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中间操作 这里是脱离了入栈出栈操作的额外操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 20:32</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">oneStep</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 正在copy的时候左右栈都不是空的，这说明需要进行交换了</span></span><br><span class="line"><span class="comment">             * 本次这里右栈进入左栈中转栈</span></span><br><span class="line"><span class="comment">             * 左栈进入左栈反转栈(用于后面直接替换</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isNotEmpty() &amp;&amp; rst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                needCopy++</span><br><span class="line">                tlst.push(rst.pop())</span><br><span class="line">                lstrev.push(lst.pop())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 此状态说明此时左栈已经完成转移，右栈还有剩余</span></span><br><span class="line"><span class="comment">             * 把右栈的元素移动到左栈中转栈中</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                tlst.push(rst.pop())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 此时说明左右栈都是空栈了</span></span><br><span class="line"><span class="comment">             * 但是需要复制的数量大于1</span></span><br><span class="line"><span class="comment">             * 就说明lstrev还有剩余可以转移的元素</span></span><br><span class="line"><span class="comment">             * 直接转移到左中转栈用于后面计算</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; needCopy &gt; <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                needCopy--</span><br><span class="line">                tlst.push(lstrev.pop())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果左右栈都为空， 并且仅有一个需要复制的</span></span><br><span class="line"><span class="comment">             * 那么就直接把最后一个元素并入左栈中转栈</span></span><br><span class="line"><span class="comment">             * 中转栈转为主栈 就完成了一个循环</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; needCopy == <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">false</span></span><br><span class="line">                needCopy--</span><br><span class="line">                tlst.push(lstrev.pop())</span><br><span class="line">                lst = tlst</span><br><span class="line">                rst = trst</span><br><span class="line">                tlst = Stack()</span><br><span class="line">                trst = Stack()</span><br><span class="line">                lstrev = Stack()</span><br><span class="line">                hlst = Stack()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 同上</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; needCopy == <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">false</span></span><br><span class="line">                lst = tlst</span><br><span class="line">                rst = trst</span><br><span class="line">                tlst = Stack()</span><br><span class="line">                trst = Stack()</span><br><span class="line">                lstrev = Stack()</span><br><span class="line">                hlst = Stack()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左栈-右栈大小的差值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 20:33</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sizeDiff: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = lst.size - rst.size</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列总长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 20:33</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = lst.size + rst.size + tlst.size + trst.size + lstrev.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2020. xmmmmmovo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> fundamental</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ds.StackDequeOpt</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions.*</span><br><span class="line"><span class="keyword">import</span> org.junit.platform.commons.logging.LoggerFactory</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDequeOptTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sdo = StackDequeOpt&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(StackDequeOptTest::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">before</span><span class="params">()</span></span> &#123;</span><br><span class="line">            log.info &#123; <span class="string">"StackDequeOptTest start"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AfterAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">after</span><span class="params">()</span></span> &#123;</span><br><span class="line">            log.info &#123; <span class="string">"StackDequeOptTest end"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span> &#123;</span><br><span class="line">        assertEquals(<span class="literal">true</span>, sdo.isEmpty())</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        assertEquals(<span class="literal">false</span>, sdo.isEmpty())</span><br><span class="line">        sdo.popLeft()</span><br><span class="line">        assertEquals(<span class="literal">true</span>, sdo.isEmpty())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">2</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">3</span>)</span><br><span class="line">        assertEquals(<span class="number">3</span>, sdo.popLeft())</span><br><span class="line">        assertEquals(<span class="number">2</span>, sdo.popLeft())</span><br><span class="line">        assertEquals(<span class="number">1</span>, sdo.popLeft())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peekLeft</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">2</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">3</span>)</span><br><span class="line">        assertEquals(<span class="number">3</span>, sdo.peekLeft())</span><br><span class="line">        sdo.popLeft()</span><br><span class="line">        assertEquals(<span class="number">2</span>, sdo.peekLeft())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getSize</span><span class="params">()</span></span> &#123;</span><br><span class="line">        assertEquals(<span class="number">0</span>, sdo.size)</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        assertEquals(<span class="number">1</span>, sdo.size)</span><br><span class="line">        sdo.popLeft()</span><br><span class="line">        assertEquals(<span class="number">0</span>, sdo.size)</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">2</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">3</span>)</span><br><span class="line">        assertEquals(<span class="number">3</span>, sdo.size)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200730001450.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>时间复杂度：</p><p>这里所有复杂度都均摊到了每一个操作上，不会出现某些情况时间复杂度激升的情况，综合时间复杂度：<br>$$<br>\mathcal{O}(1)<br>$$<br>空间复杂度：<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于这个题目也是众说纷纭，有的人说作者已经将题目改成了有限个栈而非三个栈，但是官方网站上却标注着使用三个栈实现，然而因为疫情原因，纸质书依旧在学校里躺着，没法证明，但就从电子版来看，作者有很大可能也没有改题。其实这个题目在<code>stackoverflow</code>上面也有人询问(<a href="https://stackoverflow.com/questions/5538192/how-to-implement-a-queue-with-three-stacks" target="_blank" rel="noopener">链接</a>)，但是大多数人都暗示了使用三个栈是不可能存在真正的$\mathcal{O}(1)$的，当然也有一些抖机灵的解法——比如某些<code>套娃栈</code>的邪道解法，真的是天马行空。不管怎么说，对于一道存在这么个争议的题目，也就仅是能到这里了。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次看见的前面就标有极难的题目
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>解决mathjax公式不换行问题</title>
    <link href="http://blog.fivezha.cn/2020/07/23/mathjax-newline/"/>
    <id>http://blog.fivezha.cn/2020/07/23/mathjax-newline/</id>
    <published>2020-07-23T03:56:03.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>如何解决hexo中mathjax公式不换行<a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在<code>hexo</code>中写公式一般是用<code>LaTex</code>写然后利用<code>Mathjax</code>进行翻译来显示，但是当编写多行公式的时候，比如下面的公式的时候</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723115858343.png" alt="image-20200723115858343" title="">                </div>                <div class="image-caption">image-20200723115858343</div>            </figure><p>本来应该渲染出来如下效果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723141719914.png" alt="image-20200723141719914" title="">                </div>                <div class="image-caption">image-20200723141719914</div>            </figure><p>然而实际渲染出来确实下面这个样子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723115846661.png" alt="image-20200723115846661" title="">                </div>                <div class="image-caption">image-20200723115846661</div>            </figure><p>很让人头大，经过多方面排查，最终发现了问题的根源。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查看编译过后的html文件发现，其中的<code>\\</code>都被转义成了<code>\</code>，这样是无法利用<code>mathjax</code>进行显示换行的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142052704.png" alt="image-20200723142052704" title="">                </div>                <div class="image-caption">image-20200723142052704</div>            </figure><p>所以我们现在要做的很简单，便是把<code>\\</code>转义掉，不让它再被编译即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142327914.png" alt="image-20200723142327914" title="">                </div>                <div class="image-caption">image-20200723142327914</div>            </figure><p>可以看到已经被成功转义</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142423810.png" alt="image-20200723142423810" title="">                </div>                <div class="image-caption">image-20200723142423810</div>            </figure><p>现在公式已经会正常显示了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142544542.png" alt="image-20200723142544542" title="">                </div>                <div class="image-caption">image-20200723142544542</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何解决hexo中mathjax公式不换行
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="latex" scheme="http://blog.fivezha.cn/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>如何利用GitHubAction和GithubPage部署React应用</title>
    <link href="http://blog.fivezha.cn/2020/07/21/github-action-demo/"/>
    <id>http://blog.fivezha.cn/2020/07/21/github-action-demo/</id>
    <published>2020-07-21T07:03:12.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>本文是从物联网工程与技术实践期末文档中抽取出来的，可能格式比较奇怪。<a id="more"></a></p><h2 id="GithubAction"><a href="#GithubAction" class="headerlink" title="GithubAction"></a>GithubAction</h2><p>官网的第一段，便讲明了此功能的用途和作用。</p><blockquote><p>在 GitHub 操作 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</p></blockquote><p>看上去云里雾里，其实就是利用yml进行的自定义脚本操作，用于测试/部署的时候的一些列繁琐重复工作实现全流水线自动化作业的功能。</p><h2 id="GithubPage"><a href="#GithubPage" class="headerlink" title="GithubPage"></a>GithubPage</h2><blockquote><p>您可以为自己、您的组织或项目设置一个基本 GitHub Pages 站点。</p></blockquote><p>白嫖Github服务器用来部署自己的web应用。部署后链接格式：<code>&lt;用户名&gt;.github.io/&lt;仓库名&gt;</code></p><h2 id="开始编写"><a href="#开始编写" class="headerlink" title="开始编写"></a>开始编写</h2><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724215856700.png" alt="图2.13 成功生成密钥" title="">                </div>                <div class="image-caption">图2.13 成功生成密钥</div>            </figure><p>此时会生成.pub的公钥与没有后缀的私钥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721154822499.png" alt="图2.14 成功生成密钥" title="">                </div>                <div class="image-caption">图2.14 成功生成密钥</div>            </figure><p>此时再将公钥私钥部署到GitHub：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721163516689.png" alt="image-20200721163516689" title="">                </div>                <div class="image-caption">image-20200721163516689</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image002.jpg" alt="图2.15 GitHub部署公钥" title="">                </div>                <div class="image-caption">图2.15 GitHub部署公钥</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721163738918.png" alt="image-20200721163738918" title="">                </div>                <div class="image-caption">image-20200721163738918</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image004.jpg" alt="图2.16 GitHub部署私钥" title="">                </div>                <div class="image-caption">图2.16 GitHub部署私钥</div>            </figure><h3 id="编写deploy-yml文件"><a href="#编写deploy-yml文件" class="headerlink" title="编写deploy.yml文件"></a>编写deploy.yml文件</h3><p>首先先在仓库根目录新建<code>.github/workflows</code>文件夹，然后在此文件夹下新建<code>deploy.yml</code>文件</p><p>然后编写此文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">[12.x]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">page</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./build</span></span><br></pre></td></tr></table></figure><p>此时自动化流程部署已完成，每次commit便会自动部署到GitHub服务器中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image001.png" alt="图2.17 GitHub部署流程" title="">                </div>                <div class="image-caption">图2.17 GitHub部署流程</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image003.jpg" alt="图2.18 自动化部署" title="">                </div>                <div class="image-caption">图2.18 自动化部署</div>            </figure><h3 id="添加依赖缓存"><a href="#添加依赖缓存" class="headerlink" title="添加依赖缓存"></a>添加依赖缓存</h3><p>上面的流程如果仔细查看的话，会发现一个问题——每一次commit都会进行一次<code>Install Package</code>的操作，这样不仅浪费了性能，还极大的浪费了时间，每一次都会浪费平均50s左右的时间进行依赖下载，占用了我们的开发时间，所以我在这里对于<code>node_modules</code>做了缓存操作，最终<code>deploy.yml</code>文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">[12.x]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">page</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./build</span></span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721160457703.png" alt="图2.19 未加缓存" title="">                </div>                <div class="image-caption">图2.19 未加缓存</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721160518125.png" alt="图2.20 添加缓存" title="">                </div>                <div class="image-caption">图2.20 添加缓存</div>            </figure><p>可以看到下载依赖的时间从42s变为了9s，可以说是质的飞跃了~</p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><a href="http://2017iotrepo.github.io/IOTBP/" target="_blank" rel="noopener">部署成果查看</a></p><p><a href="https://github.com/xmmmmmovo/IOTBP" target="_blank" rel="noopener">Github仓库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是从物联网工程与技术实践期末文档中抽取出来的，可能格式比较奇怪。
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
      <category term="typescript" scheme="http://blog.fivezha.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>谜之github徽章以及存储介质感悟</title>
    <link href="http://blog.fivezha.cn/2020/07/18/github-arctic/"/>
    <id>http://blog.fivezha.cn/2020/07/18/github-arctic/</id>
    <published>2020-07-18T14:51:41.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>没想到居然这么快就投入使用了<a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;今天点开了许久未打开的GitHub，还没来得及点进动态查看大佬们star的项目之前，自己便先被一则消息吸引了，本着太长不看的原则，还未仔细查看便条件反射般的点了<code>Got it</code>的圆角矩形按钮。之后我的视线便顺着气泡凸起指向的位置寻去，发现了一枚雪花形状新徽章出现在了自己<code>Profile -&gt; Highlights</code>上，让那枚<code>Pro</code>徽章显得不那么孤单。查看了一下详细信息后，阿这，这不是半年前在油管看到过的<strong>GitHub北极代码库</strong>计划吗？！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200718231856879.png" alt="image-20200718231856879" title="">                </div>                <div class="image-caption">image-20200718231856879</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;当时因为新冠的原因宅在家里实在是太闲了，甚至无聊到了在油管搜索GitHub…….</p><p>&nbsp;&nbsp;&nbsp;&nbsp;然后就看到了下面的这个视频👇(Youtube视频，显示可能需要某些手段)</p><iframe width="890" height="500" src="https://www.youtube.com/embed/fzI9FNjXQ0o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>&nbsp;&nbsp;&nbsp;&nbsp;大致讲的就是把代码存一份到北极去留作备份，用以后来信息断层的人们考古用，用以最容易理解的符号表示解密方案（怎么越听越像自举），然后根据解密方案查找信息。wow，awesome！竟然这么快就上线了，不愧是微软时代的GitHub，有钱就是效率高啊。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;虽然没有被采用，但是我最感兴趣的还是其中提到的存储介质——<strong>磁带</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;说到磁带，应该可以说是很多人的“ 童年 ”了，每天晚上洗脚的时候，每天早晨吃饭的时候，本应该在愉快的动画中度过的时间，被硬生生的安排成英语听力时间，每天听着机械一般的无感情的单词朗读和强挤出来的好似使出了自己毕生实力的浮夸演技对话仅是为了那用于糊弄老师的好似无上的圣旨一般的家长签字。有过类似经历的hxd们估计已经时会心一笑了，然而随着时代发展，磁带这一承载着童年回忆的物件如今却基本上在生活消费市场上销声匿迹了，现代课本也已经基本上全面使用光盘作为附载信息的存储介质了。然而，磁带作为一种经历了半个多世纪的存储介质，却从未消亡，沦为收藏家的玩物，反而在更加高精尖的研究机构/企业存储中继续发光发热。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的言论并非胡思乱想的民科行为，而是实打实的存在有公开数据的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719125239292.png" alt="image-20200719125239292" title="">                </div>                <div class="image-caption">image-20200719125239292</div>            </figure><p><a href="http://www.radi.cas.cn/gdxx/tzgg/201805/t20180521_5013864.html" target="_blank" rel="noopener"><strong>中国科学院遥感与数字地球研究所LTO磁带采购公告👆</strong></a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719125412481.png" alt="image-20200719125412481" title="">                </div>                <div class="image-caption">image-20200719125412481</div>            </figure><p><a href="http://big.ac.cn/xwzx/kyjz/201501/t20150128_4306330.html" target="_blank" rel="noopener"><strong>基因组研究所海量磁带库备份系统正式投入运行👆</strong></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，甚至在中国科学院内部，磁带依旧是很重要的存储介质，不仅在国内，国外各大研究机构也是磁带的“大客户”：</p><p><a href="https://www.osti.gov/etdeweb/servlets/purl/20315863" target="_blank" rel="noopener"><strong>国际评价中子核数据库</strong></a>中便多次提到磁带，并且明确提出离线检索中包含磁带数据，可以说，磁带只不过换了一种新的方式存在，并且发展的更加茁壮。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;讲到这里，肯定很多人都会有着大大的疑惑——为什么这些研究机构不使用更加“现代”的存储工具呢？咱们接着往下看。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;猛然提到研究机构有点让人不知所措，不如我们先从一些旧照片中找寻一下线索：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1960s-woman-data-entry-computer-b-5000-vintage-images.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/56ff99412e0fa0da59ac26059574bc1c.jpg" alt="ibm 1960s | Ibm, Old computers" title="">                </div>                <div class="image-caption">ibm 1960s | Ibm, Old computers</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/d7d48f381d510e9d588ea96121280934.jpg" alt="This room-sized IBM computer from the 1960s was awesome in it's" title="">                </div>                <div class="image-caption">This room-sized IBM computer from the 1960s was awesome in it's</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;上面一组照片拍摄于上世纪60年代，可以看到当时的磁带存放并用于大型机房，由专业的操作员进行专业的操作的，没错，1952年，IBM成功发布了计算机业内的第一款磁带机，拉开了磁带发展第一时期的序幕。这一时期延续了35年，主要特征是圆轴磁带的使用，并且需要人工手动操作(装载、卸载和归档)。如果说当时使用磁带是没有选择，那么为什么现代科研机构也还是继续使用磁带呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;别急，接着往下讲，时间跨越到千禧年往后的2002年，此时磁带跨越了第二个时代——近现时代，此时磁带已经不需要那种大型磁带驱动器，不专用于主机，这让便携和低成本产品得以于平民消费市场面世，自然，廉价的存储介质和便于携带的特性很快便掀起了一股风潮……同年，磁带的容量首次超过了最大磁盘的容量，过去，一个磁盘所能容纳的信息量往往需要多盒磁带才能装得下；但是现在情况完全反过来，一盒磁带就可以容纳多个磁盘的数据。磁盘的失败从此便可见一斑。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/49-131215-9-4.jpg" alt="随身携带的磁带播放器" title="">                </div>                <div class="image-caption">随身携带的磁带播放器</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;后面的事情大家也都经历了，计算机硬盘/软盘的出现，改变了家用电脑的存储境况，单位体积的容量大大提升，全面改善了用户体验，这使得家用电脑短暂的磁带存储介质的时代极其短暂。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-afaea03afc6c7d936cf24933f9081a87_r.jpg" alt="苹果Ⅱ 使用磁带作为存储媒介" title="">                </div>                <div class="image-caption">苹果Ⅱ 使用磁带作为存储媒介</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-a05960f41b5058867fc363c6b737c993_r.jpg" alt="苹果Ⅱ 使用磁带作为存储媒介" title="">                </div>                <div class="image-caption">苹果Ⅱ 使用磁带作为存储媒介</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-b8f4941449f99d7e6cff36972e5eabd2_r.jpg" alt="雅达利5200" title="">                </div>                <div class="image-caption">雅达利5200</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;从这里，其实就可以看出民用设备与科研设备选用上的些许差距了，民用设备主要讲究的就是成本和便利，而科研设备主要考虑的则是稳定性和持久性。好了说了这么多，大概历史也说明了，磁带作为一种历史悠久的存储介质，甚至一直到2002年还在发展，但是其单位体积的存储容量使得其无法在民用大放异彩。总结一下，磁带价格低廉，发展没有落后，但是单位体积存储容量小。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;相信已经有人分析出来结果了，在这里我引用一下<strong>CERN</strong>数据存储主管<strong>Alberto Pace</strong>的分析来说明优点</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;相比硬盘，磁带储存拥有4大优势：虽然，磁带的装卸是落后的，即使在自动化装置协助下，在储存库中找出对应的磁带并装入读取装置中最快也需要40秒。但是一旦就绪后，磁带的读取速度却可以达到硬盘的4倍。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;其次是可靠性。磁带也会遇到损毁的情况，如断裂。但断裂后的磁带仍可以重新接上，而且仅会造成数百MB的损失——这对于动辄上TB的专业储存设备来说，实在小事一桩。但对硬盘来说，物理损坏甚至会导致全部数据丢失。CERN的实际数据是，他们每年储存在磁带上的100PB数据（1PB相当于1000TB），每年会损失数百MB；相对的，储存在硬盘上的50PB 数据，这个数字则达数百TB。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;还有就是，对于磁带来说，突然断电也不会损坏记录下来的资料，但对于硬盘来说，这是一件危险的事情。<br>​&nbsp;&nbsp;&nbsp;&nbsp;最后也是最重要的，是磁盘一定程度上更加安全。比如说如果一间公司的数据中心被黑客劫持，他可以在数分钟内让硬盘上50PB数据从此在世上消失，但如果磁带的话，不好意思，可能需要数年。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;不过，磁带储存并非只与那些每秒就碰撞出几个GB的核子对撞实验室有密切联系。调查表明，磁带储存也同样适合中小型企业。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，磁带储存更便宜也更持久。数据在磁带上往往能存放超过30年；硬盘超过5年的话，如果你是公司的IT主管，你就需要考虑将数据转移了。而且磁带目前仍然是储存成本最低的解决方案，目前大概每GB数据在磁带上的成本为4美分，硬盘的话则为10美分。如果考虑到前面所说的寿命问题，差距将会更大。所以，磁带在展示还并没有出现真正消亡的迹象，我们也看到了这个老一代的产品所寻求的生存潜力。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;好了，讲完了一个传奇的历史，其实最让我惊奇的是一个已经淡出生活的物件竟然在另外一个领域还有这不俗的影响，磁带就如同软件语言的<code>C++</code>一样，“老” ，乃于它的历史。而技术却一直在改良。磁带和其他大部分储存媒介一样，磁带的储存密度也一直在攀升（遵循摩尔定律）。其实这种想当然的事情并不少见，比如常年混迹手机圈子的人，总会说一句：</p><blockquote><p>索尼要凉</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;但其实呢，索尼靠着全世界的音乐版权，hi-res，PS系列，相机，电视······如此之多的产业早就让索尼赚的盆满钵满，说不准手机产业就是拿来试水的，到时候，公开宣布退出的时候，大抵又会有人说道：</p><blockquote><p>索尼果然凉了</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，这其实很正常，因为人类就是这样的生物，在<strong>丹尼尔 · 卡尼曼</strong>所著的<strong>《思考，快与慢》</strong>第五章中便描述了这种现象，下面我提出一个问题，再做出分析：</p><blockquote><p>现在我公司有大量的重要数据集静态资源需要长时间稳定使用，仅是用于读取，请问我选取存储介质的时候是选用SSD还是HDD呢？</p></blockquote><p>请作答。</p><p>。</p><p>。</p><p>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;hummmmm，相信有人很快选了HDD了，因为长时间稳定存储还是大量的存储，听说过SSD损耗的估计都早早排除了SSD这个选项了。事实上呢，这里应该选用SSD，因为仅是用于读取，而SSD的读取是不会有损耗的，仅是写入会有损耗（这里可以去看一下SSD原理就明白了），所以这里建议选取快速的SSD更佳。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，你可能会说：“这SSD读取不损耗我也不知道啊”，那你为什么不去百度呢？其实这里是你的“系统1”——经验系统在作怪，你想当然的把你已知的信息带入了当前环境中来，导致你不能存在客观的逻辑判断。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面是原书中的形容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719194910451.png" alt="a" title="">                </div>                <div class="image-caption">a</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719194943595.png" alt="b" title="">                </div>                <div class="image-caption">b</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;几乎可以说，我们大多数时间都不能离开这个系统，它能帮助我们做出大量的简单的判断，比如闹铃响了需要关闹铃，手机没电了需要充电，这些都是由你的“系统1”来做出判断，但当你被这个系统牵着鼻子走，很少觉得自己会有“系统2”判断的时候，便是你需要警觉的时候，因为，我们独立思考的人格，才是我们作为一个活在这个多面的世界中的最好体现。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这便是小弟的一点点延展思考，仅代表自己的观点，欢迎反驳，但是不喜勿喷，和平讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没想到居然这么快就投入使用了
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="思考感悟" scheme="http://blog.fivezha.cn/tags/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(5)---约瑟夫环问题</title>
    <link href="http://blog.fivezha.cn/2020/07/17/algorithm4-Josephus/"/>
    <id>http://blog.fivezha.cn/2020/07/17/algorithm4-Josephus/</id>
    <published>2020-07-17T09:24:23.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>约瑟夫环问题（蛮力，数学解法）<a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>约瑟夫问题是一个很著名的<del>杀人</del>问题：</p><p>约瑟夫问题是个著名的问题：N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。<br>例如：只有三个人，把他们叫做A、B、C，他们围成一圈，从A开始报数，假设报2的人被杀掉。</p><ul><li>首先A开始报数，他报1。侥幸逃过一劫。</li><li>然后轮到B报数，他报2。非常惨，他被杀了</li><li>C接着从1开始报数</li><li>接着轮到A报数，他报2。也被杀死了。</li><li>最终胜利者是C</li></ul><p>可怜，真可怜，数学家真是心狠手辣（雾）</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>这里跟算法第四版的输入有点不一样，这里我们有三个参数：</p><ul><li>总人数</li><li>剩余人数</li><li>间隔人数</li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>最后剩余人的编号合集，由逗号分隔</p><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>顾名思义，求，就是嗯求，靠着大量循环做出来的结果。</p><p>循环删除直到剩余人数到需要的人数，每一次循环都删除间隔人数后的那个，最后剩下来的就是活着的人。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721161113695.png" alt="image-20200721161113695" title="">                </div>                <div class="image-caption">image-20200721161113695</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>这里有两个实现，可以使用双向队列实现，也可以用循环链表实现。</p><h4 id="双向队列实现"><a href="#双向队列实现" class="headerlink" title="双向队列实现"></a>双向队列实现</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向队列暴力求法</span></span><br><span class="line"><span class="comment"> * 就是嗯求</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">queueForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="comment">// 初始化队列</span></span><br><span class="line">    <span class="keyword">val</span> deque = Deque&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">            pushRight(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有到剩余人数就继续循环</span></span><br><span class="line">    <span class="keyword">while</span> (deque.size != remainPeople) &#123;</span><br><span class="line">        <span class="comment">// 跳过间隔人数</span></span><br><span class="line">        <span class="comment">// 这里的跳过为了不影响后面的循环做的是左出右进的方案</span></span><br><span class="line">        <span class="keyword">for</span> (q <span class="keyword">in</span> <span class="number">1</span> until intervalPeople)</span><br><span class="line">            deque.pushRight(deque.popLeft())</span><br><span class="line">        deque.popLeft()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        deque.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">            append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">            <span class="keyword">if</span> (index != deque.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双向队列实现请看<a href="https://blog.fivezha.cn/2020/07/17/algorithm4-1-4/">算法(第四版)笔记(4)—Deque,Buffer,四数之和,三数之和</a></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>时间复杂度：</p><p>这里的<strong>双向队列</strong>采用的是<strong>链表</strong>实现，所以进出队列的时间复杂度都是$\mathcal{O}(1)$，所以仅用计算循环时间复杂度。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R)*I)<br>$$<br>空间复杂度：</p><p>存在中间数据结构双向队列，非常数级空间复杂度。<br>$$<br>\mathcal{O}(N)<br>$$</p><h4 id="循环链表实现"><a href="#循环链表实现" class="headerlink" title="循环链表实现"></a>循环链表实现</h4><p>循环链表循环链表，就是说头尾相连的链表<del>(就像是人体蜈蚣那样)</del></p><p>所以首先来实现循环链表：</p><h5 id="循环链表实现-1"><a href="#循环链表实现-1" class="headerlink" title="循环链表实现"></a>循环链表实现</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环链表</span></span><br><span class="line"><span class="comment"> * 此类仅用于约瑟夫环问题 所以api设计很简单</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableIterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> last: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size</span><br><span class="line">        <span class="keyword">get</span>() = _size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n = first</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = n.next</span><br><span class="line">            <span class="comment">// 快速gc</span></span><br><span class="line">            n.item = <span class="literal">null</span></span><br><span class="line">            n.next = <span class="literal">null</span></span><br><span class="line">            n.prev = <span class="literal">null</span></span><br><span class="line">            n = next</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="literal">null</span></span><br><span class="line">        last = <span class="literal">null</span></span><br><span class="line">        _size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = _size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        linkedLast(element)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> IteratorImpl(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNode</span><span class="params">(index: <span class="type">Int</span>)</span></span>: Node&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> reIndex = index % _size</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (reIndex &lt; (_size shr <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> node = first</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until index) &#123;</span><br><span class="line">                node = node?.next</span><br><span class="line">            &#125;</span><br><span class="line">            node!!</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> node = last</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> _size - <span class="number">2</span> downTo index) &#123;</span><br><span class="line">                node = node?.prev</span><br><span class="line">            &#125;</span><br><span class="line">            node!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedLast</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> l = last</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, l, <span class="literal">null</span>)</span><br><span class="line">        last = nNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l.next = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        first!!.prev = nNode</span><br><span class="line">        nNode.next = first</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlink</span><span class="params">(node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> npre = node.prev</span><br><span class="line">        <span class="keyword">val</span> nnext = node.next</span><br><span class="line">        <span class="keyword">val</span> nitem = node.item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (npre == last &amp;&amp; nnext == first) &#123;</span><br><span class="line">            last = <span class="literal">null</span></span><br><span class="line">            first = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == first)</span><br><span class="line">                first = nnext</span><br><span class="line">            <span class="keyword">if</span> (node == last)</span><br><span class="line">                last = npre</span><br><span class="line">            npre!!.next = nnext</span><br><span class="line">            nnext!!.prev = npre</span><br><span class="line">            node.next = <span class="literal">null</span></span><br><span class="line">            node.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.item = <span class="literal">null</span></span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> nitem!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转字符串方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">when</span> (_size) &#123;</span><br><span class="line">            <span class="number">0</span> -&gt; <span class="keyword">return</span> <span class="string">"[]"</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">                sb.append(<span class="string">"["</span>)</span><br><span class="line">                <span class="keyword">var</span> n = first</span><br><span class="line">                <span class="keyword">while</span> (n != last) &#123;</span><br><span class="line">                    sb.append(<span class="string">"<span class="subst">$&#123;n!!.item&#125;</span>, "</span>)</span><br><span class="line">                    n = n.next</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">"<span class="subst">$&#123;n!!.item&#125;</span>]"</span>).toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">                <span class="keyword">var</span> item: T?,</span><br><span class="line">                <span class="keyword">var</span> prev: Node&lt;T&gt;?,</span><br><span class="line">                <span class="keyword">var</span> next: Node&lt;T&gt;?</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看位置是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkPositionIndex</span><span class="params">(index: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"index: <span class="variable">$index</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorImpl</span></span>(</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> index: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) : MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> lastReturned: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            checkPositionIndex(index, size)</span><br><span class="line">            current = getNode(index)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = current != <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            lastReturned = current</span><br><span class="line">            current = current?.next</span><br><span class="line">            index++</span><br><span class="line">            <span class="keyword">return</span> lastReturned?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            unlink(lastReturned ?: <span class="keyword">throw</span> IllegalStateException())</span><br><span class="line">            index--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主函数实现"><a href="#主函数实现" class="headerlink" title="主函数实现"></a>主函数实现</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">linkedListForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> cl = CircularLinkedList&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">            add(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> iter = cl.iterator()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext() &amp;&amp; cl.size != remainPeople) &#123;</span><br><span class="line">        iter.next()</span><br><span class="line">        cnt++</span><br><span class="line">        <span class="keyword">if</span> (cnt == intervalPeople) &#123;</span><br><span class="line">            iter.remove()</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        cl.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">            append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">            <span class="keyword">if</span> (index != cl.size - <span class="number">1</span>) append(<span class="string">", "</span>) <span class="keyword">else</span> <span class="keyword">return</span><span class="symbol">@apply</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>时间复杂度：</p><p>这里使用的是<strong>循环链表</strong>实现，所以进出队列的时间复杂度都是$\mathcal{O}(1)$，所以仅用计算循环时间复杂度。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R)*I)<br>$$<br>空间复杂度：</p><p>存在中间数据结构循环链表，非常数级空间复杂度。<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="数学解法"><a href="#数学解法" class="headerlink" title="数学解法"></a>数学解法</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>其实数学解法也是应用了一种环的思想，但环思想在此解法中仅是辅助作用，主要的思想是<code>倒推</code>和<code>数学归纳法</code>的应用。</p><p>我们先从<code>(T = 2, R = 1, I = 3)</code>开始看起：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-20ec6f3cc6f423abcd3b6ec1cc06eacf_r.jpg" alt="preview" title="">                </div>                <div class="image-caption">preview</div>            </figure><p>可以看到，</p><p>第一轮删除了<strong>2</strong>，所以第二轮就从<strong>2</strong>后面的一位元素开始。</p><p>因为我们假设整个数组也是环形的，所以数组结尾后面的元素也是开始的元素，如此反复，所以第二轮删除了<strong>0</strong></p><p>同理，第三轮删除了<strong>4</strong></p><p>第四轮删除了<strong>1</strong></p><p>这样，完整的过程我们就模拟完成了，这也是我们前两种方法的主要思路，模拟整个过程，完成计算。但其实，我们并不需要观察整个数组变化的过程，我们只需要观察我们所需要的关键元素就可以了，在这里即是<strong>3</strong>，我们从最后一轮选择出的结果倒推，直到推导出此元素最开始在原数组中的位置即可直接输出原数组中的元素。注意：这里我们是先正向推导了一遍才可以直接看出来数字是<strong>3</strong>的，真实情况下我们是不需要正向推导，而是从结果来反推。</p><p>比如上面的例子，第一轮反推，我们首先抛弃数字的概念，设定最后选出来的数字<strong>x</strong>的下标是<strong>0</strong>。</p><p>为反推到第四轮首先先补上间隔数字，得出<strong>[a, x, | a, x]</strong>，此时<strong>x</strong>下标为<strong>1</strong></p><p>再往上反推，得出<strong>[a , x , b, | a, x]</strong>，所以<strong>x</strong>下标为<strong>1</strong></p><p>再往上，<strong>[x, b, c, a, | x, b]</strong>，所以<strong>x</strong>下标为<strong>0</strong></p><p>再往后就是<strong>[c, a , d, x, b, | c, a]</strong>，所以最终<strong>x</strong>的坐标就是<strong>3</strong></p><p>从此，我们可以发现，每一次倒推的数组组成都是<strong>末尾+新数字+开头</strong>的反向三明治结构，这就导致每一次倒推的数字下标是$(index + I) \mod K$，$K$为反推后数组大小。</p><p>根据数学归纳法，可以推出如下公式：</p><p>设函数$f(K, I)$为$K$个报数时，间隔人数为$I$的时候，所求最终胜出的人的编号。<br>$$<br>f(K, I) = (f(K - 1, I) + I) \mod K<br>$$<br>测试一下<br>$$<br>f(1,3) = 0\\<br>f(2,3) = (f(1, 3) + 3) \mod 2 = 1\\<br>f(3,3) = (f(2, 3) + 3) \mod 3 = 1\\<br>f(4,3) = (f(3, 3) + 3) \mod 4 = 0\\<br>f(5,3) = (f(4, 3) + 3) \mod 5 = 3<br>$$<br>结果正确~</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="数学实现"><a href="#数学实现" class="headerlink" title="数学实现"></a>数学实现</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mathFastSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> k = MutableList(remainPeople) &#123; it &#125;</span><br><span class="line">    <span class="keyword">for</span> (idx <span class="keyword">in</span> remainPeople + <span class="number">1</span>..totalPeople) &#123;</span><br><span class="line">        k.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                          k[index] = (i + intervalPeople) % idx</span><br><span class="line">                         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        k.map &#123; it + <span class="number">1</span> &#125;</span><br><span class="line">        .forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                         append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                         <span class="keyword">if</span> (index != k.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h6><p>时间复杂度：</p><p>这里使用的是<strong>数学方法</strong>实现。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R+1)*R)<br>$$<br>空间复杂度：</p><p>不存在中间数据结构，仅是用到了循环变量，所以是常数级空间复杂度。<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="类实现"><a href="#类实现" class="headerlink" title="类实现"></a>类实现</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithms</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ds.CircularLinkedList</span><br><span class="line"><span class="keyword">import</span> ds.Deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JosephusSolutions</span></span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> totalPeople: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> intervalPeople: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> remainPeople: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        checkArguments()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkArguments</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">                totalPeople &lt;= <span class="number">0</span> || remainPeople &lt;= <span class="number">0</span> || intervalPeople &lt;= <span class="number">0</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"人数不能小于等于0！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalPeople &lt; remainPeople)</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"总人数不能小于剩余人数！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changePeopleNumbers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            totalPeople: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            intervalPeople: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            remainPeople: <span class="type">Int</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPeople = totalPeople</span><br><span class="line">        <span class="keyword">this</span>.intervalPeople = intervalPeople</span><br><span class="line">        <span class="keyword">this</span>.remainPeople = remainPeople</span><br><span class="line">        checkArguments()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向队列暴力求法</span></span><br><span class="line"><span class="comment">     * 就是嗯求</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queueForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="comment">// 初始化队列</span></span><br><span class="line">        <span class="keyword">val</span> deque = Deque&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">                pushRight(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有到剩余人数就继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (deque.size != remainPeople) &#123;</span><br><span class="line">            <span class="comment">// 跳过间隔人数</span></span><br><span class="line">            <span class="comment">// 这里的跳过为了不影响后面的循环做的是左出右进的方案</span></span><br><span class="line">            <span class="keyword">for</span> (q <span class="keyword">in</span> <span class="number">1</span> until intervalPeople)</span><br><span class="line">                deque.pushRight(deque.popLeft())</span><br><span class="line">            deque.popLeft()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            deque.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != deque.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">linkedListForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="keyword">val</span> cl = CircularLinkedList&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">                add(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> iter = cl.iterator()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext() &amp;&amp; cl.size != remainPeople) &#123;</span><br><span class="line">            iter.next()</span><br><span class="line">            cnt++</span><br><span class="line">            <span class="keyword">if</span> (cnt == intervalPeople) &#123;</span><br><span class="line">                iter.remove()</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            cl.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != cl.size - <span class="number">1</span>) append(<span class="string">", "</span>) <span class="keyword">else</span> <span class="keyword">return</span><span class="symbol">@apply</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mathFastSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="keyword">val</span> k = MutableList(remainPeople) &#123; it &#125;</span><br><span class="line">        <span class="keyword">for</span> (idx <span class="keyword">in</span> remainPeople + <span class="number">1</span>..totalPeople) &#123;</span><br><span class="line">            k.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                k[index] = (i + intervalPeople) % idx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            k.map &#123; it + <span class="number">1</span> &#125;.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != k.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;约瑟夫环问题（蛮力，数学解法）
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>线性动画/非线性动画</title>
    <link href="http://blog.fivezha.cn/2020/05/01/linear-anime/"/>
    <id>http://blog.fivezha.cn/2020/05/01/linear-anime/</id>
    <published>2020-05-01T13:34:56.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>起因是因为今天看到b站上有自媒体评测 <code>MIUI12</code> , 说到了动画流畅度那方面弹幕都说线性动画非线性动画什么的, 其实很早之前 <code>MUI</code> 就是全线采用非线性动画了, 但这个线性与非线性又是什么, 有什么区别呢, 我今天就稍微来讲一下.<br>其实这个高中就学习过了, 不过因为最近学习了js, 可以更加明确的展示出来了.<a id="more"></a></p><h2 id="什么是线性动画-非线性动画"><a href="#什么是线性动画-非线性动画" class="headerlink" title="什么是线性动画/非线性动画"></a>什么是线性动画/非线性动画</h2><p>要理解这个, 首先需要理解一个问题: *<em>什么是动画? *</em> </p><h3 id="什么是动画"><a href="#什么是动画" class="headerlink" title="什么是动画?"></a>什么是动画?</h3><p>根据 <strong>维基百科</strong> 所叙述的: </p><blockquote><p><strong>动画</strong>是指由许多<a href="https://zh.wikipedia.org/wiki/%E5%B8%A7" target="_blank" rel="noopener">帧</a>静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因<a href="https://zh.wikipedia.org/wiki/%E8%A7%86%E8%A7%89%E6%AE%8B%E8%B1%A1" target="_blank" rel="noopener">视觉残象</a>产生<a href="https://zh.wikipedia.org/wiki/%E9%8C%AF%E8%A6%BA" target="_blank" rel="noopener">错觉</a>，而误以为画面活动的作品。</p></blockquote><p>可以了解到, 动画, 其实就是很多静止的画面利用视觉残留现象做出来的可动的效果, 所以说如果想要模仿动画的效果, 只需要在1s内对一张图片更替一定的量的次数, 人眼就不会看出是否对这张图片进行了更替, 这, 其实就是 <strong>帧</strong> .<br>同时,并不是所有的 <strong>帧</strong> 都是会更改的, 有些帧完全就是不会变化的, 这就引出了 <strong>关键帧</strong> 的概念, 我们只需要着重关注于关键更改了图象的 <strong>帧</strong> 即可, 并不需要关注其他状态的 <strong>静止帧</strong> .<br>本次编程实践也是只针对于关键帧处理的.</p><h3 id="什么是非线性动画"><a href="#什么是非线性动画" class="headerlink" title="什么是非线性动画"></a>什么是非线性动画</h3><p>在 <code>Maya</code> 用户指南上有这么一句话:</p><blockquote><p><em>在 Maya 中，有两种类型的片段：源片段和常规剪辑。Maya 通过将角色的原始动画曲线保存在源片段中，来保留及保存角色原始动画曲线<em>。请勿使用源片段<em>为角色设置动画。但是，您可以使用源片段（称为_常规片段_）的副本或_实例_以非线性方式为角色设置动画。请参见<a href="https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2015/CHS/Maya/files/GUID-D462A79C-A766-43DD-BB43-5BCDAEC5D8BD-htm.html#GUID-D462A79C-A766-43DD-BB43-5BCDAEC5D8BD__WS17956D7ADBC6E736B6BA507117AE308213-7FF6" target="_blank" rel="noopener">动画片段</a>。</em></em></em></p><p>__非线性动画的基础是，移动、操纵和混合常规片段，从而为角色生成一系列平滑的动作<em>。<br>_</em>&gt; </p></blockquote><p>看上去很高级, 说白了其实就是动画的关键帧停留位置(时段), 也就是说, 非线性的关键帧所停留的并不是处于常见规律中的, 他可能是遵循二次函数, 遵循震荡函数, 总之, 其规律一定不是线性规律(一次函数).</p><h3 id="什么是线性动画"><a href="#什么是线性动画" class="headerlink" title="什么是线性动画"></a>什么是线性动画</h3><p>所以, 线性动画就很容易理解了, 所有关键帧停留位置其实都是处在一条线中的, 其导数永远是常数.</p><h2 id="线性动画-非线性动画有什么用"><a href="#线性动画-非线性动画有什么用" class="headerlink" title="线性动画/非线性动画有什么用"></a>线性动画/非线性动画有什么用</h2><p>那么, 非线性动画又有着什么样的特殊用途呢?<br>很简单的, 应用在手机上, 这会让你的动画感觉更有动感, 更加精致, 不会像是线性动画那样, 一板一眼.<br>比如 <code>IOS</code> 一直都是非线性动画, 给人的感受就非常的丝滑.<br>而早年间的 <code>Android</code> 动画都是线性动画, 给人的感觉就像是机械一般的精密但刻板. </p><h2 id="简单的线性动画-点击图片看动画"><a href="#简单的线性动画-点击图片看动画" class="headerlink" title="简单的线性动画(点击图片看动画):"></a>简单的线性动画(点击图片看动画):</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588320557603-83ac95ee-be22-4c90-8b6d-67819c6439bc.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="ExVwZpd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="线性动画">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/ExVwZpd" target="_blank" rel="noopener">  线性动画</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="简单的非线性-点击图片看动画"><a href="#简单的非线性-点击图片看动画" class="headerlink" title="简单的非线性(点击图片看动画):"></a>简单的非线性(点击图片看动画):</h2><h3 id="圆弧非线性"><a href="#圆弧非线性" class="headerlink" title="圆弧非线性"></a>圆弧非线性</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588320756761-3d5a0233-e333-4fdb-a2a2-38aabfc5d443.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="gOaGmpg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="加速非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/gOaGmpg" target="_blank" rel="noopener">  加速非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="加减速非线性"><a href="#加减速非线性" class="headerlink" title="加减速非线性"></a>加减速非线性</h3><p>先加速再减速, 二次函数</p><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="eYpGvYP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="二次非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/eYpGvYP" target="_blank" rel="noopener">  二次非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="碰撞反弹"><a href="#碰撞反弹" class="headerlink" title="碰撞反弹"></a>碰撞反弹</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588320853246-0a0dc7da-a845-4b4d-9280-6ada3d2c2370.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>如果在开始时有动画效果，比如弹跳 —— 那么它将在最后显示。<br>上图中常规弹跳为红色，easeOut 弹跳为蓝色。</p><ul><li>常规弹跳 —— 物体在底部弹跳，然后突然跳到顶部。</li><li><code>easeOut</code> 变换之后 —— 物体跳到顶部之后，在那里弹跳。</li></ul><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="RwWZdeW" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="碰撞非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/RwWZdeW" target="_blank" rel="noopener">  碰撞非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果理论看不懂, 那大概看例子也能领会了, 有些东西,  不知道是不是我语文太差的缘故, 理论实在是难以形容, 但是当实际例子展示出来了之后, 就会发现, 其实这个还是很容易理解/看出来的嘛.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因是因为今天看到b站上有自媒体评测 &lt;code&gt;MIUI12&lt;/code&gt; , 说到了动画流畅度那方面弹幕都说线性动画非线性动画什么的, 其实很早之前 &lt;code&gt;MUI&lt;/code&gt; 就是全线采用非线性动画了, 但这个线性与非线性又是什么, 有什么区别呢, 我今天就稍微来讲一下.&lt;br&gt;其实这个高中就学习过了, 不过因为最近学习了js, 可以更加明确的展示出来了.
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="animation" scheme="http://blog.fivezha.cn/tags/animation/"/>
    
      <category term="javascript" scheme="http://blog.fivezha.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>docker笔记</title>
    <link href="http://blog.fivezha.cn/2020/04/24/docker-note/"/>
    <id>http://blog.fivezha.cn/2020/04/24/docker-note/</id>
    <published>2020-04-24T13:31:13.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>一点点docker笔记<a id="more"></a></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">    "registry-mirrors": [</span><br><span class="line">      "https://hub-mirror.c.163.com",</span><br><span class="line">      "https://mirror.baidubce.com",</span><br><span class="line">      "https://dockerhub.azk8s.cn"</span><br><span class="line">    ],</span><br><span class="line">  "insecure-registries" : [</span><br><span class="line">    "hub-mirror.c.163.com",</span><br><span class="line">    "mirror.baidubce.com",</span><br><span class="line">    "dockerhub.azk8s.cn"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="利用Dockerfile定制镜像"><a href="#利用Dockerfile定制镜像" class="headerlink" title="利用Dockerfile定制镜像"></a>利用Dockerfile定制镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask部署</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; pip install -r /code/requirements.txt</span></span><br><span class="line"><span class="comment"># 如果太慢了再加上这句 不然镜像站有可能同步不全导致包安装失败</span></span><br><span class="line"><span class="comment"># -i https://pypi.tuna.tsinghua.edu.cn/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn app:app -c gunicorn.conf.py --error-logfile /<span class="built_in">log</span>/gunicorn.log</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 'name' .</span><br><span class="line">docker run -it 'name'</span><br><span class="line">docker run -d 'name'</span><br></pre></td></tr></table></figure><table><thead><tr><th>COPY</th><th>复制文件</th></tr></thead><tbody><tr><td>CMD</td><td>容器启动命令</td></tr><tr><td>ENV</td><td>设置环境变量</td></tr><tr><td>WORKDIR</td><td>指定工作目录</td></tr></tbody></table><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>docker image/container ls <strong>列出所有镜像/容器</strong> </li><li>docker rm … <strong>删除镜像</strong> </li><li>docker attach … 进入容器</li><li>docker ps -a <strong>列出所有的container包括没有运行的</strong> </li></ul><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask redis nginx mysql部署</span></span><br><span class="line">version: <span class="string">'3.6'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    container_name: web</span><br><span class="line">    volumes:</span><br><span class="line">      - ../logs:/log</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=mx/<span class="number">58</span>MFuLJ6^%.q</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/mysql:/docker-<span class="keyword">entrypoint</span><span class="bash">-initdb.d</span></span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:<span class="number">1.17</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">    depends_on:</span><br><span class="line">      - web</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8888</span>:<span class="number">80</span></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:<span class="number">5.0</span>.<span class="number">8</span></span><br><span class="line">    volumes:</span><br><span class="line">    - ./config/redis/redis.conf:/etc/redis/redis.conf</span><br><span class="line">    command: redis-server</span><br><span class="line">    privileged: true</span><br></pre></td></tr></table></figure><ul><li>build <strong>利用Dockerfile编译的目录</strong></li><li>image <strong>镜像</strong> </li><li>volumes <strong>目录映射关系</strong> </li><li>depend_on <strong>依赖于 当依赖启动后本service才能启动</strong> </li><li>port <strong>开放的端口映射</strong> </li><li>environment <strong>环境变量</strong> </li><li>privileged <strong>权限</strong> </li><li>command <strong>自带命令行</strong> </li></ul><h2 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>docker-compose start</li><li>docker-compose stop</li><li>docker-compose top</li></ul><h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><h3 id="列出所有的容器-ID"><a href="#列出所有的容器-ID" class="headerlink" title="列出所有的容器 ID"></a>列出所有的容器 ID</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h3 id="停止所有的容器"><a href="#停止所有的容器" class="headerlink" title="停止所有的容器"></a>停止所有的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="删除所有的镜像"><a href="#删除所有的镜像" class="headerlink" title="删除所有的镜像"></a>删除所有的镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="docker1-3之后的资源清理"><a href="#docker1-3之后的资源清理" class="headerlink" title="docker1.3之后的资源清理"></a>docker1.3之后的资源清理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image prune --force --all # 删除所有不使用的镜像</span><br><span class="line">docker container prune -f # 删除所有停止的容器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一点点docker笔记
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="docker" scheme="http://blog.fivezha.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>opencv中高斯模糊(滤波器)的源码解析(c++版)</title>
    <link href="http://blog.fivezha.cn/2019/02/25/gaussianbulr-analyze/"/>
    <id>http://blog.fivezha.cn/2019/02/25/gaussianbulr-analyze/</id>
    <published>2019-02-25T11:40:25.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p><strong>因为实验室假期需要写一篇关于opencv的作业 所以顺便看了一下opencv(版本3.2.0)里面关于高斯模糊的源码</strong></p><a id="more"></a><h2 id="分析函数接口"><a href="#分析函数接口" class="headerlink" title="分析函数接口"></a>分析函数接口</h2><p>首先，在下用的是vs版本的opencv，是直接编译好给你静态库(.lib)文件的，所以当我按住<code>ctrl</code>寻找<code>GaussianBlur</code>这个函数时 只发现了其在<code>imgproc.hpp</code>里面提供给你的接口。</p><p>大概是下面这个样子的:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/高斯函数接口2.png" alt="高斯模糊函数接口1" title="">                </div>                <div class="image-caption">高斯模糊函数接口1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/高斯函数.png" alt="高斯模糊函数接口2" title="">                </div>                <div class="image-caption">高斯模糊函数接口2</div>            </figure><blockquote><p>该函数将源图像与指定的卷积核进行卷积。并且支持原图像直接进行滤波操作。</p></blockquote><p>可以看到这个函数接口主要由四个部分组成:</p><ol><li><p><code>CV_EXPORTS_W</code><br>继续往上找 可以发现这是一个宏定义</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/%E5%AE%8F%E5%AE%9A%E4%B9%89.png" alt="宏定义1"></p><p>可以发现 这个宏定义是在<strong>编译阶段</strong>将<code>CV_EXPORTS</code>替换为了<code>CV_EXPORTS_W</code>再向上查找 会发现</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/%E5%AE%8F%E5%AE%9A%E4%B9%892.png" alt="宏定义2"></p><p>这里又是一个宏组成的用以定义<code>CV_EXPORTS</code>的宏组，这一段其实就是类似于<code>if else</code>的结构，主要的作用机理便是<strong>适配各类环境(操作系统)</strong> 。从中，我们这里又分成了三个部分进行解析:</p><ol><li><p><code>#if (defined WIN32 || defined _WIN32 || defined WINCE || defined __CYGWIN__) &amp;&amp; defined CVAPI_EXPORTS</code><br>可以看到，这里判断了两个表达式的逻辑与(<code>(defined WIN32 || defined _WIN32 || defined WINCE || defined __CYGWIN__)</code>和<code>defined CVAPI_EXPORTS</code>)</p><ol><li><p>首先，<code>defined</code>的意义在于寻找后面的字段是否已经被宏定义过。</p></li><li><p>其次，观察第一个表达式，发现<code>_WIN32</code> 在之前已经被定义过了，通过查阅<a href="https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=vs-2017" target="_blank" rel="noopener">微软官方宏定义文档</a>发现这个字段作用是基于编译器一个信号，表明是Windows环境下编译及运行的程序。</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/WIN32.png" alt="WIN"></p><p>再查找前后未定义过的字段，继而发现<code>WIN32</code>是<strong>只要包含了 Windows.h，那么 WIN32 常量是肯定定义了</strong>的设定，不能用于判断平台环境。<br>而<code>WINCE</code>便是判断是否为WINCE环境的程序<br><code>__CYGWIN__</code>如果事先有了解过cygwin这个程序的话，这个应该不难看懂，也是用以判断环境的定义，而cywin则是在Windows环境下用以模拟Unix环境的软件(P.S.还是蛮好用的)</p></li><li><p>再次，观察第二个表达式，也是查找字段是否定义过，这个查了一下，发现这个宏定义是存在于opencv.dll这个文件里面的。也就是判断是否已经链接了动态库。</p></li><li><p>这样这一行便很容易懂了，目的便是判断程序环境<strong>是否为Windows</strong>且已经链接opencv.dll的库用以进行下一步操作。</p></li><li><p>再提一句，关于这个操作系统(环境)的判定其实还有很多，这里放一个<a href="https://github.com/qt/qt/blob/4.8/src/corelib/global/qglobal.h" target="_blank" rel="noopener">Qt里面关于系统判定的头文件(147行开始)(版本比较老了 可自行再自己qt里查看)</a></p></li></ol></li><li><p><code># define CV_EXPORTS __declspec(dllexport)</code><br>这一句涉及到的主要是dll函数导入，需要和下面最后三行联合起来看<br><code>#define CV_EXPORTS</code><br>第二行需要联合上面这句一同分析，首先，这个头文件内部写的都是接口，都是作者自己编写留给别人用以调用的，并且从第一点分析的结果来看，这些接口的<strong>实现</strong>都是放在opencv.dll文件中的，而第一行的判断便是判断你是否在最需要隐式调用，如果有，那么直接可以利用隐式调用的方法进行<a href="https://blog.csdn.net/W_Y2010/article/details/80428067" target="_blank" rel="noopener"><strong>函数导出(具体__declspec也有在微软文档里写)</strong></a><br>反之，如果判断事先未进行链接，那么使用的时候必然是显式调用(没错，就是配置环境的时候配置的lib文件链接，那就是显式调用了<a href="https://wenku.baidu.com/view/f7a24236b52acfc789ebc999.html" target="_blank" rel="noopener">参考此篇文章</a>)，既然是显式调用，自然便不需要进行函数导出操作。所以将<code>CV_EXPORTS</code>字段设置为空。</p></li><li><p><code>elif defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 4</code><br><code>define CV_EXPORTS __attribute__((visibility(&quot;default&quot;)))</code><br>这两句涉及的主要有两个功能: 1. <a href="https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html" target="_blank" rel="noopener">判断是否为GCC编译环境</a> 2. <a href="https://blog.csdn.net/mutourenzhang/article/details/47803803" target="_blank" rel="noopener">为全局动态库函数设置非隐藏声明</a><br>对于第一点，类似于分析第一条，可以知道这句的意思便是检查gcc并测试是否高于4.0.0版本(猜测与c++标准有关)</p></li></ol></li><li><p><code>void</code><br>函数返回值，这里返回值为空</p></li><li><p><code>GaussianBlur</code><br>函数名，这里因为是声明所以是跟源码的函数一样，可以很快找到源码定义。</p></li><li><p><code>()</code><br>括号里面的是函数参数根据上面的说明注释，便可解读出这个函数所有参数意义:</p><ul><li><code>src</code>  这是输入图像，这个图像可以拥有任意数量的通道，这些通道是独立处理的，但深度应该是CV_8U，CV_16U，CV_16S，CV_32F或CV_64F。</li><li><code>dst</code> 这是输出图像，大小与类型与src相同。</li><li><code>ksize</code> 这是卷积核的大小参数(是数字desu)。其中ksize.width和ksize.height可以不同，但是它们必须是一个正奇数(或者零)，并且您不用担心卷积核内部参数问题，卷积核会根据sigma来计算。</li><li><code>sigmaX</code> X方向的卷积核标准偏差。</li><li><code>sigmaY</code> Y方向的高斯核标准偏差; 如果sigmaY为零，则设置为等于sigmaX，如果两个sigma都是零，则它们是从ksize.width和ksize.height计算的（详见cv :: getGaussianKernel）; 这些语义未来均有可能修改，建议指定所有ksize，sigmaX和sigmaY。</li><li><code>borderType</code> 像素外推模式，请参阅cv :: BorderTypes</li><li><code>sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur</code>。这里显示了函数的相关函数，是观察源码的重要提示</li></ul></li></ol><p>这样，对于函数接口的解析就算是完成了，从中我们可以得出以下几个结论：</p><ol><li>直接ctrl寻找到底是不能找到原函数代码的。</li><li>找到原函数的同时也需要sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur这一些列函数辅助理解。</li><li>这个函数在cv命名空间中，名称应该为<code>cv::GaussianBlur</code> 。</li></ol><p>所以接下来第一步便是需要在源码中寻找到真正的函数实现。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="理解高斯模糊函数"><a href="#理解高斯模糊函数" class="headerlink" title="理解高斯模糊函数"></a>理解高斯模糊函数</h3><p>高斯模糊函数本质是利用<strong>高斯滤波器</strong>对于给定图像进行<strong>平滑</strong>操作。平滑操作时什么，是减少噪点。噪点的原因又是什么，是单个像素包含的信息过于独立。如何减少噪点，很简单，只需要让每个像素点包含有周围像素的部分信息就行了呗。选用什么方法，最简单的方法便是——卷积(见下图)。利用一个给定的以某种分布函数构建的二维卷积内核，将中心点对准像素点，进行卷积操作，得到的像素点便包含了周围像素的不完全信息，这样子附近的像素点差异性便会越来越小，当整张图像(或选中部分)卷积完成后，每个像素点便不再过于独立，每个便有了附近像素点的信息，这样字图像便不会看上去那么的“扎眼”，会温润平滑许多，这就是高斯模糊的本质了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/卷积.png" alt="卷积操作" title="">                </div>                <div class="image-caption">卷积操作</div>            </figure><center>[相信看图大概大家就能明白卷积是个啥东西了 再结合上面语句应该就差不多了]</center><h3 id="查找函数"><a href="#查找函数" class="headerlink" title="查找函数"></a>查找函数</h3><p>利用grep命令，很容易便能找到这个函数，找到文件并切到这个函数定义，便可以窥见整个函数的全貌了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/关键字查找1.png" alt="查找" title="">                </div>                <div class="image-caption">查找</div>            </figure><p>以下是cv::GaussianBlur函数全貌:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数1.png" alt="func1" title="">                </div>                <div class="image-caption">func1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数2.png" alt="func2" title="">                </div>                <div class="image-caption">func2</div>            </figure><h3 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h3><p>分析这个函数之前，首先先要从内部关联的函数看起。</p><h4 id="CV-INSTRUMENT-REGION"><a href="#CV-INSTRUMENT-REGION" class="headerlink" title="CV_INSTRUMENT_REGION()"></a>CV_INSTRUMENT_REGION()</h4><p>这一行末尾没有分号，这样的类似函数的字符段有很大可能是一个宏定义变量，经查找，在private.hpp文件中有以下定义：</p><blockquote><p> ///// General instrumentation<br> // General OpenCV region instrumentation macro<br> #define CV_INSTRUMENT_REGION() CV_INSTRUMENT_REGION_META(cv::instr::TYPE_GENERAL, cv::instr::IMPL_PLAIN) </p></blockquote><p>经查找，这个字段主要是关于初始化以及边界类型的判断。</p><h4 id="if-borderType-BORDER-CONSTANT-amp-amp-borderType-amp-BORDER-ISOLATED-0"><a href="#if-borderType-BORDER-CONSTANT-amp-amp-borderType-amp-BORDER-ISOLATED-0" class="headerlink" title="if( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != 0 )"></a>if( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != 0 )</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> type = _src.type();</span><br><span class="line">Size <span class="built_in">size</span> = _src.<span class="built_in">size</span>();</span><br><span class="line">_dst.create( <span class="built_in">size</span>, type );</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    根据说明文档中所写的</span></span><br><span class="line"><span class="comment">    BORDER_CONSTANT    = 0, //!&lt; `iiiiii|abcdefgh|iiiiiii`with some specified `i`</span></span><br><span class="line"><span class="comment">    BORDER_REPLICATE   = 1, //!&lt; `aaaaaa|abcdefgh|hhhhhhh`</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT     = 2, //!&lt; `fedcba|abcdefgh|hgfedcb`</span></span><br><span class="line"><span class="comment">    BORDER_WRAP        = 3, //!&lt; `cdefgh|abcdefgh|abcdefg`</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT_101 = 4, //!&lt; `gfedcb|abcdefgh|gfedcba`</span></span><br><span class="line"><span class="comment">    BORDER_TRANSPARENT = 5, //!&lt; `uvwxyz|absdefgh|ijklmno`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    BORDER_REFLECT101  = BORDER_REFLECT_101, //!&lt; same as BORDER_REFLECT_101</span></span><br><span class="line"><span class="comment">    BORDER_DEFAULT     = BORDER_REFLECT_101, //!&lt; same as BORDER_REFLECT_101</span></span><br><span class="line"><span class="comment">    BORDER_ISOLATED    = 16 //!&lt; do not look outside of ROI</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    BORDER_CONSTANT 需要设置borderValue 指定 ' i ' 值（常数）</span></span><br><span class="line"><span class="comment">    BORDER_REPLICATE ，复制边界像素</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT  ，反射复制边界像素   </span></span><br><span class="line"><span class="comment">    BORDER_REFLECT_101，以边界为对称轴反射复制像素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里是说如果边缘扩展不是常数扩展，且在规定图像范围内部，便执行下列操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果输入矩阵是一个行向量，则滤波核的高强制为1</span></span><br><span class="line">    <span class="comment">// 下面同理</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">size</span>.<span class="built_in">height</span> == <span class="number">1</span> )</span><br><span class="line">        ksize.<span class="built_in">height</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">size</span>.<span class="built_in">width</span> == <span class="number">1</span> )</span><br><span class="line">        ksize.<span class="built_in">width</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果核宽跟核高都是一直接复制输出</span></span><br><span class="line"><span class="keyword">if</span>( ksize.<span class="built_in">width</span> == <span class="number">1</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    _src.copyTo(_dst);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CV-OVX-RUN-true-openvx-gaussianBlur-src-dst-ksize-sigma1-sigma2-borderType"><a href="#CV-OVX-RUN-true-openvx-gaussianBlur-src-dst-ksize-sigma1-sigma2-borderType" class="headerlink" title="CV_OVX_RUN(true, openvx_gaussianBlur(_src, _dst, ksize, sigma1, sigma2, borderType))"></a>CV_OVX_RUN(true, openvx_gaussianBlur(_src, _dst, ksize, sigma1, sigma2, borderType))</h4><p>这里很明显是一个被宏定义的字段，通过查找，我们能够找到其定位在<code>modules/core/include/opencv2/core/openvx/ovx_defs.hpp</code>当中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数3.png" alt="func3" title="">                </div>                <div class="image-caption">func3</div>            </figure><p>按每行解析的话就是如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于检测基于OpenVX的实现的实用程序宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_OPENVX</span></span><br><span class="line"><span class="comment">// 如果检测到OPENVX便执行下列语句</span></span><br><span class="line"><span class="comment">// 下面这两句主要作用也是标识</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IVX_HIDE_INFO_WARNINGS <span class="comment">// 隐藏警告信息</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IVX_USE_OPENCV <span class="comment">// 使用opencv的标识</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ivx.hpp"</span> <span class="comment">// 将hpp文件包含进来</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CV_OVX_RUN(condition, func, ...)          \ <span class="comment">// ...会被替换</span></span></span><br><span class="line">    <span class="comment">// 这里为了给外界提供OpenVX使用表示 利用宏定义做成了一个接口</span></span><br><span class="line"><span class="comment">// 而这个接口则是主要为了提供硬件层面加速用的(主要面向对象是嵌入式设计)</span></span><br><span class="line">        <span class="keyword">if</span> (cv::useOpenVX() &amp;&amp; (condition) &amp;&amp; func)   \</span><br><span class="line">        &#123;                                             \</span><br><span class="line">        <span class="comment">// __VA_ARGS__是可变参数宏定义 用以替换上面...的内容</span></span><br><span class="line">            <span class="keyword">return</span> __VA_ARGS__;                       \</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// 否则便执行下面这条</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CV_OVX_RUN(condition, func, ...)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HAVE_OPENVX</span></span></span><br></pre></td></tr></table></figure><p>其中<code>useOpenVX()</code>函数主要是返回一个bool类型的变量用以判断是否使用openVX用以计算。</p><p>所以<code>CV_OVX_RUN()</code>这句话便是对于嵌入式设计进行尝试性的优化操作。</p><h4 id="ifdef至endif部分"><a href="#ifdef至endif部分" class="headerlink" title="ifdef至endif部分"></a>ifdef至endif部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若之前有过HAVE_TEGRA_OPTIMIZATION优化选项的定义，则执行宏体中的tegra优化版函数并返回</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_TEGRA_OPTIMIZATION</span></span><br><span class="line"><span class="comment">// 拷贝到临时变量(暂不知为什么要拷贝到一个临时变量里面去)</span></span><br><span class="line">    Mat src = _src.getMat();</span><br><span class="line">    Mat dst = _dst.getMat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sigma1 == <span class="number">0</span> &amp;&amp; sigma2 == <span class="number">0</span> &amp;&amp; tegra::useTegra() &amp;&amp; tegra::gaussian(src, dst, ksize, borderType))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里也显而易见是尝试tegra优化。</p><p>但是为什么拷贝到临时变量里也可以改变原值，这里需要进一步到Mat变量的运算符重载里面进行参考。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line">Mat&amp; Mat::<span class="keyword">operator</span> = (<span class="keyword">const</span> Mat&amp; m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span> != &amp;m )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m.u )</span><br><span class="line">            CV_XADD(&amp;m.u-&gt;refcount, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">release</span>(); <span class="comment">// 归零初始化</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        归零后进行基本数据共享</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        flags = m.flags;</span><br><span class="line">        <span class="keyword">if</span>( dims &lt;= <span class="number">2</span> &amp;&amp; m.dims &lt;= <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            dims = m.dims;</span><br><span class="line">            rows = m.rows;</span><br><span class="line">            cols = m.cols;</span><br><span class="line">            <span class="built_in">step</span>[<span class="number">0</span>] = m.<span class="built_in">step</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">step</span>[<span class="number">1</span>] = m.<span class="built_in">step</span>[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            copySize(m);</span><br><span class="line">        data = m.data;</span><br><span class="line">        datastart = m.datastart; <span class="comment">// 共享数据头</span></span><br><span class="line">        dataend = m.dataend; <span class="comment">// 共享数据尾</span></span><br><span class="line">        datalimit = m.datalimit;</span><br><span class="line">        allocator = m.allocator; <span class="comment">// 内存共享</span></span><br><span class="line">        u = m.u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 返回当前对象的引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现在<code>=</code>重载的时候仅是进行的浅拷贝操作，意思是只将数据头数据尾进行复制，而所有数据的内存数据都是相通共享的。固仅需要一方变量更改便会联动所有对其进行过浅拷贝的变量变化。</p><h4 id="剩下部分"><a href="#剩下部分" class="headerlink" title="剩下部分"></a>剩下部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里主要是针对opencl(GPU加速)无法使用的情况进行CPU版本计算</span></span><br><span class="line"><span class="comment">这个IPP是一个Intel提供的开源的计算机视觉加速库，可以提供很多算法的Intel专属的多线程优化方案API，这也是为什么下面在opencl的gpu优化代码之后还又添加了利用CPU版本的filter2D的计算方案(因为有部分Intel专属的优化函数，针对APU和老式的Intel CPU(09年之前)无法进行计算，所以只能选取最普通的filter2D计算方案执行)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">官网FAQ(有兴趣可以了解一下): https://software.intel.com/en-us/articles/intel-integrated-performance-primitives-intel-ipp-open-source-computer-vision-library-opencv-faq/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">CV_IPP_RUN(!(ocl::useOpenCL() &amp;&amp; _dst.isUMat()), ipp_GaussianBlur( _src,  _dst,  ksize, sigma1,  sigma2, borderType));</span><br><span class="line"></span><br><span class="line">Mat kx, ky;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里是新建一个高斯卷积内核(后面讲)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">createGaussianKernels(kx, ky, type, ksize, sigma1, sigma2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里是针对ksize = 3 or 5的情况做了opencl优化(A卡N卡均可享受opencl优化qwq)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">CV_OCL_RUN(_dst.isUMat() &amp;&amp; _src.dims() &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">           ((ksize.<span class="built_in">width</span> == <span class="number">3</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">3</span>) ||</span><br><span class="line">            (ksize.<span class="built_in">width</span> == <span class="number">5</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">5</span>)) &amp;&amp;</span><br><span class="line">           (<span class="keyword">size_t</span>)_src.rows() &gt; ky.total() &amp;&amp; (<span class="keyword">size_t</span>)_src.cols() &gt; kx.total(),</span><br><span class="line">           ocl_GaussianBlur_8UC1(_src, _dst, ksize, CV_MAT_DEPTH(type), kx, ky, borderType));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里便是利用filter2D进行操作了</span></span><br><span class="line"><span class="comment">传入Point(-1, -1) 是指内核中的锚点(就是后面的anchor)位置。默认值（-1，-1）表示锚点位于内核中心。</span></span><br><span class="line"><span class="comment">0 则是存储单位 默认是0 后面会通过计算改变并存储</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sepFilter2D(_src, _dst, CV_MAT_DEPTH(type), kx, ky, Point(<span class="number">-1</span>,<span class="number">-1</span>), <span class="number">0</span>, borderType);</span><br></pre></td></tr></table></figure><p>这里在下主要解析<code>createGaussianKernels</code>与<code>sepFilter2D</code>这两个函数，主要是因为无论是<code>openvx_gaussianBlur</code>还是<code>ipp_GaussianBlur</code>以及<code>ocl_GaussianBlur_8UC1</code>都有着大量未知的API，要读懂这些API还需要大量文档查阅，在下在此就先不解析了。</p><p>所以首先先来看一下<code>createGaussianKernels</code>这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个函数仅是用于是创建高斯卷积核</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createGaussianKernels</span><span class="params">( Mat &amp; kx, Mat &amp; ky, <span class="keyword">int</span> type, Size ksize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">double</span> sigma1, <span class="keyword">double</span> sigma2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = CV_MAT_DEPTH(type); <span class="comment">// 根据输入图像类型获得位深度</span></span><br><span class="line">    <span class="keyword">if</span>( sigma2 &lt;= <span class="number">0</span> )</span><br><span class="line">        sigma2 = sigma1; <span class="comment">// 非正则与sigma1相同</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从sigma自动检测内核大小(如果用户没有设置ksize的话)</span></span><br><span class="line">    <span class="comment">// 根据CV_8U来计算 大致接近7*sigma 或者 9*sigma</span></span><br><span class="line">    <span class="comment">// cvRound函数还内联了汇编 在下看不懂了</span></span><br><span class="line">    <span class="comment">// |1 的原因是使宽高为奇数</span></span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">width</span> &lt;= <span class="number">0</span> &amp;&amp; sigma1 &gt; <span class="number">0</span> )</span><br><span class="line">        ksize.<span class="built_in">width</span> = cvRound(sigma1*(depth == CV_8U ? <span class="number">3</span> : <span class="number">4</span>)*<span class="number">2</span> + <span class="number">1</span>)|<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">height</span> &lt;= <span class="number">0</span> &amp;&amp; sigma2 &gt; <span class="number">0</span> )</span><br><span class="line">        ksize.<span class="built_in">height</span> = cvRound(sigma2*(depth == CV_8U ? <span class="number">3</span> : <span class="number">4</span>)*<span class="number">2</span> + <span class="number">1</span>)|<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这句只是为了保证卷积核的宽跟高是正奇数</span></span><br><span class="line">    CV_Assert( ksize.<span class="built_in">width</span> &gt; <span class="number">0</span> &amp;&amp; ksize.<span class="built_in">width</span> % <span class="number">2</span> == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        ksize.<span class="built_in">height</span> &gt; <span class="number">0</span> &amp;&amp; ksize.<span class="built_in">height</span> % <span class="number">2</span> == <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取最大</span></span><br><span class="line">    sigma1 = <span class="built_in">std</span>::<span class="built_in">max</span>( sigma1, <span class="number">0.</span> );</span><br><span class="line">    sigma2 = <span class="built_in">std</span>::<span class="built_in">max</span>( sigma2, <span class="number">0.</span> );</span><br><span class="line"></span><br><span class="line">    kx = getGaussianKernel( ksize.<span class="built_in">width</span>, sigma1, <span class="built_in">std</span>::<span class="built_in">max</span>(depth, CV_32F) );</span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">height</span> == ksize.<span class="built_in">width</span> &amp;&amp; <span class="built_in">std</span>::<span class="built_in">abs</span>(sigma1 - sigma2) &lt; DBL_EPSILON )</span><br><span class="line">        <span class="comment">// 这里 如果判断核高与核宽相等，且sigma相差很小的情况下</span></span><br><span class="line">        <span class="comment">// 便可以直接进行赋值操作，减少了计算量</span></span><br><span class="line">        ky = kx;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ky = getGaussianKernel( ksize.<span class="built_in">height</span>, sigma2, <span class="built_in">std</span>::<span class="built_in">max</span>(depth, CV_32F) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中我们还需要解析<code>getGaussianKernel</code>这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">cv::getGaussianKernel</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> sigma, <span class="keyword">int</span> ktype )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里定义了一个常量用以规定大小</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SMALL_GAUSSIAN_SIZE = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">// 一个4 * 7的矩阵，用于对奇数长度小内核进行优化计算</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> small_gaussian_tab[][SMALL_GAUSSIAN_SIZE] =</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1.f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.25f</span>, <span class="number">0.5f</span>, <span class="number">0.25f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.0625f</span>, <span class="number">0.25f</span>, <span class="number">0.375f</span>, <span class="number">0.25f</span>, <span class="number">0.0625f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.03125f</span>, <span class="number">0.109375f</span>, <span class="number">0.21875f</span>, <span class="number">0.28125f</span>, <span class="number">0.21875f</span>, <span class="number">0.109375f</span>, <span class="number">0.03125f</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里计算滤波系数（数组）</span></span><br><span class="line"><span class="comment">    如果 内核尺寸为奇数 且小于7</span></span><br><span class="line"><span class="comment">    并且sigma小于等于0</span></span><br><span class="line"><span class="comment">    那么滤波系数便是根据上面的small_gaussian_tab决定的</span></span><br><span class="line"><span class="comment">    否则便是0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* fixed_kernel = n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; n &lt;= SMALL_GAUSSIAN_SIZE &amp;&amp; sigma &lt;= <span class="number">0</span> ? small_gaussian_tab[n&gt;&gt;<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    检测数据类型是否为float和double</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    CV_Assert( ktype == CV_32F || ktype == CV_64F );</span><br><span class="line">    <span class="function">Mat <span class="title">kernel</span><span class="params">(n, <span class="number">1</span>, ktype)</span></span>; <span class="comment">// 建立一维向量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义指针指向数据</span></span><br><span class="line">    <span class="keyword">float</span>* cf = kernel.ptr&lt;<span class="keyword">float</span>&gt;();</span><br><span class="line">    <span class="keyword">double</span>* cd = kernel.ptr&lt;<span class="keyword">double</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当sigma小于0时，采用公式得到sigma(只与n有关)，大于0就可以直接使用了。</span></span><br><span class="line">    <span class="keyword">double</span> sigmaX = sigma &gt; <span class="number">0</span> ? sigma : ((n<span class="number">-1</span>)*<span class="number">0.5</span> - <span class="number">1</span>)*<span class="number">0.3</span> + <span class="number">0.8</span>;</span><br><span class="line">    <span class="comment">// 表达式中e指数要用到</span></span><br><span class="line">    <span class="keyword">double</span> scale2X = <span class="number">-0.5</span>/(sigmaX*sigmaX);</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x = i - (n<span class="number">-1</span>)*<span class="number">0.5</span>;</span><br><span class="line">        <span class="comment">// 根据上面计算出来的系数来决定是否重新计算值</span></span><br><span class="line">        <span class="keyword">double</span> t = fixed_kernel ? (<span class="keyword">double</span>)fixed_kernel[i]:<span class="built_in">std</span>::<span class="built_in">exp</span>(scale2X*x*x);</span><br><span class="line">        <span class="comment">//根据精度选择变量</span></span><br><span class="line">        <span class="keyword">if</span>( ktype == CV_32F )</span><br><span class="line">        &#123;</span><br><span class="line">            cf[i] = (<span class="keyword">float</span>)t;</span><br><span class="line">            sum += cf[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cd[i] = t;</span><br><span class="line">            sum += cd[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum = <span class="number">1.</span>/sum; <span class="comment">// 归一化操作，计算需要除的数值</span></span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( ktype == CV_32F )</span><br><span class="line">            cf[i] = (<span class="keyword">float</span>)(cf[i]*sum);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cd[i] *= sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kernel; <span class="comment">// 返回建立好的一维内核</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数的主要目的就是计算出高斯卷积核，这里选用分离计算，就是先计算水平（x）方向的一维卷积核，再根据sigma判断是否重新计算垂直（y）方向的一维卷积内核，这样子分离计算再针对尺寸较大的滤波器也可以有很高的效率，并且分离计算结合多线程也是很好的选择。</p><p>看完高斯内核的建立，我们知道高斯模糊主要利用了分离计算，那最后<code>sepFilter2D</code>函数也很容易看懂了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cv::sepFilter2D</span><span class="params">( InputArray _src, OutputArray _dst, <span class="keyword">int</span> ddepth,</span></span></span><br><span class="line"><span class="function"><span class="params">                      InputArray _kernelX, InputArray _kernelY, Point anchor,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_INSTRUMENT_REGION()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里考虑如果输入函数是UMat形式且维度小于等于2的情况下</span></span><br><span class="line"><span class="comment">优先考虑使用opencl优化过的filter2D计算</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    CV_OCL_RUN(_dst.isUMat() &amp;&amp; _src.dims() &lt;= <span class="number">2</span> </span><br><span class="line">               &amp;&amp; (<span class="keyword">size_t</span>)_src.rows() &gt; _kernelY.total() </span><br><span class="line">               &amp;&amp; (<span class="keyword">size_t</span>)_src.cols() &gt; _kernelX.total(),</span><br><span class="line">               ocl_sepFilter2D(_src, _dst, ddepth, _kernelX, _kernelY, anchor, delta, borderType))</span><br><span class="line"></span><br><span class="line">    Mat src = _src.getMat(), </span><br><span class="line">    kernelX = _kernelX.getMat(), </span><br><span class="line">    kernelY = _kernelY.getMat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ddepth &lt; <span class="number">0</span> )</span><br><span class="line">        ddepth = src.depth();</span><br><span class="line"></span><br><span class="line">    _dst.create( src.<span class="built_in">size</span>(), CV_MAKETYPE(ddepth, src.channels()) );</span><br><span class="line">    Mat dst = _dst.getMat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    找到src的矩阵的矩阵头存入wsz当中，并且将偏移量存入ofs变量中</span></span><br><span class="line"><span class="comment">    这两个变量用于快速读取全部图像</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Point ofs;</span><br><span class="line">    <span class="function">Size <span class="title">wsz</span><span class="params">(src.cols, src.rows)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>( (borderType &amp; BORDER_ISOLATED) == <span class="number">0</span> )</span><br><span class="line">        src.locateROI( wsz, ofs );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    进行预先检测内核是否有误</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    CV_Assert( kernelX.type() == kernelY.type() &amp;&amp;</span><br><span class="line">               (kernelX.cols == <span class="number">1</span> || kernelX.rows == <span class="number">1</span>) &amp;&amp;</span><br><span class="line">               (kernelY.cols == <span class="number">1</span> || kernelY.rows == <span class="number">1</span>) );</span><br><span class="line"></span><br><span class="line">    Mat contKernelX = kernelX.isContinuous() ? kernelX : kernelX.clone();</span><br><span class="line">    Mat contKernelY = kernelY.isContinuous() ? kernelY : kernelY.clone();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    生成一个二维滤波(filter2D)引擎</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Ptr&lt;hal::SepFilter2D&gt; c = hal::SepFilter2D::create(</span><br><span class="line">        src.type(), dst.type(), kernelX.type(),</span><br><span class="line">        contKernelX.data, </span><br><span class="line">        kernelX.cols + kernelX.rows - <span class="number">1</span>,</span><br><span class="line">        contKernelY.data, </span><br><span class="line">        kernelY.cols + kernelY.rows - <span class="number">1</span>,</span><br><span class="line">        anchor.x, </span><br><span class="line">        anchor.y, </span><br><span class="line">        delta, </span><br><span class="line">        borderType &amp; ~BORDER_ISOLATED);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    调用这个引擎</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    c-&gt;apply(src.data, src.<span class="built_in">step</span>, dst.data, dst.<span class="built_in">step</span>, dst.cols, dst.rows, wsz.<span class="built_in">width</span>, wsz.<span class="built_in">height</span>, ofs.x, ofs.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的便是寻找到这个引擎跟调用函数的实现了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Ptr类似于boost::shared_ptr，它是Boost库的一部分</span></span><br><span class="line"><span class="comment">(http://www.boost.org/doc/libs/release/libs/smart_ptr/shared_ptr.htm)</span></span><br><span class="line"><span class="comment">和 std::shared_ptr[C ++ 11标准]（http://en.wikipedia.org/wiki/C++11）</span></span><br><span class="line"><span class="comment">P.S.其实大部分c++11标准都是boost库里面抄过来的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Ptr&lt;SepFilter2D&gt; <span class="title">SepFilter2D::create</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        ReplacementSepFilter * impl = <span class="keyword">new</span> ReplacementSepFilter();</span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;init(stype, dtype, ktype,</span><br><span class="line">                       kernelx_data, kernelx_len,</span><br><span class="line">                       kernely_data, kernely_len,</span><br><span class="line">                       anchor_x, anchor_y, delta, borderType))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Ptr&lt;hal::SepFilter2D&gt;(impl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> impl;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        OcvSepFilter * impl = <span class="keyword">new</span> OcvSepFilter();</span><br><span class="line">        impl-&gt;init(stype, dtype, ktype,</span><br><span class="line">                   kernelx_data, kernelx_len,</span><br><span class="line">                   kernely_data, kernely_len,</span><br><span class="line">                   anchor_x, anchor_y, delta, borderType);</span><br><span class="line">        <span class="keyword">return</span> Ptr&lt;hal::SepFilter2D&gt;(impl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经查找，<code>SepFilter2D</code>是一个结构体，内含有上面的create函数以及两个虚函数(apply与析构函数)，这就说明对于不同的impl有着不同的apply跟init。</p><p>然后，从<code>ReplacementSepFilter</code>的函数开始看起:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个结构体继承自SepFilter2D</span></span><br><span class="line"><span class="comment">具体作用便是使用hal api进行优化加速计算</span></span><br><span class="line"><span class="comment">是一个关于移动和嵌入式设计的库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReplacementSepFilter</span> :</span> <span class="keyword">public</span> hal::SepFilter2D</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里的cvhalFilter2D是一个结构体</span></span><br><span class="line"><span class="comment">其目的就是作为context变量使用(ctx 便是context简写)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    cvhalFilter2D *ctx;</span><br><span class="line">    <span class="keyword">bool</span> isInitialized;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    委托构造函数 委托了两个构造函数进行构造</span></span><br><span class="line"><span class="comment">    一个是定义了context为0，另一个则是定义了isInitialized为否</span></span><br><span class="line"><span class="comment">    关于context(上下文)这个概念可以百度一下</span></span><br><span class="line"><span class="comment">    在下是看的这篇:</span></span><br><span class="line"><span class="comment">    https://wanderinghorse.net/computing/papers/context_types.html</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ReplacementSepFilter() : ctx(<span class="number">0</span>), isInitialized(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    初始化函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这里返回的值根据是否初始化成功赋值的</span></span><br><span class="line">        <span class="keyword">int</span> res = cv_hal_sepFilterInit(&amp;ctx, stype, dtype, ktype,</span><br><span class="line">                                       kernelx_data, kernelx_len,</span><br><span class="line">                                       kernely_data, kernely_len,</span><br><span class="line">                                       anchor_x, anchor_y, delta, borderType);</span><br><span class="line">        <span class="comment">// 这里首先判断res是否与CV_HAL_ERROR_OK(0)相等</span></span><br><span class="line">        <span class="comment">// 如果不相等便将0赋值给isInitialized</span></span><br><span class="line">        <span class="comment">// 否则便是将1赋值</span></span><br><span class="line">        isInitialized = (res == CV_HAL_ERROR_OK);</span><br><span class="line">        <span class="keyword">return</span> isInitialized;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这个是ReplacementSepFilter的执行函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(uchar* src_data, <span class="keyword">size_t</span> src_step, uchar* dst_data, <span class="keyword">size_t</span></span></span></span><br><span class="line"><span class="function"><span class="params">    dst_step, <span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> full_width, <span class="keyword">int</span> full_height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> offset_x, <span class="keyword">int</span> offset_y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isInitialized)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 这里是调用并返回是否成功的结果</span></span><br><span class="line">            <span class="keyword">int</span> res = cv_hal_sepFilter(ctx, src_data, src_step, dst_data,</span><br><span class="line">            dst_step, <span class="built_in">width</span>, <span class="built_in">height</span>, full_width,</span><br><span class="line">            full_height, offset_x, offset_y);</span><br><span class="line">            <span class="comment">// 判断res是否与CV_HAL_ERROR_OK(0)不等</span></span><br><span class="line">            <span class="comment">// 如果不等便无法调用</span></span><br><span class="line">            <span class="comment">// 进入错误选项跳出滤波器</span></span><br><span class="line">            <span class="keyword">if</span> (res != CV_HAL_ERROR_OK)</span><br><span class="line">                CV_Error(Error::StsNotImplemented, <span class="string">"Failed to run HAL sepFilter implementation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里的析构函数在本篇不解析</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ~ReplacementSepFilter()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInitialized)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> res = cv_hal_sepFilterFree(ctx);</span><br><span class="line">            <span class="keyword">if</span> (res != CV_HAL_ERROR_OK)</span><br><span class="line">                CV_Error(Error::StsNotImplemented, <span class="string">"Failed to run HAL sepFilter implementation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在接下来便是<code>OcvSepFilter</code>函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OcvSepFilter</span> :</span> <span class="keyword">public</span> hal::SepFilter2D</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">建立一个滤波引擎 f</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    Ptr&lt;FilterEngine&gt; f;</span><br><span class="line">    <span class="keyword">int</span> src_type;</span><br><span class="line">    <span class="keyword">int</span> dst_type;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        src_type = stype;</span><br><span class="line">        dst_type = dtype;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        分离卷积所以建立了X与Y的卷积内核</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function">Mat <span class="title">kernelX</span><span class="params">(Size(kernelx_len, <span class="number">1</span>), ktype, kernelx_data)</span></span>;</span><br><span class="line">        <span class="function">Mat <span class="title">kernelY</span><span class="params">(Size(kernely_len, <span class="number">1</span>), ktype, kernely_data)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        创建一个创建可分离的线性滤波器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        f = createSeparableLinearFilter( stype, dtype, kernelX, kernelY,</span><br><span class="line">                                         Point(anchor_x, anchor_y),</span><br><span class="line">                                         delta, borderType &amp; ~BORDER_ISOLATED );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(uchar* src_data, <span class="keyword">size_t</span> src_step, uchar* dst_data, <span class="keyword">size_t</span> </span></span></span><br><span class="line"><span class="function"><span class="params">    dst_step, nt <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> full_width, <span class="keyword">int</span> full_height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> offset_x, <span class="keyword">int</span> offset_y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Mat <span class="title">src</span><span class="params">(Size(<span class="built_in">width</span>, <span class="built_in">height</span>), src_type, src_data, src_step)</span></span>;</span><br><span class="line">        <span class="function">Mat <span class="title">dst</span><span class="params">(Size(<span class="built_in">width</span>, <span class="built_in">height</span>), dst_type, dst_data, dst_step)</span></span>;</span><br><span class="line">        <span class="comment">// 因为Ptr将模板设置为了FilterEngine，所以这里apply调用的是FilterEngine的启动函数</span></span><br><span class="line">        f-&gt;apply(src, dst, Size(full_width, full_height), Point(offset_x,</span><br><span class="line">        offset_y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后便是分析<code>createSeparableLinearFilter</code> 这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">可以看到其返回的是是一个引擎，</span></span><br><span class="line"><span class="comment">所以里面肯定是有横向与纵向线性滤波器了(所以才使用可分离的qwq)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">cv::Ptr&lt;cv::FilterEngine&gt; <span class="title">cv::createSeparableLinearFilter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType,</span></span></span><br><span class="line"><span class="function"><span class="params">    InputArray __rowKernel, InputArray __columnKernel,</span></span></span><br><span class="line"><span class="function"><span class="params">    Point _anchor, <span class="keyword">double</span> _delta,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Scalar&amp; _borderValue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    Mat _rowKernel = __rowKernel.getMat(), </span><br><span class="line">    _columnKernel = __columnKernel.getMat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求矩阵的数组类型，数据类型包过通道数，深度，和据类型3种</span></span><br><span class="line">    _srcType = CV_MAT_TYPE(_srcType); </span><br><span class="line">    _dstType = CV_MAT_TYPE(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求深度(输入输出都求)</span></span><br><span class="line">    <span class="keyword">int</span> sdepth = CV_MAT_DEPTH(_srcType),</span><br><span class="line">    ddepth = CV_MAT_DEPTH(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求输入矩阵的通道数并判断输入矩阵是否与输出矩阵通道数相等</span></span><br><span class="line">    <span class="keyword">int</span> cn = CV_MAT_CN(_srcType);</span><br><span class="line">    CV_Assert( cn == CV_MAT_CN(_dstType) );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// rowsize</span></span><br><span class="line">    <span class="keyword">int</span> rsize = _rowKernel.rows + _rowKernel.cols - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// columnsize</span></span><br><span class="line">    <span class="keyword">int</span> csize = _columnKernel.rows + _columnKernel.cols - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果内核锚点是负数，则从中心点开始进行</span></span><br><span class="line">    <span class="keyword">if</span>( _anchor.x &lt; <span class="number">0</span> )</span><br><span class="line">        _anchor.x = rsize/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>( _anchor.y &lt; <span class="number">0</span> )</span><br><span class="line">        _anchor.y = csize/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    获得内核的类型</span></span><br><span class="line"><span class="comment">    大致分为五种：</span></span><br><span class="line"><span class="comment">    KERNEL_GENERAL 通用内核 无任何对称性或其他属性</span></span><br><span class="line"><span class="comment">    KERNEL_SYMMETRICAL kernel[i] == kernel[ksize-i-1] (系数对称)，且锚点位于中心</span></span><br><span class="line"><span class="comment">    KERNEL_ASYMMETRICAL kernel[i] == -kernel[ksize-i-1] (系数相反对称)，锚点同上</span></span><br><span class="line"><span class="comment">    KERNEL_SMOOTH  所有内核元素都是非负的并且总和为1</span></span><br><span class="line"><span class="comment">    KERNEL_INTEGER 所有内核系数都是整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> rtype = getKernelType(_rowKernel,</span><br><span class="line">        _rowKernel.rows == <span class="number">1</span> ? Point(_anchor.x, <span class="number">0</span>) : Point(<span class="number">0</span>, _anchor.x));</span><br><span class="line">    <span class="keyword">int</span> ctype = getKernelType(_columnKernel,</span><br><span class="line">        _columnKernel.rows == <span class="number">1</span> ? Point(_anchor.y, <span class="number">0</span>) : Point(<span class="number">0</span>, _anchor.y));</span><br><span class="line">    Mat rowKernel, columnKernel;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    在CV_32F, sdepth, ddepth中找到最大值并赋值给bdepth</span></span><br><span class="line"><span class="comment">    bdepth: 位深度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> bdepth = <span class="built_in">std</span>::<span class="built_in">max</span>(CV_32F,<span class="built_in">std</span>::<span class="built_in">max</span>(sdepth, ddepth));</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    判断如果</span></span><br><span class="line"><span class="comment">    输入输出图像都是8位无符号型且内核使用平滑对称核</span></span><br><span class="line"><span class="comment">    或者</span></span><br><span class="line"><span class="comment">    输出图像为16位有符号型且使用整形对称或反对称核</span></span><br><span class="line"><span class="comment">    那么就不需要进行任何转换便可以直接使用，</span></span><br><span class="line"><span class="comment">    否则便需要转换，因为输入前后的图像格式是完全相等的</span></span><br><span class="line"><span class="comment">    所以delta就默认是0了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>( sdepth == CV_8U &amp;&amp;</span><br><span class="line">        (</span><br><span class="line">             (rtype == KERNEL_SMOOTH+KERNEL_SYMMETRICAL &amp;&amp;</span><br><span class="line">              ctype == KERNEL_SMOOTH+KERNEL_SYMMETRICAL &amp;&amp;</span><br><span class="line">              ddepth == CV_8U) </span><br><span class="line">             ||</span><br><span class="line">             (</span><br><span class="line">                  (rtype &amp; (KERNEL_SYMMETRICAL+KERNEL_ASYMMETRICAL)) &amp;&amp;</span><br><span class="line">                  (ctype &amp; (KERNEL_SYMMETRICAL+KERNEL_ASYMMETRICAL)) &amp;&amp;</span><br><span class="line">                  (rtype &amp; ctype &amp; KERNEL_INTEGER) &amp;&amp;</span><br><span class="line">                  ddepth == CV_16S</span><br><span class="line">             )</span><br><span class="line">        ) </span><br><span class="line">      )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 重新给bdepth赋值</span></span><br><span class="line">        bdepth = CV_32S;</span><br><span class="line">        <span class="comment">// 此时bits(单位字节)将根据位深度进行计算，如果是8位无符号型则直接赋值为8位</span></span><br><span class="line">        bits = ddepth == CV_8U ? <span class="number">8</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 此时将row内核转换为CV_32S，即32位整数型，并且根据单位字节转换比例因子</span></span><br><span class="line">        <span class="comment">// 如果不加比例因子那么图像会变得很白</span></span><br><span class="line">        <span class="comment">// (可参见这篇提问https://bbs.csdn.net/topics/392411554)</span></span><br><span class="line">        <span class="comment">// 比例因子：将原矩阵的所有元素乘以alpha</span></span><br><span class="line">        _rowKernel.convertTo( rowKernel, CV_32S, <span class="number">1</span> &lt;&lt; bits );</span><br><span class="line">        _columnKernel.convertTo( columnKernel, CV_32S, <span class="number">1</span> &lt;&lt; bits );</span><br><span class="line">        <span class="comment">// 在这里是将单位字节*2</span></span><br><span class="line">        bits *= <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 根据单位字节计算出了存储单位(偏移量)</span></span><br><span class="line">        _delta *= (<span class="number">1</span> &lt;&lt; bits);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        如果不属于上面if里的任何一种情况，那么需要进行转换，用以使数据类型统一</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>( _rowKernel.type() != bdepth )</span><br><span class="line">            _rowKernel.convertTo( rowKernel, bdepth );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rowKernel = _rowKernel;</span><br><span class="line">        <span class="keyword">if</span>( _columnKernel.type() != bdepth )</span><br><span class="line">            _columnKernel.convertTo( columnKernel, bdepth );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            columnKernel = _columnKernel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区存储，用于写入单个色所有素信息(包括多通道与深度信息)</span></span><br><span class="line">    <span class="keyword">int</span> _bufType = CV_MAKETYPE(bdepth, cn);</span><br><span class="line">    <span class="comment">// getLinearRowFilter是根据不同的输入图像类型，输出图像返回不同的线性滤波器</span></span><br><span class="line">    Ptr&lt;BaseRowFilter&gt; _rowFilter = getLinearRowFilter(</span><br><span class="line">        _srcType, _bufType, rowKernel, _anchor.x, rtype);</span><br><span class="line">    Ptr&lt;BaseColumnFilter&gt; _columnFilter = getLinearColumnFilter(</span><br><span class="line">        _bufType, _dstType, columnKernel, _anchor.y, ctype, _delta, bits );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用这两个线性滤波器建立滤波引擎</span></span><br><span class="line">    <span class="keyword">return</span> Ptr&lt;FilterEngine&gt;( <span class="keyword">new</span> FilterEngine(Ptr&lt;BaseFilter&gt;(), _rowFilter,</span><br><span class="line">                                               _columnFilter,_srcType, _dstType,</span><br><span class="line">                                               _bufType, _rowBorderType,</span><br><span class="line">                                               _columnBorderType, _borderValue ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">建立滤波引擎函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">FilterEngine::FilterEngine( <span class="keyword">const</span> Ptr&lt;BaseFilter&gt;&amp; _filter2D,</span><br><span class="line">                            <span class="keyword">const</span> Ptr&lt;BaseRowFilter&gt;&amp; _rowFilter,</span><br><span class="line">                            <span class="keyword">const</span> Ptr&lt;BaseColumnFilter&gt;&amp; _columnFilter,</span><br><span class="line">                            <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType, <span class="keyword">int</span> _bufType,</span><br><span class="line">                            <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span><br><span class="line">                            <span class="keyword">const</span> Scalar&amp; _borderValue )</span><br><span class="line">&#123;</span><br><span class="line">    init(_filter2D, _rowFilter, _columnFilter, _srcType, _dstType, _bufType,</span><br><span class="line">         _rowBorderType, _columnBorderType, _borderValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilterEngine::init</span><span class="params">( <span class="keyword">const</span> Ptr&lt;BaseFilter&gt;&amp; _filter2D,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Ptr&lt;BaseRowFilter&gt;&amp; _rowFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Ptr&lt;BaseColumnFilter&gt;&amp; _columnFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType, <span class="keyword">int</span> _bufType,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Scalar&amp; _borderValue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 依旧是获取类型</span></span><br><span class="line">    _srcType = CV_MAT_TYPE(_srcType);</span><br><span class="line">    _bufType = CV_MAT_TYPE(_bufType);</span><br><span class="line">    _dstType = CV_MAT_TYPE(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 临时变量</span></span><br><span class="line">    srcType = _srcType;</span><br><span class="line">    <span class="comment">// 计算单个像素大小</span></span><br><span class="line">    <span class="comment">// 下面会降解</span></span><br><span class="line">    <span class="keyword">int</span> srcElemSize = (<span class="keyword">int</span>)getElemSize(srcType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面这些全是建立临时变量的</span></span><br><span class="line">    dstType = _dstType;</span><br><span class="line">    bufType = _bufType;</span><br><span class="line"></span><br><span class="line">    filter2D = _filter2D;</span><br><span class="line">    rowFilter = _rowFilter;</span><br><span class="line">    columnFilter = _columnFilter;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里是判断行列边缘类型是否出问题</span></span><br><span class="line">    <span class="keyword">if</span>( _columnBorderType &lt; <span class="number">0</span> )</span><br><span class="line">        _columnBorderType = _rowBorderType;</span><br><span class="line"></span><br><span class="line">    rowBorderType = _rowBorderType;</span><br><span class="line">    columnBorderType = _columnBorderType;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测边界填充类型是否不是wrap(复制元素填充)类型</span></span><br><span class="line">    CV_Assert( columnBorderType != BORDER_WRAP );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测是否为可分离滤波器(因为这个是通用滤波引擎 并不知道是否为可分离滤波器)</span></span><br><span class="line">    <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检测横纵滤波器类型是否相等</span></span><br><span class="line">        CV_Assert( rowFilter &amp;&amp; columnFilter );</span><br><span class="line">        <span class="comment">// 并以横纵滤波器定义内核大小</span></span><br><span class="line">        ksize = Size(rowFilter-&gt;ksize, columnFilter-&gt;ksize);</span><br><span class="line">        <span class="comment">// 锚点也根据滤波器锚点定义</span></span><br><span class="line">        anchor = Point(rowFilter-&gt;anchor, columnFilter-&gt;anchor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果不是  检测缓冲图像类型是否与输入图像类型相等</span></span><br><span class="line">        CV_Assert( bufType == srcType );</span><br><span class="line">        <span class="comment">// 这里跟上面定义差不多，不过是非分离滤波器所以是只有一个(filter2D二维滤波器)</span></span><br><span class="line">        ksize = filter2D-&gt;ksize;</span><br><span class="line">        anchor = filter2D-&gt;anchor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个一看就懂了</span></span><br><span class="line">    CV_Assert( m <span class="number">0</span> &lt;= anchor.x &amp;&amp; anchor.x &lt; ksize.<span class="built_in">width</span> &amp;&amp;</span><br><span class="line">               <span class="number">0</span> &lt;= anchor.y &amp;&amp; anchor.y &lt; ksize.<span class="built_in">height</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据边缘填充类型进行像素计算</span></span><br><span class="line">    borderElemSize = srcElemSize/(CV_MAT_DEPTH(srcType) &gt;= CV_32S ?</span><br><span class="line">                                  <span class="keyword">sizeof</span>(<span class="keyword">int</span>) : <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 这里也很好懂</span></span><br><span class="line">    <span class="keyword">int</span> borderLength = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">width</span> - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 重定义边缘向量大小(这里是所占空间大小)</span></span><br><span class="line">    borderTab.resize(borderLength*borderElemSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    maxWidth = bufStep = <span class="number">0</span>;</span><br><span class="line">    constBorderRow.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果行列边界是常数填充的</span></span><br><span class="line">    <span class="keyword">if</span>( rowBorderType == BORDER_CONSTANT || columnBorderType == BORDER_CONSTANT )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 则计算图像边长</span></span><br><span class="line">        constBorderValue.resize(srcElemSize*borderLength);</span><br><span class="line">        <span class="keyword">int</span> srcType1 = CV_MAKETYPE(CV_MAT_DEPTH(srcType), </span><br><span class="line">                                   MIN(CV_MAT_CN(srcType),</span><br><span class="line">                                   <span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 根据位深度将边界像素值转换成可直接使用的vector变量</span></span><br><span class="line">        scalarToRawData(_borderValue, &amp;constBorderValue[<span class="number">0</span>], srcType1,</span><br><span class="line">                        borderLength*CV_MAT_CN(srcType));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化size</span></span><br><span class="line">    wholeSize = Size(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这时候来看上面提到的<code>getElemSize</code>:</p><blockquote><p>最终这个其实是个宏定义，返回的就是这个宏定义计算的结果：</p><p><strong>(CV_MAT_CN(type) &lt;&lt; ((((sizeof(size_t)/4+1)*16384|0x3a50) &gt;&gt; CV_MAT_DEPTH(type)*2) &amp; 3))</strong></p><p>首先，针对<code>0x3a50</code>这个奇怪的数值，我们先转换为2进制查看规律，通过查找比对，发现其数值与变量类型有着一一对应的关系，然后16384则是1 &lt;&lt; 14的结果(刚好每个对应两位二进制数值)，这个换成二进制则是</p><p>​    16384   = 10 00 00 00 00 00 00</p><p>​    0x3a50 = 11 10 10 01 01 00 00</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/bin.png" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><p>稍微先理解一下，在下先说一下剩下的函数然后一起解析。</p><p>这里先计算无符号整型的长度(在64位系统下是4 desu)然后除以4 再加上1 ，</p><p>就是说这是2 * 16384 | 0x3a50</p><p>就是</p><p>01 00 00 00 00 00 00 00</p><p>00 11 10 10 01 01 00 00</p><hr><p>01 11 10 10 01 01 00 00</p><p>的结果右移2 * 深度，观察上面便会发现最终右移之后便使得最后两位二进制数对应的刚好便是对应变量类型所占的二进制数。</p><p>这样，在跟3(二进制为11)进行 ‘与‘ 操作，便能得到各个变量的对应所占字节数的对数了。</p><p>又因为这里是 通道数 * 2 ^ (所占字节对数)</p><p>所以这样就能够计算的出单个像素点所占用的大小(size)了</p></blockquote><p>因为滤波引擎是一个通用引擎，还可用以驱动其他的滤波器(中值滤波或者其他什么的)所以主要的就只不过是根据一些信息初始化用以后面的操作(就是init函数的意思)。</p><p>返回了滤波引擎之后便是调用了，这个是<code>apply</code>函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilterEngine::apply</span><span class="params">(<span class="keyword">const</span> Mat&amp; src, Mat&amp; dst, <span class="keyword">const</span> Size &amp; wsz, <span class="keyword">const</span> Point &amp; ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_INSTRUMENT_REGION()</span><br><span class="line"></span><br><span class="line">    CV_Assert( src.type() == srcType &amp;&amp; dst.type() == dstType );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回变化y值</span></span><br><span class="line">    <span class="keyword">int</span> y = start(src, wsz, ofs);</span><br><span class="line">    <span class="comment">// 传参的时候切除第一行与最后一列</span></span><br><span class="line">    proceed(src.ptr() + y*src.<span class="built_in">step</span>,</span><br><span class="line">            (<span class="keyword">int</span>)src.<span class="built_in">step</span>,</span><br><span class="line">            endY - startY,</span><br><span class="line">            dst.ptr(),</span><br><span class="line">            (<span class="keyword">int</span>)dst.<span class="built_in">step</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>start</code>便是开始函数后面的<code>proceed</code>则是持续卷积到整个图像的关键，<code>start</code>函数最终返回了起始的Y值，一句一句写太累了，我就不解释了，只贴出<code>start</code>与<code>proceed</code>函数：</p><p>*<em>这两块其实在下分析的很差，很多函数都没看懂，有很大可能错误，建议先跳过，在下以后c++学透了还会回来改的。 *</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">滤波引擎</span></span><br><span class="line"><span class="comment">发动！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::start</span><span class="params">(<span class="keyword">const</span> Mat&amp; src, <span class="keyword">const</span> Size &amp;wsz, <span class="keyword">const</span> Point &amp;ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    start( wsz, src.<span class="built_in">size</span>(), ofs);</span><br><span class="line">    <span class="keyword">return</span> startY - ofs.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::start</span><span class="params">(<span class="keyword">const</span> Size &amp;_wholeSize, <span class="keyword">const</span> Size &amp;sz, <span class="keyword">const</span> Point &amp;ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    wholeSize = _wholeSize;</span><br><span class="line">    <span class="comment">// 根据偏移量与矩阵头设置范围</span></span><br><span class="line">    roi = Rect(ofs, sz);</span><br><span class="line">    <span class="comment">// 依旧是错误检测，很好懂</span></span><br><span class="line">    CV_Assert( roi.x &gt;= <span class="number">0</span> &amp;&amp; roi.y &gt;= <span class="number">0</span> &amp;&amp; roi.<span class="built_in">width</span> &gt;= <span class="number">0</span> &amp;&amp; roi.<span class="built_in">height</span> &gt;= <span class="number">0</span> &amp;&amp; roi.x + roi.<span class="built_in">width</span> &lt;= wholeSize.<span class="built_in">width</span> &amp;&amp; roi.y + roi.<span class="built_in">height</span> &lt;= wholeSize.<span class="built_in">height</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面这些依旧是初始化</span></span><br><span class="line">    <span class="keyword">int</span> esz = (<span class="keyword">int</span>)getElemSize(srcType);</span><br><span class="line">    <span class="keyword">int</span> bufElemSize = (<span class="keyword">int</span>)getElemSize(bufType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定值检查</span></span><br><span class="line">    <span class="keyword">const</span> uchar* constVal = !constBorderValue.empty() ? &amp;constBorderValue[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _maxBufRows = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">height</span> + <span class="number">3</span>, <span class="built_in">std</span>::<span class="built_in">max</span>(anchor.y, ksize.<span class="built_in">height</span>-anchor.y<span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( maxWidth &lt; roi.<span class="built_in">width</span> || _maxBufRows != (<span class="keyword">int</span>)rows.<span class="built_in">size</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">        rows.resize(_maxBufRows);</span><br><span class="line">        maxWidth = <span class="built_in">std</span>::<span class="built_in">max</span>(maxWidth, roi.<span class="built_in">width</span>);</span><br><span class="line">        <span class="keyword">int</span> cn = CV_MAT_CN(srcType);</span><br><span class="line">        srcRow.resize(esz*(maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>( columnBorderType == BORDER_CONSTANT )</span><br><span class="line">        &#123;</span><br><span class="line">            constBorderRow.resize(getElemSize(bufType)</span><br><span class="line">                                  *(maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span> + VEC_ALIGN));</span><br><span class="line">            uchar *dst = alignPtr(&amp;constBorderRow[<span class="number">0</span>], VEC_ALIGN), *tdst;</span><br><span class="line">            <span class="keyword">int</span> n = (<span class="keyword">int</span>)constBorderValue.<span class="built_in">size</span>(), N;</span><br><span class="line">            N = (maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span>)*esz;</span><br><span class="line">            tdst = isSeparable() ? &amp;srcRow[<span class="number">0</span>] : dst;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; N; i += n )</span><br><span class="line">            &#123;</span><br><span class="line">                n = <span class="built_in">std</span>::<span class="built_in">min</span>( n, N - i );</span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    tdst[i+j] = constVal[j];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">                (*rowFilter)(&amp;srcRow[<span class="number">0</span>], dst, maxWidth, cn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxBufStep = bufElemSize*(<span class="keyword">int</span>)alignSize(maxWidth + (!isSeparable() ? ksize.<span class="built_in">width</span> - <span class="number">1</span> : <span class="number">0</span>),VEC_ALIGN);</span><br><span class="line">        ringBuf.resize(maxBufStep*rows.<span class="built_in">size</span>()+VEC_ALIGN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整bufstep，使环形缓冲区的已使用部分在内存中保持紧凑</span></span><br><span class="line">    bufStep = bufElemSize*(<span class="keyword">int</span>)alignSize(roi.<span class="built_in">width</span> + (!isSeparable() ? ksize.<span class="built_in">width</span> - <span class="number">1</span> : <span class="number">0</span>),<span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dx1是检测锚点位置是否与范围边界检测</span></span><br><span class="line">    dx1 = <span class="built_in">std</span>::<span class="built_in">max</span>(anchor.x - roi.x, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 检测内核是否存在偏差</span></span><br><span class="line">    dx2 = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">width</span> - anchor.x - <span class="number">1</span> + roi.x + roi.<span class="built_in">width</span> - wholeSize.<span class="built_in">width</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在偏差则重新计算边界表</span></span><br><span class="line">    <span class="keyword">if</span>( dx1 &gt; <span class="number">0</span> || dx2 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( rowBorderType == BORDER_CONSTANT )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nr = isSeparable() ? <span class="number">1</span> : (<span class="keyword">int</span>)rows.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; nr; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                uchar* dst = isSeparable() ? &amp;srcRow[<span class="number">0</span>] : alignPtr(&amp;ringBuf[<span class="number">0</span>],VEC_ALIGN) + bufStep*i;</span><br><span class="line">                <span class="comment">// 在内存中用后者填充前者，最后一个参数是大小</span></span><br><span class="line">                <span class="built_in">memcpy</span>( dst, constVal, dx1*esz );</span><br><span class="line">                <span class="built_in">memcpy</span>( dst + (roi.<span class="built_in">width</span> + ksize.<span class="built_in">width</span> - <span class="number">1</span> - dx2)*esz, constVal, dx2*esz );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> xofs1 = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.x, anchor.x) - roi.x;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> btab_esz = borderElemSize, wholeWidth = wholeSize.<span class="built_in">width</span>;</span><br><span class="line">            <span class="keyword">int</span>* btab = (<span class="keyword">int</span>*)&amp;borderTab[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; dx1; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p0 = (borderInterpolate(i-dx1, wholeWidth, rowBorderType) +  xofs1)*btab_esz;</span><br><span class="line">                <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; btab_esz; j++ )</span><br><span class="line">                    btab[i*btab_esz + j] = p0 + j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; dx2; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p0 = (borderInterpolate(wholeWidth + i, wholeWidth,  rowBorderType) + xofs1)*btab_esz;</span><br><span class="line">                <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; btab_esz; j++ )</span><br><span class="line">                    btab[(i + dx1)*btab_esz + j] = p0 + j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rowCount = dstY = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这整个函数其实最重要的就是这个</span></span><br><span class="line"><span class="comment">    上面这些都是防止错误进行的调整</span></span><br><span class="line"><span class="comment">    并用以计算下面这个值的</span></span><br><span class="line"><span class="comment">    这个startY是另一方向的偏离值，就是说一个像素到另一个像素的偏离量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    startY = startY0 = <span class="built_in">std</span>::<span class="built_in">max</span>(roi.y - anchor.y, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    endY = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.y + roi.<span class="built_in">height</span> + ksize.<span class="built_in">height</span> - anchor.y - <span class="number">1</span>, wholeSize.<span class="built_in">height</span>);</span><br><span class="line">    <span class="keyword">if</span>( columnFilter )</span><br><span class="line">        columnFilter-&gt;reset();</span><br><span class="line">    <span class="keyword">if</span>( filter2D )</span><br><span class="line">        filter2D-&gt;reset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> startY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::proceed</span><span class="params">( <span class="keyword">const</span> uchar* src, <span class="keyword">int</span> srcstep, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                           uchar* dst, <span class="keyword">int</span> dststep )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_Assert( wholeSize.<span class="built_in">width</span> &gt; <span class="number">0</span> &amp;&amp; wholeSize.<span class="built_in">height</span> &gt; <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *btab = &amp;borderTab[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> esz = (<span class="keyword">int</span>)getElemSize(srcType), btab_esz = borderElemSize;</span><br><span class="line">    uchar** brows = &amp;rows[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> bufRows = (<span class="keyword">int</span>)rows.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> cn = CV_MAT_CN(bufType);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span> = roi.<span class="built_in">width</span>, kwidth = ksize.<span class="built_in">width</span>;</span><br><span class="line">    <span class="keyword">int</span> kheight = ksize.<span class="built_in">height</span>, ay = anchor.y;</span><br><span class="line">    <span class="keyword">int</span> _dx1 = dx1, _dx2 = dx2;</span><br><span class="line">    <span class="keyword">int</span> width1 = roi.<span class="built_in">width</span> + kwidth - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> xofs1 = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.x, anchor.x);</span><br><span class="line">    <span class="keyword">bool</span> isSep = isSeparable();</span><br><span class="line">    <span class="keyword">bool</span> makeBorder = (_dx1 &gt; <span class="number">0</span> || _dx2 &gt; <span class="number">0</span>) &amp;&amp; rowBorderType != BORDER_CONSTANT;</span><br><span class="line">    <span class="keyword">int</span> dy = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    src -= xofs1*esz;</span><br><span class="line">    count = <span class="built_in">std</span>::<span class="built_in">min</span>(count, remainingInputRows());</span><br><span class="line"></span><br><span class="line">    CV_Assert( src &amp;&amp; dst &amp;&amp; count &gt; <span class="number">0</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里就是卷积的主函数了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(;; dst += dststep*i, dy += i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> dcount = bufRows - ay - startY - rowCount + roi.y;</span><br><span class="line">        dcount = dcount &gt; <span class="number">0</span> ? dcount : bufRows - kheight + <span class="number">1</span>;</span><br><span class="line">        dcount = <span class="built_in">std</span>::<span class="built_in">min</span>(dcount, count);</span><br><span class="line">        count -= dcount;</span><br><span class="line">        <span class="keyword">for</span>( ; dcount-- &gt; <span class="number">0</span>; src += srcstep )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> bi = (startY - startY0 + rowCount) % bufRows;</span><br><span class="line">            uchar* brow = alignPtr(&amp;ringBuf[<span class="number">0</span>], VEC_ALIGN) + bi*bufStep;</span><br><span class="line">            uchar* row = isSep ? &amp;srcRow[<span class="number">0</span>] : brow;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( ++rowCount &gt; bufRows )</span><br><span class="line">            &#123;</span><br><span class="line">                --rowCount;</span><br><span class="line">                ++startY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>( row + _dx1*esz, src, (width1 - _dx2 - _dx1)*esz );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( makeBorder )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( btab_esz*(<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int</span>) == esz )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">const</span> <span class="keyword">int</span>* isrc = (<span class="keyword">const</span> <span class="keyword">int</span>*)src;</span><br><span class="line">                    <span class="keyword">int</span>* irow = (<span class="keyword">int</span>*)row;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx1*btab_esz; i++ )</span><br><span class="line">                        irow[i] = isrc[btab[i]];</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx2*btab_esz; i++ )</span><br><span class="line">                        irow[i + (width1 - _dx2)*btab_esz] =  isrc[btab[i+_dx1*btab_esz]];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx1*esz; i++ )</span><br><span class="line">                        row[i] = src[btab[i]];</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx2*esz; i++ )</span><br><span class="line">                        row[i + (width1 - _dx2)*esz] = src[btab[i+_dx1*esz]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( isSep )</span><br><span class="line">                (*rowFilter)(row, brow, <span class="built_in">width</span>, CV_MAT_CN(srcType));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max_i = <span class="built_in">std</span>::<span class="built_in">min</span>(bufRows, roi.<span class="built_in">height</span> - (dstY + dy) + (kheight - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; max_i; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> srcY = borderInterpolate(dstY + dy + i + roi.y - ay, wholeSize.<span class="built_in">height</span>, columnBorderType);</span><br><span class="line">            <span class="keyword">if</span>( srcY &lt; <span class="number">0</span> ) <span class="comment">// can happen only with constant border type</span></span><br><span class="line">                brows[i] = alignPtr(&amp;constBorderRow[<span class="number">0</span>], VEC_ALIGN);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                CV_Assert( srcY &gt;= startY );</span><br><span class="line">                <span class="keyword">if</span>( srcY &gt;= startY + rowCount )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> bi = (srcY - startY0) % bufRows;</span><br><span class="line">                brows[i] = alignPtr(&amp;ringBuf[<span class="number">0</span>], VEC_ALIGN) + bi*bufStep;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( i &lt; kheight )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i -= kheight - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">            (*columnFilter)((<span class="keyword">const</span> uchar**)brows, dst, dststep, i, roi.<span class="built_in">width</span>*cn);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            (*filter2D)((<span class="keyword">const</span> uchar**)brows, dst, dststep, i, roi.<span class="built_in">width</span>, cn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dstY += dy;</span><br><span class="line">    CV_Assert( dstY &lt;= roi.<span class="built_in">height</span> );</span><br><span class="line">    <span class="keyword">return</span> dy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>C++语法复杂度感觉世界上排的了前十</li><li>复杂但却也是少有的可以直接操作内存的语言之一，内联汇编效率不要太高</li><li>用轮子很简单，但是造轮子很难，造出普适性的轮子更难，自己用感觉有些算法还是很容易写的，但是要照顾到大量的其他语法或者平台那就很困难了</li><li>优化不一定是自己算法的优化，还有使用平台的优化，用别人的轮子真的很爽</li><li>大型项目里面代码风格各异，变量命名方案比较混乱，并且简写的比较多，看起来真的头大。。。。</li><li>在下的代码逻辑思维还是太低了，希望能够在毕业的时候看上20000行代码用以提升自己</li><li>相比之下python源码看起来真的舒服死了55555</li></ul><h2 id="借物表"><a href="#借物表" class="headerlink" title="借物表"></a>借物表</h2><ul><li><a href="https://www.cnblogs.com/marvin-notes/p/4482805.html" target="_blank" rel="noopener"><strong>attribute</strong> 机制详解(一)</a></li><li><a href="https://stackoverflow.com/questions/19908922/what-is-this-ifdef-gnuc-about" target="_blank" rel="noopener">What is this #ifdef <strong>GNUC</strong> about?</a></li><li><a href="https://www.cnblogs.com/testlife007/p/8134702.html" target="_blank" rel="noopener">关于VC预定义常量_WIN32，WIN32，_WIN64等预定义宏的介绍（整理、转载）</a></li><li><a href="http://www.voidcn.com/article/p-uolrpafg-bcx.html" target="_blank" rel="noopener">opencv的CV_EXPORT</a></li><li><a href="https://www.cnblogs.com/wangguchangqing/p/6407717.html" target="_blank" rel="noopener">图像处理基础(4)：高斯滤波器详解</a></li><li><a href="https://blog.csdn.net/u012707739/article/details/80170671" target="_blank" rel="noopener">C/C++ 可变参数宏与<strong>VA_ARGS</strong> 宏</a></li><li><a href="https://blog.csdn.net/q2519008/article/details/80934815" target="_blank" rel="noopener">#、##、<strong>VA_ARGS</strong>和##<strong>VA_ARGS</strong>的作用</a></li><li><a href="https://blog.csdn.net/sx1503198/article/details/51764367" target="_blank" rel="noopener">OpenVX嵌入式图像处理（一）硬件平台及软件介绍</a></li><li><a href="https://blog.csdn.net/jia20003/article/details/69802932" target="_blank" rel="noopener">OpenCV3.x中UMat对象介绍与使用</a></li><li><a href="https://blog.csdn.net/qq_26460507/article/details/60154061" target="_blank" rel="noopener">opencv学习之GaussianBlur()源码解析</a></li><li><a href="https://blog.csdn.net/u011028771/article/details/80556457" target="_blank" rel="noopener">手撕OpenCV源码之GaussianBlur</a></li><li><a href="https://www.xuebuyuan.com/1054789.html" target="_blank" rel="noopener">OpenCV的一些宏</a></li></ul><p><strong>感谢以上各位大佬给在下提供的各类知识</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;因为实验室假期需要写一篇关于opencv的作业 所以顺便看了一下opencv(版本3.2.0)里面关于高斯模糊的源码&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="cv" scheme="http://blog.fivezha.cn/tags/cv/"/>
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>nazo.io攻略(完)</title>
    <link href="http://blog.fivezha.cn/2018/10/15/nazo-io-answer/"/>
    <id>http://blog.fivezha.cn/2018/10/15/nazo-io-answer/</id>
    <published>2018-10-15T11:22:26.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p>有点像小学玩过的某个解密游戏的游戏  偶然又发现了这种类型的游戏 鄙人玩了2个小时 写了点攻略 希望能够帮到你</p><a id="more"></a><h3 id="顺便附上网址-其实就是nazo-io"><a href="#顺便附上网址-其实就是nazo-io" class="headerlink" title="顺便附上网址(其实就是nazo.io)"></a><a href="https://nazo.io/" target="_blank" rel="noopener">顺便附上网址(其实就是nazo.io)</a></h3><h3 id="1-欢迎"><a href="#1-欢迎" class="headerlink" title="1.欢迎"></a>1.欢迎</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/006ZO6XQgy1fw949qhqf5j30ih0dk0sv.png" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><p>直接输入:<strong>welcome</strong>即可</p><h3 id="2-规则"><a href="#2-规则" class="headerlink" title="2.规则"></a>2.规则</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015182729.png" alt="2" title="">                </div>                <div class="image-caption">2</div>            </figure><p>点击：key即可出现答案——<strong>gotcha</strong></p><h3 id="3-从右往左念"><a href="#3-从右往左念" class="headerlink" title="3.从右往左念"></a>3.从右往左念</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM%E6%88%AA%E5%9B%BE20181015182822.png" alt="3" title="">                </div>                <div class="image-caption">3</div>            </figure><p>顾名思义，从右往左念：key is where</p><p>答案便是：<strong>where</strong></p><h3 id="4-完形填空"><a href="#4-完形填空" class="headerlink" title="4.完形填空"></a>4.完形填空</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM%E6%88%AA%E5%9B%BE20181015182944.png" alt="4" title="">                </div>                <div class="image-caption">4</div>            </figure><p><strong>这关便是教你使用搜索引擎搜索答案（其实大多数时间搜不到。。。。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM%E6%88%AA%E5%9B%BE20181015183037.png" alt="百度" title="">                </div>                <div class="image-caption">百度</div>            </figure><p>答案便是：<strong>survival</strong></p><h3 id="5-Morse"><a href="#5-Morse" class="headerlink" title="5.Morse"></a>5.Morse</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183131.png" alt="5" title="">                </div>                <div class="image-caption">5</div>            </figure><p>摩尔斯电码，没什么好说的</p><p>答案：<strong>sos</strong></p><h3 id="6-Base64"><a href="#6-Base64" class="headerlink" title="6.Base64"></a>6.Base64</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183202.png" alt="6" title="">                </div>                <div class="image-caption">6</div>            </figure><p>就是base64解码 随便找个网站就行了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183234.png" alt="解密" title="">                </div>                <div class="image-caption">解密</div>            </figure><p>答案：<strong>1029174037</strong></p><h3 id="6-Base64-新"><a href="#6-Base64-新" class="headerlink" title="6.Base64(新)"></a>6.Base64(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712000900198.png" alt="image-20200712000900198" title="">                </div>                <div class="image-caption">image-20200712000900198</div>            </figure><p>答案：<strong>bytealigned</strong></p><h3 id="7-OICQ"><a href="#7-OICQ" class="headerlink" title="7.OICQ"></a>7.OICQ</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183500.png" alt="7" title="">                </div>                <div class="image-caption">7</div>            </figure><p>这个标题是qq的前身名称</p><p>这里有个提示：你<a href="https://nazo.io/6" target="_blank" rel="noopener">刚</a>输入了什么？/以及联系作者</p><p>很清楚 ，上一题的答案就是作者的QQ号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183441.png" alt="qq搜索" title="">                </div>                <div class="image-caption">qq搜索</div>            </figure><p>看 果不其然</p><p>答案：<strong>macintosh</strong></p><h3 id="7-RCNB-app-新"><a href="#7-RCNB-app-新" class="headerlink" title="7.RCNB.app(新)"></a>7.RCNB.app(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001003985.png" alt="image-20200712001003985" title="">                </div>                <div class="image-caption">image-20200712001003985</div>            </figure><p>编码随便百度一下就出来了</p><p>答案：<strong>unprintable</strong></p><h3 id="8-IDNs"><a href="#8-IDNs" class="headerlink" title="8.IDNs"></a>8.IDNs</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184152.png" alt="8" title="">                </div>                <div class="image-caption">8</div>            </figure><p>这个题也是那种没有知识前提就不会的那种</p><p>正巧前两天刚买域名的时候看见了中文域名，所以这题小case😄</p><p>直接访问：错的是.世界便可知道答案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184141.png" alt="直接访问" title="">                </div>                <div class="image-caption">直接访问</div>            </figure><p>答案：<strong>saionjisekai</strong></p><h3 id="9-角度"><a href="#9-角度" class="headerlink" title="9.角度"></a>9.角度</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184329.png" alt="9" title="">                </div>                <div class="image-caption">9</div>            </figure><p>这张图片是斜角图片，就是字都向内偏向了45°</p><p>用画图打开拉长一下就知道答案了：<strong>pineapple</strong></p><h3 id="10-回到上世纪"><a href="#10-回到上世纪" class="headerlink" title="10.回到上世纪"></a>10.回到上世纪</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184420.png" alt="10" title="">                </div>                <div class="image-caption">10</div>            </figure><p>典型的百度搜图题目</p><p>答案：<strong>mouse</strong></p><h3 id="11-Unicode"><a href="#11-Unicode" class="headerlink" title="11.Unicode"></a>11.Unicode</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184457.png" alt="11" title="">                </div>                <div class="image-caption">11</div>            </figure><p>可能部分手机字库支持不全看不了</p><p>答案：<strong>neweroslesstofu</strong></p><h3 id="11-Unicode-新"><a href="#11-Unicode-新" class="headerlink" title="11.Unicode(新)"></a>11.Unicode(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001517859.png" alt="image-20200712001517859" title="">                </div>                <div class="image-caption">image-20200712001517859</div>            </figure><p>答案：<strong>oopscode</strong></p><h3 id="12-1A2B"><a href="#12-1A2B" class="headerlink" title="12.1A2B"></a>12.1A2B</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184548.png" alt="12" title="">                </div>                <div class="image-caption">12</div>            </figure><p>小时候的猜数题目</p><p>大意是：有一个未知数需要猜测</p><p>下面0A0B代表不仅数字没猜对位置也没猜对</p><p>0A2B代表数字猜对了两个但是位置没猜对</p><p>3A0B代表着数字跟位置都猜对的有三位有一位数字跟位置都没猜对</p><p>答案：<strong>9506</strong></p><h3 id="13-虚无"><a href="#13-虚无" class="headerlink" title="13.虚无"></a>13.虚无</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185038.png" alt="13" title="">                </div>                <div class="image-caption">13</div>            </figure><p>中间有图片，新窗口打开便可知</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185105.png" alt="新页面打开" title="">                </div>                <div class="image-caption">新页面打开</div>            </figure><p>答案：<strong>thealpha</strong></p><h3 id="14-我爱记歌词"><a href="#14-我爱记歌词" class="headerlink" title="14.我爱记歌词"></a>14.我爱记歌词</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185653.png" alt="14" title="">                </div>                <div class="image-caption">14</div>            </figure><p>hint是里的歌词是种子，歌名又是小苹果，图片名字叫apple</p><p>不用多说了吧 ——图种</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185635.png" alt="图种" title="">                </div>                <div class="image-caption">图种</div>            </figure><p>答案：<strong>greendam</strong></p><h3 id="15-声音的轨迹"><a href="#15-声音的轨迹" class="headerlink" title="15.声音的轨迹"></a>15.声音的轨迹</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015190030.png" alt="15" title="">                </div>                <div class="image-caption">15</div>            </figure><p>音波解析 随便找个能看音波的软件就行了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015190012.png" alt="妹子挺好看" title="">                </div>                <div class="image-caption">妹子挺好看</div>            </figure><p>答案：<strong>koenokiseki</strong></p><h3 id="16-虚掩"><a href="#16-虚掩" class="headerlink" title="16.虚掩"></a>16.虚掩</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015204059.png" alt="16" title="">                </div>                <div class="image-caption">16</div>            </figure><p>打开隐藏图片之后发现是多层结构</p><p>直接将遮罩层大小改为0</p><p>key显现</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015204038.png" alt="key" title="">                </div>                <div class="image-caption">key</div>            </figure><p>密码：<strong>secretvg</strong></p><h3 id="17-虚空"><a href="#17-虚空" class="headerlink" title="17.虚空"></a>17.虚空</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015212322.png" alt="17" title="">                </div>                <div class="image-caption">17</div>            </figure><p>空格切换 这里的字符由全角跟半角的空格组成 替换任意一种便可知道答案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM图片20181015213335.png" alt="答案" title="">                </div>                <div class="image-caption">答案</div>            </figure><p>答案：<strong>entropy</strong></p><h3 id="18-Twitter"><a href="#18-Twitter" class="headerlink" title="18.Twitter"></a>18.Twitter</h3><p>科学上网</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015212402.png" alt="18" title="">                </div>                <div class="image-caption">18</div>            </figure><p>打开发现居然作者是位打ctf的大佬</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015212619.png" alt="作者推特" title="">                </div>                <div class="image-caption">作者推特</div>            </figure><p>答案：<strong>th4nky0u</strong></p><h3 id="18-Twitter-新"><a href="#18-Twitter-新" class="headerlink" title="18.Twitter(新)"></a>18.Twitter(新)</h3><p>访问一下url就可以知道了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001718333.png" alt="image-20200712001718333" title="">                </div>                <div class="image-caption">image-20200712001718333</div>            </figure><p>答案：<strong>shortweet</strong></p><h3 id="19-最后"><a href="#19-最后" class="headerlink" title="19.最后"></a>19.最后</h3><p>感谢语</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015213733.png" alt="hit3" title="">                </div>                <div class="image-caption">hit3</div>            </figure><p>我是<strong>20</strong>位通关的(正儿八经的第20位 ←.hit1)，<strong>你呢？</strong></p><h3 id="20-强迫症与总结"><a href="#20-强迫症与总结" class="headerlink" title="20.强迫症与总结"></a>20.强迫症与总结</h3><p>(↑.hit2)</p><p>花了我2个多小时的游戏终于完美落下了帷幕</p><p>期初我只是想分享一下在群里，没想到大家兴致如此之高，以至于最后都为找到一个个key而兴致高涨😄</p><p>这种游戏果然需要跟大家一起玩才有意思嘛</p><p>总之，游戏体验良好，5⭐️ 好评！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有点像小学玩过的某个解密游戏的游戏  偶然又发现了这种类型的游戏 鄙人玩了2个小时 写了点攻略 希望能够帮到你&lt;/p&gt;
    
    </summary>
    
    
      <category term="games" scheme="http://blog.fivezha.cn/categories/games/"/>
    
    
      <category term="game" scheme="http://blog.fivezha.cn/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>git超简单教程</title>
    <link href="http://blog.fivezha.cn/2018/04/20/git-guide/"/>
    <id>http://blog.fivezha.cn/2018/04/20/git-guide/</id>
    <published>2018-04-20T12:34:09.000Z</published>
    <updated>2021-07-03T04:20:08.312Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>git的超简单用法（以test-repository为例）</em></strong></p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="1-初始化git的email与name"><a href="#1-初始化git的email与name" class="headerlink" title="1.初始化git的email与name"></a>1.初始化git的email与name</h3><p>首先先打开git(这个随便在哪个文件夹都可以)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"这里写你的名字"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"这里写你的邮箱"</span></span></span><br></pre></td></tr></table></figure><h3 id="2-设置ssh连接"><a href="#2-设置ssh连接" class="headerlink" title="2.设置ssh连接"></a>2.设置ssh连接</h3><p>PS：这一步主要是<strong>防止他人盗用你的github账号</strong>所设置的双重保护，仅是为了安全，<strong>不设置</strong>这步<strong>也可运行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"这里是你的邮箱"</span></span></span><br></pre></td></tr></table></figure><p>然后你能在你<code>c://用户//13256(这里是你的用户名)//.ssh</code>里面找到以下三个文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8wkanj30g702k3yf.jpg" alt="文件列表" title="">                </div>                <div class="image-caption">文件列表</div>            </figure><p>然后登陆github网站 在setting里面找到ssh设置 然后新建ssh填入你<code>id_rsa.pub</code>里面的东西就ok了(title随便填)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8xgioj305u09u74a.jpg" alt="setting" title="">                </div>                <div class="image-caption">setting</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8ywkqj30un0hwwff.jpg" alt="add key" title="">                </div>                <div class="image-caption">add key</div>            </figure><p>然后点<code>add key</code>就完事儿了</p><h2 id="连接仓库"><a href="#连接仓库" class="headerlink" title="连接仓库"></a>连接仓库</h2><h3 id="1-获取项目URL"><a href="#1-获取项目URL" class="headerlink" title="1.获取项目URL"></a>1.获取项目URL</h3><h4 id="首先找到你想要clone（类似下载）到本地的项目页面"><a href="#首先找到你想要clone（类似下载）到本地的项目页面" class="headerlink" title="首先找到你想要clone（类似下载）到本地的项目页面"></a>首先找到你想要clone（类似下载）到本地的项目页面</h4><h4 id="按照箭头复制项目地址"><a href="#按照箭头复制项目地址" class="headerlink" title="按照箭头复制项目地址"></a>按照箭头复制项目地址</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/006ZO6XQly1fq7nac5d1vj30su0h7gmy.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="2-在本地clone项目"><a href="#2-在本地clone项目" class="headerlink" title="2.在本地clone项目"></a>2.在本地clone项目</h3><p><strong>首先找到你想要在<em>本地硬盘</em>clone（下载）的地址</strong></p><p><strong><em>右键<em>点击</em>Git Bash Here</em></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7nabiwpzj30o40i4gnm.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><p><strong>然后输入以下指令（就只有第一行）</strong></p><h4 id="git-clone-你刚刚复制的网址"><a href="#git-clone-你刚刚复制的网址" class="headerlink" title="git clone 你刚刚复制的网址"></a>git clone 你刚刚复制的网址</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7naco5yhj30gj0ahglw.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h4 id="完成后关闭这个命令提示框！"><a href="#完成后关闭这个命令提示框！" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><h4 id="完成后关闭这个命令提示框！-1"><a href="#完成后关闭这个命令提示框！-1" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><h4 id="完成后关闭这个命令提示框！-2"><a href="#完成后关闭这个命令提示框！-2" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><p><strong>Then你就会发现在目录下有一个你clone的仓库的名字的文件夹了（如下图）</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7nmlz8mhj30nt0hcgnd.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="3-进入clone后的仓库（文件夹）进行修改和push"><a href="#3-进入clone后的仓库（文件夹）进行修改和push" class="headerlink" title="3.进入clone后的仓库（文件夹）进行修改和push"></a>3.进入clone后的仓库（文件夹）进行修改和push</h3><p>进入刚刚clone的那个文件夹，此时你可以<strong><em>随意修改文件内容 增加内容</em></strong></p><p>修改完成后，在clone的文件夹里 <strong>右键然后点击Git Bash Here</strong></p><p>然后输入下面三行指令</p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h4><h4 id="git-commit-m-‘随便上传点东西’"><a href="#git-commit-m-‘随便上传点东西’" class="headerlink" title="git commit -m ‘随便上传点东西’"></a>git commit -m ‘随便上传点东西’</h4><h4 id="git-push-origin-master（主分支一般为master-如果你没别的分支就写master）"><a href="#git-push-origin-master（主分支一般为master-如果你没别的分支就写master）" class="headerlink" title="git push origin master（主分支一般为master,如果你没别的分支就写master）"></a>git push origin master（主分支一般为master,如果你没别的分支就写master）</h4><h4 id="注：第二行-‘-‘-里面的东西随便写-这里主要写你push的东西主要修改了什么（会在项目上显示）"><a href="#注：第二行-‘-‘-里面的东西随便写-这里主要写你push的东西主要修改了什么（会在项目上显示）" class="headerlink" title="注：第二行 ‘ ‘ 里面的东西随便写 这里主要写你push的东西主要修改了什么（会在项目上显示）"></a>注：第二行 ‘ ‘ 里面的东西随便写 这里主要写你push的东西主要修改了什么（会在项目上显示）</h4><h4 id="push时可能会让你输入邮箱密码-填上就行"><a href="#push时可能会让你输入邮箱密码-填上就行" class="headerlink" title="push时可能会让你输入邮箱密码 填上就行"></a>push时可能会让你输入邮箱密码 填上就行</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7o8kan65j30gc0d5mxu.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h4 id="在项目中显示的修改信息"><a href="#在项目中显示的修改信息" class="headerlink" title="在项目中显示的修改信息"></a>在项目中显示的修改信息</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006ZO6XQly1fq7o8l251ej30rf03x0st.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="4-更新自己修改后的文件"><a href="#4-更新自己修改后的文件" class="headerlink" title="4.更新自己修改后的文件"></a>4.更新自己修改后的文件</h3><p><strong>如果你后来修改了文件想要同步到github上面去的话，那么:</strong></p><h3 id="重复步骤-3中的-三个指令便可以了"><a href="#重复步骤-3中的-三个指令便可以了" class="headerlink" title="重复步骤 3中的 三个指令便可以了"></a>重复<em>步骤 3</em>中的 <em>三个指令</em>便可以了</h3><h3 id="5-分支开发"><a href="#5-分支开发" class="headerlink" title="5. 分支开发"></a>5. 分支开发</h3><h4 id="这个有点大就直接放地址了"><a href="#这个有点大就直接放地址了" class="headerlink" title="这个有点大就直接放地址了"></a>这个有点大就直接放地址了</h4><p><a href="http://www.runoob.com/git/git-branch.html" target="_blank" rel="noopener">菜鸟教程的教程 简单介绍的</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">还有廖雪峰老师的教程 ！推荐！讲的很详细！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;git的超简单用法（以test-repository为例）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="git" scheme="http://blog.fivezha.cn/tags/git/"/>
    
  </entry>
  
</feed>
