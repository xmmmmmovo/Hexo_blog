<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>异国迷宫的十字路口</title>
  
  <subtitle>一位弱鸡带学生的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.fivezha.cn/"/>
  <updated>2021-01-15T01:00:54.293Z</updated>
  <id>http://blog.fivezha.cn/</id>
  
  <author>
    <name>xmmmmmovo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于学校毕设管理系统的吐槽</title>
    <link href="http://blog.fivezha.cn/2020/12/11/final-project-wesite-bugs/"/>
    <id>http://blog.fivezha.cn/2020/12/11/final-project-wesite-bugs/</id>
    <published>2020-12-11T03:34:34.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>只是一篇白开水文章，用来吐槽我们学校的管理系统的<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有人问，马老师发生什么事了？我一看，奥，原来是昨天，有两个年轻人，一个码龄，三年多，一个码龄四年多。他们说：“诶…有一个说是毕设系统有问题，马老师你能不能教教我看”，然后上来就是一个html检索，吭，一个sql注入，一个字典查密码。我说年轻人不讲武德，他忙说对不起，他说他是乱注的。他可不是乱注的，一个“; and 1=1 and 1=2”， 一个“and 0&lt;&gt;(select count(*) from *)”， 训练有所，看来是有备而来。这两个年轻人不讲武德，来骗！来偷袭我这外包公司写的管理系统，这好吗？这不好。我劝这位年轻人，耗子尾汁。好好反思。以后不要再犯这样的小聪明。武林要以和为贵，要讲武德，不要搞窝里斗。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>哈哈哈，开个小玩笑，来讲一下昨天一晚上发现的搞笑事情吧，起初题目公布了，我们就是浏览了一下，但是他这个系统选题没有指导老师，很烦，就打算从<code>api</code>来看是否有什么思路找出来。结果这一看直接傻眼了，我滴天哪，这个系统竟然把所有数据都写在了一个<code>api</code>里面，这我是真的没想到的，各种隐私数据，导师信息，需求分析，题目类别，id，就连导师密码都写在里面了，不禁令人直呼真牛哇！真牛哇！这都可以的吗，这种程度的程序员都能出来拿工资吗？？现在计算机行业这么不饱和？？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211120711154.png" alt="image-20201211120711154" title="">                </div>                <div class="image-caption">image-20201211120711154</div>            </figure><p>起初，我就是把这些数据爬了下来然后提取了一下数据发群里然后就没再管，直到晚上朋友发的一句话才有了下面这些剧情…….</p><h2 id="快乐的耍网站时间"><a href="#快乐的耍网站时间" class="headerlink" title="快乐的耍网站时间"></a>快乐的耍网站时间</h2><h3 id="裸写在html里面的js和接口"><a href="#裸写在html里面的js和接口" class="headerlink" title="裸写在html里面的js和接口"></a>裸写在html里面的js和接口</h3><p>晚上，有一位朋友<code>L</code>说这个网站有bug，可以提前选课。起初我是很好奇的，因为提示的api只有一个校验，云端校验并且没有时间戳相关提交字段，怎么说都没办法绕过检测。然后就有了下面的对话：</p><blockquote><p>“选课的api和校验的api不是一个啊”</p><p>“???不是，你怎么知道的api地址的”</p><p>“直接根据<code>id</code>search一下就能找到了”</p></blockquote><p>我立马根据他所说的去搜索了一下，然后就发现了下面的这段令人哭笑不得的代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211122145573.png" alt="image-20201211122145573" title="">                </div>                <div class="image-caption">image-20201211122145573</div>            </figure><p>奥，闹了半天这个云端校验就是个幌子，选课代码直接裸写到<code>html</code>里面，真有你的啊，青峰软件！到了这时，我才明白，这个网站根本就不是<code>vue</code>之类的主流框架写的，而是利用<code>JQuery</code>和<code>Html</code>粗劣的拼接起来的垃圾平台，甚至<code>JS</code>文件都不是引入+混淆，而是直接正大光明的写到文件里面，好家伙！我直接™好家伙！</p><p>然后我就先自己选了~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201212192048922.png" alt="image-20201212192048922" title="">                </div>                <div class="image-caption">image-20201212192048922</div>            </figure><h3 id="跨专业选题"><a href="#跨专业选题" class="headerlink" title="跨专业选题"></a>跨专业选题</h3><p>根据说明，本专业的人本来只能选本专业的题目的，然而既然选课api被发现了,又发现了参数信息，得知这个选题只要一个<code>id</code>就可以选了，那么我能不能拿别的专业题目来请求选课呢？答案竟然是可以的，后台完全没有对于专业进行相关的校验，直接就是可以随便选了，再次惊呼好家伙！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211125210778.png" alt="image-20201211125210778" title="">                </div>                <div class="image-caption">image-20201211125210778</div>            </figure><h3 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h3><p>既然这个平台都这样了，为什么不再进一步呢，然后！就有了更加惊人的发现，这！个！网！站！居！然！没！有！做！防！注！入！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211125514580.png" alt="image-20201211125514580" title="">                </div>                <div class="image-caption">image-20201211125514580</div>            </figure><p>再！次！好！家！伙！</p><h3 id="弱口令问题-密码加密问题"><a href="#弱口令问题-密码加密问题" class="headerlink" title="弱口令问题+密码加密问题"></a>弱口令问题+密码加密问题</h3><p>本来弱口令不算做问题，但是教师的初始密码和****<em>\</em> (此处保密删除)，这就是很大的问题了。起初发现这个问题是因为在最开始获取数据的时候了解到了密码，查看格式知道是<code>md5</code>加密，本来这种加密手段直接弱口令表/彩虹表一查就出来的，然而，这里的规律提示所有老师的密码都是一样的……然后果断尝试<code>**************</code>(保密)，就……..就成功了！？好家伙，这也可以的吗？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20201211130751186.png" alt="image-20201211130751186" title="">                </div>                <div class="image-caption">image-20201211130751186</div>            </figure><h3 id="session没有黑名单"><a href="#session没有黑名单" class="headerlink" title="session没有黑名单"></a>session没有黑名单</h3><p>这个就是老生常谈了，到了这个地步我已经不指望了。果然，没有黑名单处理，session直接持久化保存，不会被顶掉。<code>CSRF</code>攻击防御措施也没有，甚至有时候<code>session id</code>都是放在<code>param</code>里面的，不得不说外包公司的程序员真的是想象力”天马行空”。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>根据上面的各种漏洞，我们基本可以做到：</p><blockquote><p>利用老师的cookie进行sql注入，达到删库或者shell提权操作，搞垮平台或者直接全部删掉(包括binlog)，然后直接溜之大吉不被任何人发现。</p></blockquote><p>吐槽到这，心理已经对这个学校失望透顶了，外包都只能找到这种程度的，这种甚至不该是公司产品，只不过是一个学生的课程设计级别的罢了。不，可能真的是学生作品，外包公司二次外包，三次外包，最后流入到学生手上的又有多少呢，这一层层之间回扣又吃了多少占比呢，我不敢想象，只能感叹：“还好大学四年没有选择赚钱而选择了学习啊！”</p><p>希望学弟学妹们也要引以为戒，写出来能用的代码很容易，写出来可以用的代码却很难，不要老想着那些既得利益，而要长远观察自身的潜在价值，明白自己这个阶段该学习什么，能有什么竞争力，能有什么样的金钱效应，为自己得到什么利益。不要最后35岁烂在外包公司写这种垃圾代码最后“被优化”。</p><blockquote><p><strong>天下熙熙皆为利来，天下攘攘皆为利往</strong></p></blockquote><p>人总是会为了利益不择手段的，哪怕是骗，抢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只是一篇白开水文章，用来吐槽我们学校的管理系统的
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="思考感悟" scheme="http://blog.fivezha.cn/tags/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/"/>
    
      <category term="技术杂类" scheme="http://blog.fivezha.cn/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>我停更的这两个月都在干什么</title>
    <link href="http://blog.fivezha.cn/2020/10/15/recent-situation-2020-10/"/>
    <id>http://blog.fivezha.cn/2020/10/15/recent-situation-2020-10/</id>
    <published>2020-10-15T14:03:36.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>本博客可能要有一段时间不更新了(泣)<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经有一段时间(两个月)没更新过博客了。上下思索，主要有两个原因：一是开学了，事务变多，无心管理博客相关更新，再加上大四的老狗已经无法再在实验室混日子了，导致我现在碰电脑的时间几乎消失掉了；二是面临考研，从早晨6：30起床去图书馆再到晚上9：30回去，11点宿舍熄灯，实在是没有时间进行长时间的编程作业，对于博客也没有有效的产出。综上原因，本博客大概率在<strong>12月28日</strong>之前不会更新了。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>那么开学的这两个月我到底干了什么呢？细细想来大概就几件事情了。</p><h3 id="物联网大课设"><a href="#物联网大课设" class="headerlink" title="物联网大课设"></a>物联网大课设</h3><p>首先便是物联网大课设了，这个课设的全面程度其实大概是和毕设差不多的吧，不仅要前端后端硬件，还需要安卓来辅佐，实在是全(sang)面(xin)完(bing)善(kuang)呢。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201015225354.png" alt="image-20201015225354513" title="">                </div>                <div class="image-caption">image-20201015225354513</div>            </figure><p>上面虽然说的四个人组队，但是如果真的经历过课设/大作业的懂得都懂，其实大多是时间就是一个人写完。这个课设说混也好混，因为课设不挂人，只要你过去了，然后项目能跑起来，就能过(分数不在考虑范围)。然而我不知道怎么想的，就是愣是想要把这个课设做的尽量的完美，可能是为了给自己大学四年的技术栈做一个总结吧，我这么想着，就做了整整半个多月，甚至还抽出一天通宵写课设。可以说这个课设是融入了我大学学来的精华了。</p><p>开源地址：<a href="https://github.com/xmmmmmovo/SmartGreenhouse" target="_blank" rel="noopener">https://github.com/xmmmmmovo/SmartGreenhouse</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201015231958.jpg" alt="通宵时间" title="">                </div>                <div class="image-caption">通宵时间</div>            </figure><p>最后附上一张项目的架构图片：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016085721.png" alt="架构图" title="">                </div>                <div class="image-caption">架构图</div>            </figure><p>和一点截图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016090532.jpg" alt="安卓" title="">                </div>                <div class="image-caption">安卓</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016090547.png" alt="web" title="">                </div>                <div class="image-caption">web</div>            </figure><h3 id="综测奖学金"><a href="#综测奖学金" class="headerlink" title="综测奖学金"></a>综测奖学金</h3><p>这个事情算是近期来最舒服的一件事情了<del>(毕竟没有人跟钱过不去)</del>，经过了一整年的艰苦学习，终于拿到了一等奖学金了。回首这一年的学习时光，实在是艰辛，前半年每节课都坐在第一排认真听课，在最后一周无数门考试考试周中拼尽力气，在这后半年网课生活中，通宵写文档，可以说这一年，很累，但是确实是我大学三年废物生活中最有意义的一年了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016085946.png" alt="image-20201016085946052" title="">                </div>                <div class="image-caption">image-20201016085946052</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/IMG_20201113_231300.jpg" alt="IMG_20201113_231300" title="">                </div>                <div class="image-caption">IMG_20201113_231300</div>            </figure><p>对了，这个事情还收回了我当时大二结束立下的flag，成功收回一等奖学金flag，舒服~</p><h3 id="玩乐"><a href="#玩乐" class="headerlink" title="玩乐"></a>玩乐</h3><p>虽然考研复习很紧张，本鼠人还是抽出了国庆一天时间跟朋友出去尽情的玩耍，吃了海底捞(我的奖学金​哭了😥​)，看了姜子牙。最大的感触可能就是希望自己像最后彩蛋里那样，一战封神吧。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016092156.png" alt="快乐的火锅人" title="">                </div>                <div class="image-caption">快乐的火锅人</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016100714.jpg" alt="等待排队时候的咖啡" title="">                </div>                <div class="image-caption">等待排队时候的咖啡</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20201016100531.jpg" alt="祝大家一战封神" title="">                </div>                <div class="image-caption">祝大家一战封神</div>            </figure><h3 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h3><p>关于复习进度，其实由于自身原因，已经不知道拉下多少进度了，但是考研路曼曼，给自己留后路就是说明有着放弃的准备了，一定要拼尽全力，努力成长。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>感谢你能有耐心来看本废物的这篇流水账文章，我虽然平日自嘲为废物带学生，但是真的到了该拼一枪的时候还是会去稍微的努力一下的，正所谓”宁可身冷，不可心冷；宁可人穷，不可志穷”。再高耸的山峰，如若自己在山脚便退却，便永世不得参得一览众山小的美貌了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本博客可能要有一段时间不更新了(泣)
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="通知" scheme="http://blog.fivezha.cn/tags/%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>记一次核酸检测经历</title>
    <link href="http://blog.fivezha.cn/2020/08/23/fever-test/"/>
    <id>http://blog.fivezha.cn/2020/08/23/fever-test/</id>
    <published>2020-08-22T16:23:45.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次很慌的核酸检测经历<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>收到电话通知了，没有事情，检测是阴性，烧也退下去了。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>20号早晨莫名其妙发烧了，本来以为没事情的，结果吃了退烧药啥的都不管用，一直到了第二天还在发烧，有点慌了，就去医院做了一下核酸检测。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822012133.png" alt="image-20200822012126040" title="">                </div>                <div class="image-caption">image-20200822012126040</div>            </figure><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>总结一下 <strong>核酸检测</strong> 的基本步骤吧:</p><ol><li>填表</li><li>医生采样</li><li>完毕</li></ol><p>看上去就这么简单吧, 但是这个采样又是什么样子的呢?</p><p>这里其实有两种方案, 第一种就是下面这种,先来看看描述:</p><blockquote><p>采样人员一手轻扶被采集人员的头部，一手执拭子，拭子贴鼻孔进入，沿下鼻道的底部向后缓缓深入，由于鼻道呈弧形，不可用力过猛，以免发生外伤出血。<strong>待拭子顶端到达鼻咽腔后壁时，轻轻旋转一周</strong>（如遇反射性咳嗽，应停留片刻） ，然后缓缓取出拭子，将拭子头浸入含2～3ml病毒保存液（也可使用等渗盐溶液、组织培养液或磷酸盐缓冲液）的管中，尾部弃去，旋紧管盖。</p></blockquote><p>听上去是不是云里雾里的? 然而相信我, 直接看到图片之后直接会 <strong>心 肺 停 止</strong> 的, 你看这难道不是处刑吗?</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822085940.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822085949.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822085955.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>啊哈, 不过好在这里还有第二个方案, 也是更加普及的方案:</p><blockquote><p>被采集人员先用生理盐水漱口，采样人员将拭子放入无菌生理盐水中湿润(禁止将拭子放入病毒保存液中，避免抗生素引起过敏)，被采集人员头部微仰，嘴张大，并发“啊”音，<strong>露出两侧咽扁桃体，将拭子越过舌根，在被采集者两侧咽扁桃体稍微用力来回擦拭至少3次，然后再在咽后壁上下擦拭至少3次</strong>，将拭子头浸入含2～3ml病毒保存液（也可使用等渗盐溶液、组织培养液或磷酸盐缓冲液）的管中，尾部弃去，旋紧管盖。咽拭子也可与鼻咽拭子放置于同一管中。</p></blockquote><p>“看上去”是不是更加”温柔”了?啧啧啧, 请看下面这个图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822090002.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>没错! 这个就是直接往你喉咙里捅…….直接捅到嗓子眼的那种……</p><p>”什么？你以为是二选一？“哦不，是两个都要做！感觉呢，感觉就是非常酸爽，就像是吃了一斤的芥末混合着催吐剂一样，整个人都不好了。。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200822090008.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>也不知道怎么作下了，一直发烧到了22号才有所好转，体温恢复了正常，但是头痛难忍+胳膊莫名其妙的极其酸痛使得我现在无法入睡，只得起床写下此篇小记，用以记录和转移注意力缓解疼痛感。。。。</p><p>最后附上检查结果：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200823013557.png" alt="image-20200823013551713" title="">                </div>                <div class="image-caption">image-20200823013551713</div>            </figure></p><p>不过医生的字真的是草的不得了。。。。但起码还能看懂点。。。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200823013656.png" alt="image-20200823013649688" title="">                </div>                <div class="image-caption">image-20200823013649688</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次很慌的核酸检测经历
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 202场次周赛个人Kotlin题解(2020/8/16)</title>
    <link href="http://blog.fivezha.cn/2020/08/16/leetcode-weekly-202/"/>
    <id>http://blog.fivezha.cn/2020/08/16/leetcode-weekly-202/</id>
    <published>2020-08-16T06:08:54.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>对于第202场的周赛的个人题解<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次周赛难度相比前一周来说真的是难度骤降，让人有了安心感(并不)，前三题由个人完成，最后一题参考题解。</p><h2 id="存在连续三个奇数的数组"><a href="#存在连续三个奇数的数组" class="headerlink" title="存在连续三个奇数的数组"></a><a href="https://leetcode-cn.com/problems/three-consecutive-odds/" target="_blank" rel="noopener">存在连续三个奇数的数组</a></h2><blockquote><p>给你一个整数数组 arr，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 true ；否则，返回 false 。</p><p>示例 1：</p><p>输入：arr = [2,6,4,1]<br>输出：false<br>解释：不存在连续三个元素都是奇数的情况。<br>示例 2：</p><p>输入：arr = [1,2,34,3,4,5,7,23,12]<br>输出：true<br>解释：存在连续三个元素都是奇数的情况，即 [5,7,23] 。</p><p>提示：</p><p>1 &lt;= arr.length &lt;= 1000<br>1 &lt;= arr[i] &lt;= 1000</p></blockquote><p>两数相加级别的水题，直接放代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isOdd</span><span class="params">(number: <span class="type">Int</span>)</span></span> = number % <span class="number">2</span> != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">threeConsecutiveOdds</span><span class="params">(arr: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until arr.size - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isOdd(arr[i]) &amp;&amp; isOdd(arr[i + <span class="number">1</span>]) &amp;&amp; isOdd(arr[i + <span class="number">2</span>])) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度:<br>$$<br>\mathcal{O}(N)<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="使数组中所有元素相等的最小操作数"><a href="#使数组中所有元素相等的最小操作数" class="headerlink" title="使数组中所有元素相等的最小操作数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-array-equal/" target="_blank" rel="noopener">使数组中所有元素相等的最小操作数</a></h2><blockquote><p>存在一个长度为 n 的数组 arr ，其中 arr[i] = (2 * i) + 1 （ 0 &lt;= i &lt; n ）。</p><p>一次操作中，你可以选出两个下标，记作 x 和 y （ 0 &lt;= x, y &lt; n ）并使 arr[x] 减去 1 、arr[y] 加上 1 （即 arr[x] -=1 且 arr[y] += 1 ）。最终的目标是使数组中的所有元素都 相等 。题目测试用例将会 保证 ：在执行若干步操作后，数组中的所有元素最终可以全部相等。</p><p>给你一个整数 n，即数组的长度。请你返回使数组 arr 中所有元素相等所需的 最小操作数 。</p><p>示例 1：</p><p>输入：n = 3<br>输出：2<br>解释：arr = [1, 3, 5]<br>第一次操作选出 x = 2 和 y = 0，使数组变为 [2, 3, 4]<br>第二次操作继续选出 x = 2 和 y = 0，数组将会变成 [3, 3, 3]<br>示例 2：</p><p>输入：n = 6<br>输出：9</p><p>提示：</p><p>1 &lt;= n &lt;= 10^4</p></blockquote><p>这里如果嗯写的话时间复杂度肯定会爆掉的($\mathcal{O}(N^2)$级别数据就已经到达$10^8$了，肯定爆了)，所以换思路，仔细查看会发现这是一个遵循一定规律(函数规律)的数列，所以易推出数据以中位数为中心中心对称，即是中位数右边数字减去中位数等于中位数减去中位数左边数字，所以易推出差值为等差数列，奇数除以2的时候会丢失$\frac{1}{2}$的精度，但是我们需要的只是一个和值，只要是损失在<code>1</code>之内都可以接受：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">minOperations</span><span class="params">(n: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 中位数是n</span></span><br><span class="line">        <span class="keyword">return</span> (n * n) shr <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度:<br>$$<br>\mathcal{O}(1)<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="两球之间的磁力"><a href="#两球之间的磁力" class="headerlink" title="两球之间的磁力"></a><a href="https://leetcode-cn.com/problems/magnetic-force-between-two-balls/" target="_blank" rel="noopener">两球之间的磁力</a></h2><blockquote><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 n 个空的篮子，第 i 个篮子的位置在 position[i] ，Morty 想把 m 个球放到这些篮子里，使得任意两球间 最小磁力 最大。</p><p>已知两个球如果分别位于 x 和 y ，那么它们之间的磁力为 |x - y| 。</p><p>给你一个整数数组 position 和一个整数 m ，请你返回最大化的最小磁力。</p><p>示例 1：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200816235706.jpeg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>输入：position = [1,2,3,4,7], m = 3<br>输出：3<br>解释：将 3 个球分别放入位于 1，4 和 7 的三个篮子，两球间的磁力分别为 [3, 3, 6]。最小磁力为 3 。我们没办法让最小磁力大于 3 。<br>示例 2：</p><p>输入：position = [5,4,3,2,1,1000000000], m = 2<br>输出：999999999<br>解释：我们使用位于 1 和 1000000000 的篮子时最小磁力最大。</p><p>提示：</p><p>n == position.length<br>2 &lt;= n &lt;= 10^5<br>1 &lt;= position[i] &lt;= 10^9<br>所有 position 中的整数 互不相同 。<br>2 &lt;= m &lt;= position.length</p></blockquote><p>经典暴力思想转二分优化应用题目(其实开始想dp的来着，得亏群里高人指点)。这里其实有个隐藏条件，看似是随意分布的各个球体，其实为了最大化最小磁力，每个球之间的间隔距离其实肯定是一样的，即是理想情况下最大化的最小间隔距离一定是$\frac{length}{m}$，所以根据上面的思路，我们修改一下判断函数，判断是否可以以当前间隔进行等分，然后对于每一次间隔选取进行左右二分，就完成了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">maxDistance</span><span class="params">(position: <span class="type">IntArray</span>, m: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        position.sort()</span><br><span class="line">        <span class="keyword">val</span> maxp = position.last() - position.first()</span><br><span class="line">        <span class="keyword">var</span> minp = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until position.size - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (minp &gt; position[i + <span class="number">1</span>] - position[i])</span><br><span class="line">                minp = position[i + <span class="number">1</span>] - position[i]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> lo = minp</span><br><span class="line">        <span class="keyword">var</span> hi = maxp / (m - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> check = <span class="function"><span class="title">fun</span><span class="params">(inter: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">            <span class="comment">// 因为第一个肯定是在首位，所以直接跳过一个</span></span><br><span class="line">            <span class="keyword">var</span> tmp = position[<span class="number">0</span>] + inter</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> position.indices) &#123;</span><br><span class="line">                <span class="keyword">if</span> (position[i] &gt;= tmp) &#123;</span><br><span class="line">                    cnt++</span><br><span class="line">                    tmp = position[i] + inter</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cnt &gt;= m - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">val</span> mid = lo + ((hi - lo) shr <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (check(mid))</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lo - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度:<br>$$<br>\mathcal{O}(Nlog_2(N))<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="吃掉-N-个橘子的最少天数"><a href="#吃掉-N-个橘子的最少天数" class="headerlink" title="吃掉 N 个橘子的最少天数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-eat-n-oranges/" target="_blank" rel="noopener">吃掉 N 个橘子的最少天数</a></h2><blockquote><p>厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：</p><ul><li><p>吃掉一个橘子。</p></li><li><p>如果剩余橘子数 n 能被 2 整除，那么你可以吃掉 n/2 个橘子。</p></li><li><p>如果剩余橘子数 n 能被 3 整除，那么你可以吃掉 2*(n/3) 个橘子。</p></li></ul><p>每天你只能从以上 3 种方案中选择一种方案。</p><p>请你返回吃掉所有 n 个橘子的最少天数。</p><p>示例 1：</p><p>输入：n = 10<br>输出：4<br>解释：你总共有 10 个橘子。<br>第 1 天：吃 1 个橘子，剩余橘子数 10 - 1 = 9。<br>第 2 天：吃 6 个橘子，剩余橘子数 9 - 2 * (9/3) = 9 - 6 = 3。（9 可以被 3 整除）<br>第 3 天：吃 2 个橘子，剩余橘子数 3 - 2 * (3/3) = 3 - 2 = 1。<br>第 4 天：吃掉最后 1 个橘子，剩余橘子数 1 - 1 = 0。<br>你需要至少 4 天吃掉 10 个橘子。</p><p>示例 2：</p><p>输入：n = 6<br>输出：3<br>解释：你总共有 6 个橘子。<br>第 1 天：吃 3 个橘子，剩余橘子数 6 - 6/2 = 6 - 3 = 3。（6 可以被 2 整除）<br>第 2 天：吃 2 个橘子，剩余橘子数 3 - 2*(3/3) = 3 - 2 = 1。（3 可以被 3 整除）<br>第 3 天：吃掉剩余 1 个橘子，剩余橘子数 1 - 1 = 0。<br>你至少需要 3 天吃掉 6 个橘子。</p><p>示例 3：</p><p>输入：n = 1<br>输出：1</p><p>示例 4：</p><p>输入：n = 56<br>输出：6</p><p>提示：</p><p>1 &lt;= n &lt;= 2*10^9</p></blockquote><p>额，这个题当时盲猜暴力<code>dfs/bfs</code>搜索，但是肯定会超时，所以就没写下去，打算看题解了，下面都是题解思路。</p><p>看了一下题解好像<code>dfs+离散化+剪枝</code>好像能解，尝试一下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> map = HashMap&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">minDays</span><span class="params">(n: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 小于直接返回了</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记忆化搜索</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map[n]!!</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里+n%3是考虑到吃一个的情况的，吃掉了n%3次的一个，然后和n%2进行次数比较</span></span><br><span class="line">        <span class="keyword">val</span> min = min(minDays(n / <span class="number">3</span>) + n % <span class="number">3</span>, minDays(n / <span class="number">2</span>) + n % <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line">        map[n] = min</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像写成了<code>贪心+记忆化搜索</code>了…….</p><p>解释一下为什么可以这样写，思考三种情况<code>(/3, /2, -1)</code>，其中<code>-1</code>效率必是无法与<code>/3,/2</code>的效率相比拟的，所以，最小化天数一定是最大化<code>/3,/2</code>这种情况，至于哪个比较小则需要进一步比较了。</p><p>时间复杂度:</p><p>这里存在$log_2(N)$和$log_3(N)$混合，统一归为$log(N)$<br>$$<br>\mathcal{O}(log(N)^2)<br>$$<br>空间复杂度(这个其实不好判断，看数据离散程度了):<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-eat-n-oranges/solution/python3-8xing-dai-ma-shi-jian-fu-za-du-olog2ntu-ji/" target="_blank" rel="noopener">[python3] 图解剪枝+递归+记忆化，时间复杂度O(log(N)²)</a></p><p><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-eat-n-oranges/solution/liang-chong-fang-fa-bfs-vs-dfs-by-mei-jian-xi-xu-2/" target="_blank" rel="noopener">方法选择：BFS vs DFS vs DP</a></p><p><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-eat-n-oranges/solution/tan-xin-dpde-shu-xue-zheng-ming-by-catnipan/" target="_blank" rel="noopener">数学证明：为什么用“贪心”DP是对的？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于第202场的周赛的个人题解
    
    </summary>
    
    
      <category term="leetcode" scheme="http://blog.fivezha.cn/categories/leetcode/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>给准大一的萌新们的一份小指南</title>
    <link href="http://blog.fivezha.cn/2020/08/11/freshman-guide/"/>
    <id>http://blog.fivezha.cn/2020/08/11/freshman-guide/</id>
    <published>2020-08-11T03:29:51.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>本文章原写于<code>2019-08-14</code>，现转移到个人博客上用来继续给各位刚入大学的萌新指出一条路来。<a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>首先欢迎来到中北大学大数据学院！</p><p>这个暑假，强烈建议打一下C语言，高数的基础，还有请不要忘记你所学过的英语知识。</p><p>开学虽然没有考试，但是你要想比别人走的更远，请先比别人准备更多的东西。</p><p>开学之后会有实验室宣讲纳新，咱们院的话具体有安卓，动漫，物联网，自主可控，大数据与网络安全，ACM/ICPC集训队。(<strong>注</strong>:群文件里有咱们院各个实验室简介,可以先简单了解一下,但还是要看宣讲选择)</p><p>软件学院有ACM实验室和网络安全研究所，喜欢硬件机器人或者机械之类的话六院（仪器电子）有机器人实验室，五院（信息与通信）有卓创，信号与系统，十五院（电器）有电子，电气，轨道等等。</p><p>所以说，基本上只要有想学的方向都会有相应的学习平台。</p><p><strong>P.S. 群文件里已经根据下面的标题分好类了所以下面所有群文件资料地址请看标题。以后群文件代指群文件里/标题名文件夹</strong></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="解压缩工具"><a href="#解压缩工具" class="headerlink" title="解压缩工具"></a>解压缩工具</h4><ul><li>bandizip (BANDIZIP-SETUP.exe)<ul><li>一个免费轻量的压缩解压缩工具 并且里面的自动解压功能很好用！</li></ul></li></ul><h4 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h4><ul><li>百度网盘下载(这里本来是pandownload的，但是凉了)</li><li>qBittorrentEE-v4.2.5.12</li></ul><h4 id="PDF阅读工具"><a href="#PDF阅读工具" class="headerlink" title="PDF阅读工具"></a>PDF阅读工具</h4><ul><li>文电通PDF reader(GaaihoReader_CHS_ALL_4.20.exe)<ul><li>一个台湾公司出品的软件，免费没有广告，并且很轻量！</li></ul></li><li>Adobe Acrobat</li></ul><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><p>这门课是你们刚上大学便会开的课程，并且也大概率是你学的第一门语言，重要性不必分说。</p><p>并且实验室面试也是会参考<strong>一部分</strong>C语言知识储量的，所以很重要！</p><h4 id="资料！"><a href="#资料！" class="headerlink" title="资料！"></a>资料！</h4><h5 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h5><p>编程软件乃是基础，群文件里有电脑端跟Android手机端(IOS请自行解决因为我也没用过233333)两个编程软件：</p><ul><li>DEV-Cpp(Dev-Cpp 5.11 TDM-GCC 4.9.2 Setup.exe)<ul><li>电脑端软件 安装步骤也是配套的</li></ul></li><li>SimpleC(simpleC_1.2.29.apk)<ul><li>Android编程软件</li></ul></li><li>C/C++-programming language 离线<ul><li>IOS编程软件</li><li>这个因为苹果政策原因只能贴AppStore网址了</li><li><a href="https://apps.apple.com/cn/app/c-c-programming-language-%E7%A6%BB%E7%BA%BF/id1016322367" target="_blank" rel="noopener">https://apps.apple.com/cn/app/c-c-programming-language-%E7%A6%BB%E7%BA%BF/id1016322367</a></li></ul></li><li>C/C++$<ul><li>同样是IOS上的，这个是上面那个的付费版多了代码提示</li><li><a href="https://apps.apple.com/cn/app/c-c-%24/id1003101482" target="_blank" rel="noopener">https://apps.apple.com/cn/app/c-c-%24/id1003101482</a></li></ul></li></ul><h5 id="书本"><a href="#书本" class="headerlink" title="书本"></a>书本</h5><p>群文件里有一本<strong>C Primer Plus (第五版) 中文版.pdf</strong>，这本书讲授C语言很全面，基本各个类型均有涉及，比课本要讲的清晰明确，是很好的入门书籍。</p><h5 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h5><p>这边推荐浙江大学<strong>翁恺</strong>老师的网课，网易云课堂/中国大学MOOC跟B站搜索翁恺便可找到</p><p>下面贴出网易云课堂的网址：</p><p><a href="https://mooc.study.163.com/course/1000002011#/info" target="_blank" rel="noopener">https://mooc.study.163.com/course/1000002011#/info</a></p><p>中国大学MOOC还没有开课也贴一下：</p><p><a href="https://www.icourse163.org/course/ZJU-199001" target="_blank" rel="noopener">https://www.icourse163.org/course/ZJU-199001</a></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>python作为一门类脚本语言，其最大的特点就是简单易学，入门迅速，并且上手后很容易写出成品程序，可以快速树立编程信心，让自己对编程有兴趣，多写代码也对自己大有益处。</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul><li>群文件里有<code>Environment Variable Setting.zip</code>文件 这个是自动配置脚本</li><li>如果不会使用也可以参考下面的博客:<br><a href="https://zhuanlan.zhihu.com/p/42984735" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42984735</a></li></ul><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><ul><li>廖雪峰博客：全面而又细致的入门级教程，不过只有纯文字<br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400</a></li><li>莫烦python：带有视频，容量上较廖雪峰先生博客少<br><a href="https://morvanzhou.github.io/tutorials/python-basic/basic/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/basic/</a></li><li>十分钟 Python 从 Zero 到 Hero：适合有一定基础的(学过至少一门语言的)<br><a href="https://zhuanlan.zhihu.com/p/33406196" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33406196</a></li></ul><h3 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h3><p>高等数学，以下简称高数。这是你们大学生活中极其重要的一门学科，因为计算机 ≈ 数学知识的应用，所以高数线代概率请务必打好基础。</p><p>并且在日后的编程中，无论是业务还是算法，用到数学知识的地方都是极多的，尤其是当下最热门的人工智能方向，更是数学应用的极致体现。</p><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><ul><li>PPT<ul><li>群文件里有高数上课用的PPT</li></ul></li><li>川大徐小湛老师的视频<ul><li>这个讲的很慢很仔细 适合没有基础的萌新看</li><li>上部分视频：<br><a href="https://www.bilibili.com/video/av57879350?from=search&amp;seid=1260147609372582774" target="_blank" rel="noopener">https://www.bilibili.com/video/av57879350?from=search&amp;seid=1260147609372582774</a></li><li>下部分视频：<br><a href="https://www.bilibili.com/video/av57932680?from=search&amp;seid=1260147609372582774" target="_blank" rel="noopener">https://www.bilibili.com/video/av57932680?from=search&amp;seid=1260147609372582774</a></li></ul></li></ul><h3 id="英语知识"><a href="#英语知识" class="headerlink" title="英语知识"></a>英语知识</h3><p>不要扔掉英语！</p><p>不要扔掉英语！</p><p>不要扔掉英语！</p><p>大学生尤其是计算机系的学生，英语极其重要，因为第一手，最前沿的资料大多都是英文资料，不要等着有人翻译成中文，因为那时这个技术已经落后了！</p><p>所以先从单词开始，像高中那样慢慢积累吧，因为一门语言是不可能一蹴而就的。</p><p>不要忘了大学等级考试也是很重要的。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>上面说了很多，但是并不是让你都学习，浅尝辄止不如不学，还有半个月的暑假生活，在下希望宁们能够把其中一样做好便已经超出大部分人很多了。</p><p>​                                                                                                                                                  </p><p>​                                                                                                                                                    ———-2019.08.14</p><p>​                                                                                                                                                                卑微小扎</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章原写于&lt;code&gt;2019-08-14&lt;/code&gt;，现转移到个人博客上用来继续给各位刚入大学的萌新指出一条路来。
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="萌新指南" scheme="http://blog.fivezha.cn/tags/%E8%90%8C%E6%96%B0%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>random()和伪随机</title>
    <link href="http://blog.fivezha.cn/2020/08/03/ts-random-test/"/>
    <id>http://blog.fivezha.cn/2020/08/03/ts-random-test/</id>
    <published>2020-08-03T04:47:17.000Z</published>
    <updated>2021-01-15T01:00:54.297Z</updated>
    
    <content type="html"><![CDATA[<p>测试伪随机~<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于随机这个问题，其实困扰了我很久了，我一直想找一个方法测试一下标准库里面的随机到底能“伪”到什么地步，所以本篇就是来可视化比较一下两种伪随机的随机情况。</p><p>对于同时取<strong>[1,10000]</strong>的随机数来统计。</p><h2 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> randDict: Map&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> Map();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="built_in">parseInt</span>(</span><br><span class="line">      (<span class="built_in">parseFloat</span>(<span class="built_in">Math</span>.random().toFixed(<span class="number">4</span>)) * <span class="number">10000</span>).toFixed(<span class="number">0</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (randDict.has(res)) &#123;</span><br><span class="line">      randDict.set(res, randDict.get(res) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      randDict.set(res, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(randDict.size);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sl = <span class="built_in">Array</span>.from(randDict);</span><br><span class="line">  sl.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> k: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">let</span> y: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   console.log(sl);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> it of sl) &#123;</span><br><span class="line">    k.push(it[<span class="number">0</span>]);</span><br><span class="line">    y.push(it[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   console.log(k);</span></span><br><span class="line">  <span class="comment">//   console.log(y);</span></span><br><span class="line"></span><br><span class="line">  fs.writeFileSync(<span class="string">"rkk.txt"</span>, k.toString());</span><br><span class="line">  fs.writeFileSync(<span class="string">"ryy.txt"</span>, y.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><h2 id="线性同余"><a href="#线性同余" class="headerlink" title="线性同余"></a>线性同余</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> randDict: Map&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> Map();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rand = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> seed = today.getTime();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rnd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    seed = (seed * <span class="number">9301</span> + <span class="number">49297</span>) % <span class="number">233280</span>;</span><br><span class="line">    <span class="keyword">return</span> seed / <span class="number">233280.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rand</span>(<span class="params"><span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(rnd() * <span class="built_in">number</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = rand(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (randDict.has(res)) &#123;</span><br><span class="line">      randDict.set(res, randDict.get(res) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      randDict.set(res, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(randDict.size);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sl = <span class="built_in">Array</span>.from(randDict);</span><br><span class="line">  sl.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> k: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">let</span> y: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   console.log(sl);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> it of sl) &#123;</span><br><span class="line">    k.push(it[<span class="number">0</span>]);</span><br><span class="line">    y.push(it[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   console.log(k);</span></span><br><span class="line">  <span class="comment">//   console.log(y);</span></span><br><span class="line"></span><br><span class="line">  fs.writeFileSync(<span class="string">"rly.txt"</span>, y.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><div id="echarts5796" style="width: 81%;height: 400px;margin: 0 auto"></div><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts5796'));        // 指定图表的配置项和数据        var option = {    title: {        text: '随机数可视化'    },    tooltip: {        trigger: 'axis'    },    legend: {        data: ['Math.random()', '线性同余']    },    grid: {        left: '3%',        right: '4%',        bottom: '3%',        containLabel: true    },    dataZoom: [{        type: 'inside',        start: 0,        end: 10000    }, {        start: 0,        end: 10,        handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',        handleSize: '80%',        handleStyle: {            color: '#fff',            shadowBlur: 3,            shadowColor: 'rgba(0, 0, 0, 0.6)',            shadowOffsetX: 2,            shadowOffsetY: 2        }    }],    toolbox: {        feature: {            saveAsImage: {}        }    },    xAxis: {        type: 'category',        boundaryGap: false,        data: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4741,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797,4798,4799,4800,4801,4802,4803,4804,4805,4806,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943,4944,4945,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728,5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6331,6332,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384,6385,6386,6387,6388,6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536,6537,6538,6539,6540,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6566,6567,6568,6569,6570,6571,6572,6573,6574,6575,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640,6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669,6670,6671,6672,6673,6674,6675,6676,6677,6678,6679,6680,6681,6682,6683,6684,6685,6686,6687,6688,6689,6690,6691,6692,6693,6694,6695,6696,6697,6698,6699,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801,6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970,6971,6972,6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985,6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996,6997,6998,6999,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7013,7014,7015,7016,7017,7018,7019,7020,7021,7022,7023,7024,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109,7110,7111,7112,7113,7114,7115,7116,7117,7118,7119,7120,7121,7122,7123,7124,7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7136,7137,7138,7139,7140,7141,7142,7143,7144,7145,7146,7147,7148,7149,7150,7151,7152,7153,7154,7155,7156,7157,7158,7159,7160,7161,7162,7163,7164,7165,7166,7167,7168,7169,7170,7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7325,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397,7398,7399,7400,7401,7402,7403,7404,7405,7406,7407,7408,7409,7410,7411,7412,7413,7414,7415,7416,7417,7418,7419,7420,7421,7422,7423,7424,7425,7426,7427,7428,7429,7430,7431,7432,7433,7434,7435,7436,7437,7438,7439,7440,7441,7442,7443,7444,7445,7446,7447,7448,7449,7450,7451,7452,7453,7454,7455,7456,7457,7458,7459,7460,7461,7462,7463,7464,7465,7466,7467,7468,7469,7470,7471,7472,7473,7474,7475,7476,7477,7478,7479,7480,7481,7482,7483,7484,7485,7486,7487,7488,7489,7490,7491,7492,7493,7494,7495,7496,7497,7498,7499,7500,7501,7502,7503,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513,7514,7515,7516,7517,7518,7519,7520,7521,7522,7523,7524,7525,7526,7527,7528,7529,7530,7531,7532,7533,7534,7535,7536,7537,7538,7539,7540,7541,7542,7543,7544,7545,7546,7547,7548,7549,7550,7551,7552,7553,7554,7555,7556,7557,7558,7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7624,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7653,7654,7655,7656,7657,7658,7659,7660,7661,7662,7663,7664,7665,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681,7682,7683,7684,7685,7686,7687,7688,7689,7690,7691,7692,7693,7694,7695,7696,7697,7698,7699,7700,7701,7702,7703,7704,7705,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7726,7727,7728,7729,7730,7731,7732,7733,7734,7735,7736,7737,7738,7739,7740,7741,7742,7743,7744,7745,7746,7747,7748,7749,7750,7751,7752,7753,7754,7755,7756,7757,7758,7759,7760,7761,7762,7763,7764,7765,7766,7767,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7780,7781,7782,7783,7784,7785,7786,7787,7788,7789,7790,7791,7792,7793,7794,7795,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7810,7811,7812,7813,7814,7815,7816,7817,7818,7819,7820,7821,7822,7823,7824,7825,7826,7827,7828,7829,7830,7831,7832,7833,7834,7835,7836,7837,7838,7839,7840,7841,7842,7843,7844,7845,7846,7847,7848,7849,7850,7851,7852,7853,7854,7855,7856,7857,7858,7859,7860,7861,7862,7863,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7875,7876,7877,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7891,7892,7893,7894,7895,7896,7897,7898,7899,7900,7901,7902,7903,7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917,7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7936,7937,7938,7939,7940,7941,7942,7943,7944,7945,7946,7947,7948,7949,7950,7951,7952,7953,7954,7955,7956,7957,7958,7959,7960,7961,7962,7963,7964,7965,7966,7967,7968,7969,7970,7971,7972,7973,7974,7975,7976,7977,7978,7979,7980,7981,7982,7983,7984,7985,7986,7987,7988,7989,7990,7991,7992,7993,7994,7995,7996,7997,7998,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8109,8110,8111,8112,8113,8114,8115,8116,8117,8118,8119,8120,8121,8122,8123,8124,8125,8126,8127,8128,8129,8130,8131,8132,8133,8134,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8165,8166,8167,8168,8169,8170,8171,8172,8173,8174,8175,8176,8177,8178,8179,8180,8181,8182,8183,8184,8185,8186,8187,8188,8189,8190,8191,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255,8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319,8320,8321,8322,8323,8324,8325,8326,8327,8328,8329,8330,8331,8332,8333,8334,8335,8336,8337,8338,8339,8340,8341,8342,8343,8344,8345,8346,8347,8348,8349,8350,8351,8352,8353,8354,8355,8356,8357,8358,8359,8360,8361,8362,8363,8364,8365,8366,8367,8368,8369,8370,8371,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8384,8385,8386,8387,8388,8389,8390,8391,8392,8393,8394,8395,8396,8397,8398,8399,8400,8401,8402,8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418,8419,8420,8421,8422,8423,8424,8425,8426,8427,8428,8429,8430,8431,8432,8433,8434,8435,8436,8437,8438,8439,8440,8441,8442,8443,8444,8445,8446,8447,8448,8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464,8465,8466,8467,8468,8469,8470,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8482,8483,8484,8485,8486,8487,8488,8489,8490,8491,8492,8493,8494,8495,8496,8497,8498,8499,8500,8501,8502,8503,8504,8505,8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526,8527,8528,8529,8530,8531,8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,8575,8576,8577,8578,8579,8580,8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8594,8595,8596,8597,8598,8599,8600,8601,8602,8603,8604,8605,8606,8607,8608,8609,8610,8611,8612,8613,8614,8615,8616,8617,8618,8619,8620,8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,8660,8661,8662,8663,8664,8665,8666,8667,8668,8669,8670,8671,8672,8673,8674,8675,8676,8677,8678,8679,8680,8681,8682,8683,8684,8685,8686,8687,8688,8689,8690,8691,8692,8693,8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8705,8706,8707,8708,8709,8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,8720,8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741,8742,8743,8744,8745,8746,8747,8748,8749,8750,8751,8752,8753,8754,8755,8756,8757,8758,8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770,8771,8772,8773,8774,8775,8776,8777,8778,8779,8780,8781,8782,8783,8784,8785,8786,8787,8788,8789,8790,8791,8792,8793,8794,8795,8796,8797,8798,8799,8800,8801,8802,8803,8804,8805,8806,8807,8808,8809,8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,8820,8821,8822,8823,8824,8825,8826,8827,8828,8829,8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,8840,8841,8842,8843,8844,8845,8846,8847,8848,8849,8850,8851,8852,8853,8854,8855,8856,8857,8858,8859,8860,8861,8862,8863,8864,8865,8866,8867,8868,8869,8870,8871,8872,8873,8874,8875,8876,8877,8878,8879,8880,8881,8882,8883,8884,8885,8886,8887,8888,8889,8890,8891,8892,8893,8894,8895,8896,8897,8898,8899,8900,8901,8902,8903,8904,8905,8906,8907,8908,8909,8910,8911,8912,8913,8914,8915,8916,8917,8918,8919,8920,8921,8922,8923,8924,8925,8926,8927,8928,8929,8930,8931,8932,8933,8934,8935,8936,8937,8938,8939,8940,8941,8942,8943,8944,8945,8946,8947,8948,8949,8950,8951,8952,8953,8954,8955,8956,8957,8958,8959,8960,8961,8962,8963,8964,8965,8966,8967,8968,8969,8970,8971,8972,8973,8974,8975,8976,8977,8978,8979,8980,8981,8982,8983,8984,8985,8986,8987,8988,8989,8990,8991,8992,8993,8994,8995,8996,8997,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,9053,9054,9055,9056,9057,9058,9059,9060,9061,9062,9063,9064,9065,9066,9067,9068,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,9139,9140,9141,9142,9143,9144,9145,9146,9147,9148,9149,9150,9151,9152,9153,9154,9155,9156,9157,9158,9159,9160,9161,9162,9163,9164,9165,9166,9167,9168,9169,9170,9171,9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196,9197,9198,9199,9200,9201,9202,9203,9204,9205,9206,9207,9208,9209,9210,9211,9212,9213,9214,9215,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9248,9249,9250,9251,9252,9253,9254,9255,9256,9257,9258,9259,9260,9261,9262,9263,9264,9265,9266,9267,9268,9269,9270,9271,9272,9273,9274,9275,9276,9277,9278,9279,9280,9281,9282,9283,9284,9285,9286,9287,9288,9289,9290,9291,9292,9293,9294,9295,9296,9297,9298,9299,9300,9301,9302,9303,9304,9305,9306,9307,9308,9309,9310,9311,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9398,9399,9400,9401,9402,9403,9404,9405,9406,9407,9408,9409,9410,9411,9412,9413,9414,9415,9416,9417,9418,9419,9420,9421,9422,9423,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9450,9451,9452,9453,9454,9455,9456,9457,9458,9459,9460,9461,9462,9463,9464,9465,9466,9467,9468,9469,9470,9471,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,9548,9549,9550,9551,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9588,9589,9590,9591,9592,9593,9594,9595,9596,9597,9598,9599,9600,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9616,9617,9618,9619,9620,9621,9622,9623,9624,9625,9626,9627,9628,9629,9630,9631,9632,9633,9634,9635,9636,9637,9638,9639,9640,9641,9642,9643,9644,9645,9646,9647,9648,9649,9650,9651,9652,9653,9654,9655,9656,9657,9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671,9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685,9686,9687,9688,9689,9690,9691,9692,9693,9694,9695,9696,9697,9698,9699,9700,9701,9702,9703,9704,9705,9706,9707,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9720,9721,9722,9723,9724,9725,9726,9727,9728,9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,9749,9750,9751,9752,9753,9754,9755,9756,9757,9758,9759,9760,9761,9762,9763,9764,9765,9766,9767,9768,9769,9770,9771,9772,9773,9774,9775,9776,9777,9778,9779,9780,9781,9782,9783,9784,9785,9786,9787,9788,9789,9790,9791,9792,9793,9794,9795,9796,9797,9798,9799,9800,9801,9802,9803,9804,9805,9806,9807,9808,9809,9810,9811,9812,9813,9814,9815,9816,9817,9818,9819,9820,9821,9822,9823,9824,9825,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9844,9845,9846,9847,9848,9849,9850,9851,9852,9853,9854,9855,9856,9857,9858,9859,9860,9861,9862,9863,9864,9865,9866,9867,9868,9869,9870,9871,9872,9873,9874,9875,9876,9877,9878,9879,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,9890,9891,9892,9893,9894,9895,9896,9897,9898,9899,9900,9901,9902,9903,9904,9905,9906,9907,9908,9909,9910,9911,9912,9913,9914,9915,9916,9917,9918,9919,9920,9921,9922,9923,9924,9925,9926,9927,9928,9929,9930,9931,9932,9933,9934,9935,9936,9937,9938,9939,9940,9941,9942,9943,9944,9945,9946,9947,9948,9949,9950,9951,9952,9953,9954,9955,9956,9957,9958,9959,9960,9961,9962,9963,9964,9965,9966,9967,9968,9969,9970,9971,9972,9973,9974,9975,9976,9977,9978,9979,9980,9981,9982,9983,9984,9985,9986,9987,9988,9989,9990,9991,9992,9993,9994,9995,9996,9997,9998,9999,10000]    },    yAxis: {        type: 'value'    },    series: [        {            name: 'Math.random()',            type: 'line',            stack: 'Math.random()',            lineStyle: {color: '#d14a61'},            data: [5,96,98,101,106,101,96,105,99,99,105,97,96,104,103,101,99,100,96,101,96,97,99,96,95,104,99,100,106,99,98,103,99,101,105,96,103,103,98,101,103,96,99,102,102,98,102,100,95,100,102,99,104,102,101,101,96,97,104,95,103,106,98,98,100,106,99,100,106,98,99,103,97,98,103,100,97,106,97,101,100,96,98,105,104,97,103,96,99,103,101,95,103,103,97,104,97,98,105,100,103,104,97,97,102,96,100,104,103,100,102,99,102,106,99,99,104,97,98,104,101,100,105,100,100,104,98,99,98,100,96,100,101,98,100,101,94,98,103,102,100,106,97,98,103,101,97,99,97,95,100,97,102,103,100,94,104,99,99,100,95,98,102,97,98,106,103,96,101,96,96,101,100,101,102,98,95,101,100,98,105,98,101,103,97,99,102,98,102,99,105,97,97,104,94,97,104,100,98,100,101,96,103,99,97,98,98,100,103,99,98,102,103,99,103,99,100,104,98,98,98,98,98,105,101,95,106,98,93,105,101,101,101,101,97,103,97,99,101,98,98,103,97,99,101,100,97,106,99,99,98,97,101,99,103,101,98,104,103,97,103,97,97,103,99,98,101,99,99,104,98,100,102,97,98,103,95,97,99,97,94,102,98,98,104,96,95,102,98,105,100,98,98,101,97,101,102,103,96,105,102,99,104,98,97,103,99,99,104,102,100,103,97,99,96,103,99,101,104,97,100,102,100,98,102,97,97,106,97,101,105,95,97,103,102,102,106,98,94,104,98,99,102,101,98,103,101,96,99,98,98,104,101,98,105,97,103,105,104,97,103,99,96,102,96,103,102,95,101,102,99,102,103,98,99,104,96,99,97,101,93,103,100,100,95,104,99,99,103,100,99,101,101,100,101,101,98,99,98,99,102,98,97,103,102,98,107,97,101,107,97,100,102,98,99,103,98,99,100,98,97,103,95,99,102,98,100,100,101,97,105,95,99,98,99,98,105,98,99,98,105,95,96,111,97,100,100,100,102,106,100,101,104,96,98,102,97,96,105,99,101,103,101,102,103,97,101,105,100,97,101,102,99,99,99,99,103,100,98,100,103,101,101,101,99,99,100,99,103,102,99,103,101,98,104,96,100,107,100,98,100,98,99,102,105,96,101,103,100,99,104,100,95,104,101,98,104,98,96,103,99,98,101,95,96,106,101,97,101,101,97,105,95,100,102,99,98,100,97,104,99,102,100,99,101,97,104,100,98,104,98,98,104,100,97,104,96,98,101,99,98,100,99,97,101,101,99,102,104,103,98,101,100,96,101,100,97,105,96,102,105,100,98,107,102,98,102,100,100,101,95,97,102,99,97,106,98,98,105,100,99,104,98,98,103,101,97,102,98,99,103,100,99,107,96,96,105,97,95,106,100,97,104,97,98,104,96,100,97,102,95,102,100,97,97,102,100,101,101,98,99,102,96,97,106,99,99,104,102,101,101,100,98,105,99,98,102,103,96,105,98,99,104,97,97,99,100,99,101,97,96,107,93,99,105,97,100,101,99,97,103,103,99,103,102,94,101,94,99,98,101,97,96,105,100,98,104,100,101,104,101,100,103,101,100,101,100,100,101,102,102,102,100,100,100,97,96,107,101,98,101,102,98,102,101,96,103,101,100,101,98,104,100,97,94,105,98,99,100,95,98,105,94,96,102,96,96,105,98,100,102,98,97,96,104,100,102,107,100,99,105,97,96,103,99,100,106,100,97,105,98,100,101,98,104,102,97,97,99,99,99,102,99,96,101,101,98,104,97,100,107,99,99,102,98,99,102,103,96,105,96,99,102,97,94,105,103,99,102,97,97,100,98,98,97,99,98,99,104,99,98,98,97,99,99,96,98,100,99,96,103,97,104,106,96,100,102,97,99,106,96,100,102,95,99,105,97,98,102,99,96,106,101,100,107,101,101,105,99,96,100,98,96,103,96,94,103,96,101,100,100,98,101,98,98,102,97,95,99,102,99,99,106,98,94,103,100,94,102,99,99,102,102,99,103,98,102,101,98,102,105,96,99,102,96,101,102,99,100,103,98,98,106,98,96,101,99,94,102,106,99,103,96,98,105,98,97,103,98,99,105,97,98,98,99,100,103,99,94,98,104,98,97,105,98,99,100,102,101,107,96,103,103,97,100,102,99,95,104,99,101,102,99,97,103,97,101,105,98,101,106,100,99,101,97,102,107,99,101,100,99,97,104,99,98,103,96,99,107,102,99,105,100,97,107,98,100,103,101,95,102,100,101,99,102,95,101,101,99,99,106,100,99,101,95,97,105,101,99,107,101,96,104,98,99,105,101,97,103,99,98,104,102,99,99,102,97,103,100,101,99,104,97,103,101,96,104,96,104,104,96,98,103,96,100,104,99,99,102,99,96,103,100,97,96,101,99,98,101,99,100,106,101,100,102,100,101,103,100,97,106,99,100,103,98,96,102,101,96,105,95,97,101,97,99,106,99,98,104,97,97,102,96,100,104,103,98,103,95,99,103,98,99,105,99,94,102,101,97,104,97,95,104,94,99,104,95,100,97,104,97,99,104,96,97,102,102,98,105,94,98,100,97,95,103,98,99,109,99,102,102,101,99,104,96,99,100,99,98,105,100,98,103,98,102,100,97,98,102,99,100,110,95,97,106,98,99,103,96,99,103,103,99,101,100,95,101,94,96,96,99,97,101,98,105,100,102,99,98,105,100,100,100,100,97,103,103,95,102,100,99,105,98,100,102,97,99,104,100,101,106,101,98,100,97,97,102,102,102,101,101,100,104,98,101,105,101,99,104,96,97,104,98,98,105,99,99,100,96,99,110,101,99,98,101,99,98,104,97,101,106,98,97,99,98,102,106,101,98,104,94,100,101,98,104,103,100,102,104,101,101,103,99,97,100,98,102,107,99,96,110,98,99,102,102,94,103,94,100,101,98,98,99,97,97,102,102,99,105,95,99,107,99,95,96,103,96,94,104,99,101,101,96,101,102,98,96,99,100,95,100,99,104,104,97,96,100,96,98,104,100,98,103,97,97,106,95,103,104,99,96,103,96,98,102,103,98,105,96,99,105,97,99,104,100,97,103,98,97,103,99,97,98,98,99,104,99,96,102,102,103,97,106,98,102,99,95,95,104,100,99,105,96,99,102,96,102,105,97,99,103,98,97,102,97,98,101,100,98,102,100,96,102,98,101,104,98,93,101,100,97,102,101,100,106,102,95,103,98,96,104,98,99,102,98,101,101,103,97,98,101,100,96,98,96,96,99,98,93,102,98,101,103,95,99,102,106,96,101,98,96,104,101,99,105,101,100,101,101,98,104,96,100,104,96,103,108,97,99,102,96,95,105,101,99,105,96,98,104,96,98,103,95,102,103,99,104,100,97,96,105,105,101,100,101,100,96,103,99,99,104,99,102,101,96,94,103,99,101,105,98,100,106,102,99,104,98,101,102,96,98,101,102,96,102,100,98,103,102,98,103,100,96,103,98,95,99,96,103,102,98,95,104,100,102,101,101,98,104,101,96,105,101,97,93,104,100,97,103,95,100,107,99,101,104,98,98,101,102,97,103,98,99,101,99,100,104,100,95,101,96,100,102,98,98,104,98,101,102,96,96,104,98,100,100,98,101,102,95,100,106,100,99,100,102,103,105,101,99,102,97,100,101,96,98,104,101,99,102,102,101,99,99,99,102,102,100,98,108,96,98,103,100,96,103,100,98,108,97,100,104,98,96,103,102,100,104,100,99,104,101,99,100,99,102,104,97,97,102,99,100,103,99,98,102,99,100,103,98,98,105,97,100,104,96,98,102,99,99,95,102,100,101,101,96,100,103,100,96,103,100,99,101,97,96,105,99,97,106,98,97,105,98,100,105,98,101,101,100,98,102,97,99,101,97,100,102,96,100,100,100,98,102,98,103,103,103,98,103,97,94,103,102,102,104,97,103,103,99,99,108,101,96,100,103,99,98,100,96,99,102,99,101,102,99,98,106,97,99,102,98,100,105,98,96,102,99,101,105,98,100,103,94,99,102,97,102,104,98,97,105,95,101,100,101,95,104,95,102,102,99,96,103,102,99,101,98,101,102,93,98,106,101,98,99,109,97,99,104,100,99,102,98,100,103,101,98,102,100,98,99,98,98,103,98,98,101,98,100,100,99,101,101,98,99,103,96,102,107,98,99,104,97,96,100,98,98,103,93,100,105,100,99,103,102,101,105,100,95,104,102,100,101,100,98,103,102,100,101,102,98,95,101,98,106,102,97,102,103,97,100,105,95,101,105,98,98,105,101,95,101,97,97,104,98,95,101,103,95,98,97,97,100,98,101,103,100,97,101,96,95,102,101,105,103,102,97,104,98,95,105,100,98,106,100,95,105,99,100,100,101,102,100,100,99,96,107,98,97,101,96,97,106,97,98,103,102,102,102,99,97,102,99,99,102,100,98,100,101,95,100,96,101,107,99,100,101,97,96,101,95,97,100,102,98,103,98,97,101,95,98,103,94,99,100,99,97,101,99,100,107,99,96,98,99,103,98,102,99,97,99,97,102,102,97,97,103,97,100,103,101,101,106,103,100,102,96,99,101,97,97,100,94,97,105,99,96,103,98,97,102,95,98,102,95,99,102,100,98,104,98,95,104,99,94,103,99,99,102,100,98,102,99,101,94,105,99,100,102,100,96,99,99,100,103,98,101,101,100,99,102,96,98,99,96,103,105,101,99,102,95,102,102,97,100,100,101,99,102,98,95,104,100,98,102,95,98,102,99,97,103,100,98,101,99,105,104,101,101,101,100,101,100,98,98,101,102,98,97,103,100,97,101,102,99,104,102,100,104,97,99,102,102,103,103,98,100,102,97,100,104,97,97,101,102,101,104,99,100,102,101,101,102,101,97,104,95,101,103,102,98,100,98,99,100,100,99,104,100,98,104,94,99,104,100,100,107,99,98,99,103,100,100,105,98,100,103,99,99,104,96,99,104,96,100,106,97,100,106,98,100,102,98,98,105,99,98,101,99,96,103,100,101,102,98,101,101,95,102,101,97,96,102,98,99,100,101,99,106,103,99,101,103,100,105,97,101,104,101,96,104,95,97,100,103,97,99,99,96,99,99,102,103,103,99,98,102,95,100,100,101,98,106,100,97,104,99,97,102,98,101,104,93,100,104,99,98,101,96,97,100,98,100,100,96,103,105,97,99,104,96,97,105,98,98,104,95,97,99,99,97,100,100,101,103,104,100,100,103,102,97,101,99,97,102,101,102,101,98,101,103,102,94,104,96,99,101,103,103,100,101,99,105,98,100,102,100,98,106,99,99,99,98,94,100,97,95,100,97,99,101,101,100,101,100,96,105,100,96,104,99,98,106,99,96,100,101,102,98,105,101,95,104,99,100,105,100,105,101,96,98,104,96,98,109,96,98,105,100,100,99,102,101,102,98,100,101,102,98,102,98,100,105,98,98,99,100,105,107,97,98,104,98,99,103,98,103,104,99,95,100,101,97,109,100,96,103,94,100,100,101,103,101,101,103,98,108,97,101,103,96,95,104,103,101,105,95,105,103,98,102,102,94,97,102,99,96,102,97,97,103,98,97,107,101,96,99,100,101,105,94,99,101,94,96,105,99,99,100,97,101,104,97,96,100,100,94,101,100,103,103,96,96,94,102,99,102,102,97,98,100,98,99,104,99,100,105,97,98,101,101,100,103,99,100,101,99,98,105,99,103,104,99,97,105,99,98,104,95,93,106,97,99,106,96,103,101,101,97,103,99,100,100,95,97,104,100,99,103,97,100,99,97,101,102,100,99,100,102,98,97,101,97,98,104,97,100,101,98,99,103,100,100,101,94,98,102,97,100,103,101,101,105,96,103,100,101,97,101,101,98,103,101,99,102,99,97,103,100,97,100,97,97,101,95,95,101,100,102,101,97,99,104,103,97,100,100,96,98,103,102,98,107,99,97,106,96,99,98,102,96,104,103,102,102,96,100,99,98,97,107,98,99,102,97,100,102,96,99,100,100,98,106,103,95,101,97,100,107,101,100,100,101,99,102,98,98,104,99,101,100,95,95,103,99,104,104,101,96,102,104,101,97,104,100,97,101,96,100,103,96,97,104,98,102,105,96,100,103,96,97,101,98,94,106,100,97,101,96,99,106,97,98,105,97,101,105,97,99,107,95,96,106,97,97,103,94,101,105,101,101,101,99,97,103,101,97,103,99,98,101,98,102,99,103,96,98,101,98,97,101,100,99,103,97,98,99,98,101,101,100,97,103,100,95,103,100,99,105,98,97,105,103,102,103,99,97,100,100,96,100,100,97,108,98,104,105,98,98,102,98,101,102,98,103,104,97,97,103,103,97,103,98,101,101,102,100,98,99,98,98,108,100,96,106,97,102,105,96,99,105,102,96,100,99,98,104,100,99,103,98,96,105,101,99,101,102,97,103,99,101,99,98,99,104,98,97,102,102,98,102,96,101,102,99,97,101,101,100,103,96,95,107,98,100,102,99,101,96,106,100,98,103,100,96,104,99,99,102,97,99,101,98,98,101,99,96,104,99,100,104,101,101,103,98,100,101,95,99,106,99,98,104,99,99,105,99,103,106,95,101,103,100,94,101,95,102,103,99,103,101,100,98,105,97,98,102,98,100,99,103,96,99,103,101,101,102,97,98,101,100,94,100,104,97,105,95,100,103,97,96,103,96,98,103,100,98,104,98,101,104,96,99,103,101,95,99,101,98,108,101,101,107,96,99,103,101,99,102,101,100,102,102,97,104,100,94,103,97,102,101,96,99,97,105,99,98,105,98,98,104,98,96,104,99,103,100,100,95,102,95,96,100,96,97,99,100,98,106,99,102,106,102,99,104,96,102,104,98,98,107,97,101,107,99,100,103,96,95,99,101,104,102,99,99,102,98,101,105,97,103,103,99,98,102,103,96,94,102,98,100,103,96,98,105,97,95,104,96,97,101,101,98,103,98,96,101,95,100,104,104,96,105,101,98,101,98,98,102,101,101,104,98,101,102,97,99,105,101,98,102,98,99,104,99,99,99,97,100,104,97,100,102,103,100,103,100,100,98,101,100,96,104,97,98,104,95,97,102,103,99,105,98,99,98,97,98,99,97,93,104,99,98,102,98,96,103,95,98,100,97,97,104,98,97,105,101,96,104,95,98,99,103,97,103,100,94,102,99,101,101,101,97,103,99,103,102,104,101,102,107,99,97,104,94,96,102,96,96,98,100,98,103,99,99,101,99,97,100,96,94,103,99,98,104,101,100,101,96,99,102,96,98,105,98,98,105,100,93,106,99,98,105,101,98,103,95,97,101,99,101,102,97,101,100,102,97,101,96,99,97,100,101,101,104,101,95,106,100,97,103,95,96,107,99,98,98,100,98,104,99,98,101,101,96,103,97,99,104,98,96,102,106,99,106,96,97,103,100,101,98,100,97,104,98,97,101,101,96,103,102,100,103,98,102,102,97,96,104,103,100,104,99,98,97,103,101,99,103,95,98,109,101,98,105,98,99,108,99,100,104,96,100,101,103,100,108,97,94,104,96,97,102,103,98,102,99,97,99,99,102,103,99,102,104,96,101,104,103,99,103,100,100,102,99,101,102,98,101,102,96,101,105,98,98,104,97,100,98,105,95,104,98,100,96,101,100,97,106,100,98,102,100,96,99,105,95,101,95,98,104,98,98,106,102,100,108,94,101,107,98,99,101,100,99,107,95,98,100,98,100,101,98,97,102,96,99,102,101,105,102,97,99,100,96,100,102,99,101,97,107,95,97,107,94,100,102,100,98,100,102,100,101,99,96,102,94,96,105,100,96,104,103,99,100,97,101,104,97,102,102,101,98,100,100,96,103,99,96,103,104,102,104,99,102,101,100,99,101,98,97,100,105,99,102,98,99,106,99,97,100,96,98,101,108,96,98,105,100,100,104,96,96,106,102,100,99,99,96,101,96,96,101,95,94,104,98,99,103,99,96,104,97,100,103,95,101,103,97,103,102,99,100,100,100,98,104,99,97,103,101,101,105,102,98,103,95,100,103,97,101,106,96,98,104,104,97,100,106,100,101,101,98,99,103,100,96,107,97,101,101,98,96,108,103,99,102,97,99,103,102,97,103,103,96,102,95,97,104,100,103,102,98,96,103,97,100,102,103,101,102,99,100,106,99,100,104,95,96,106,102,99,103,100,99,105,97,101,98,100,95,101,100,98,99,100,95,98,101,100,99,103,95,99,104,101,98,99,99,95,99,97,101,105,99,94,104,100,98,101,94,97,104,95,99,104,102,97,101,95,95,105,97,101,101,98,98,101,101,96,105,100,99,103,98,95,104,98,102,96,104,97,96,106,99,97,105,98,102,101,101,98,104,99,97,100,97,100,101,101,101,103,101,101,101,99,99,105,100,95,97,101,99,103,100,95,104,100,94,101,99,101,100,103,97,104,97,98,99,98,97,104,96,97,100,98,96,105,99,100,99,98,98,97,102,100,99,105,103,98,105,98,97,103,100,98,103,100,99,105,98,99,102,96,100,104,96,97,100,97,96,100,97,97,106,97,96,102,99,103,102,100,98,100,97,99,101,105,97,104,101,98,105,96,96,101,100,100,105,101,99,99,97,98,96,101,99,102,105,97,98,100,99,99,102,96,97,105,98,101,106,94,100,102,101,101,107,98,97,104,97,100,101,98,99,102,99,97,99,98,99,107,102,98,106,100,103,104,103,97,101,100,96,105,96,100,103,96,99,102,98,101,103,97,99,103,94,97,95,103,94,103,102,97,95,104,100,97,103,98,100,101,103,99,100,101,99,100,98,100,102,96,97,103,102,99,105,98,97,105,98,102,103,101,98,102,98,98,102,102,98,104,93,99,104,99,98,100,99,98,105,95,98,97,100,100,104,99,97,99,106,95,95,108,98,99,101,101,102,106,100,101,105,95,98,101,99,95,103,101,102,103,104,100,103,96,98,105,100,99,105,104,99,100,98,99,107,98,102,100,101,100,102,99,97,101,98,99,105,101,97,104,101,98,104,94,100,107,101,95,101,97,99,100,105,97,100,105,98,101,105,100,98,102,99,99,103,98,98,102,99,98,103,96,98,105,100,97,98,101,97,103,98,100,102,102,99,101,98,102,100,103,99,102,102,99,104,99,98,105,98,98,104,99,98,104,98,98,100,99,96,102,99,98,98,101,101,101,107,101,97,101,100,95,100,101,100,102,96,100,103,100,99,107,99,97,100,101,98,103,95,97,102,96,96,108,99,98,107,99,98,101,98,98,104,101,98,102,97,101,102,100,98,105,98,95,104,96,95,104,101,96,104,97,99,104,95,97,97,102,98,102,104,98,97,103,100,98,103,98,99,101,97,95,108,99,100,105,102,102,100,100,100,105,97,100,103,102,98,103,97,100,103,96,100,99,102,100,101,100,97,108,95,99,105,97,100,103,97,97,103,102,99,103,100,94,102,93,97,97,99,96,98,102,101,100,105,101,102,105,100,99,103,101,98,102,100,99,102,102,103,101,98,99,99,97,96,107,100,100,102,101,96,102,101,97,102,102,102,101,100,102,100,97,95,103,100,101,101,97,98,106,94,97,104,98,97,105,98,99,103,99,98,95,103,99,101,103,98,99,108,98,96,101,98,99,108,103,97,105,98,100,100,97,103,102,97,100,101,100,101,103,98,95,101,101,99,104,99,97,106,100,98,103,99,98,101,100,97,103,97,100,101,95,98,104,101,101,102,96,99,100,96,97,97,100,96,98,104,98,98,100,96,99,101,98,97,101,99,96,103,97,101,104,97,98,100,96,99,105,98,99,101,94,99,107,98,99,104,99,96,107,98,100,107,101,100,106,97,98,103,96,96,103,96,94,101,97,100,101,101,99,99,98,98,103,96,95,100,101,100,100,108,97,97,102,98,97,100,99,100,103,98,99,102,96,103,102,99,100,105,98,97,101,96,99,102,98,98,103,99,97,105,99,95,101,100,93,103,104,100,105,98,101,105,101,95,102,97,97,106,98,98,99,100,101,104,100,97,100,103,99,98,101,99,99,99,98,100,106,97,102,101,97,100,102,102,96,103,97,99,103,98,97,105,99,98,102,98,99,107,99,99,103,93,102,108,98,100,102,97,96,105,100,99,103,95,99,107,99,98,104,97,98,107,100,102,101,98,98,105,102,101,101,102,95,99,100,100,99,105,100,99,100,96,96,105,100,101,105,98,98,105,101,100,106,100,99,104,100,98,101,103,100,99,103,97,102,101,99,102,100,96,105,100,97,103,95,101,103,97,95,101,98,101,105,101,96,104,100,96,106,101,97,93,100,100,97,102,99,99,107,101,100,103,102,100,100,101,96,104,100,100,100,99,96,103,99,95,104,95,98,101,98,99,108,98,100,104,97,96,101,97,99,103,102,97,104,95,97,106,97,99,105,102,95,104,101,99,104,95,96,103,93,98,104,99,99,101,105,98,97,104,99,100,101,102,99,105,94,100,102,99,95,103,99,98,109,97,103,104,102,98,104,99,100,102,98,99,107,101,97,102,98,103,102,97,98,102,100,101,105,97,97,105,99,99,103,95,99,103,101,99,100,95,97,101,95,96,97,98,96,101,100,100,99,101,100,96,104,98,98,100,99,98,102,103,96,105,98,96,105,97,101,103,98,99,103,101,103,105,97,98,101,99,98,101,100,100,101,101,101,104,96,101,104,104,99,105,96,99,102,98,99,106,98,100,102,96,99,110,101,98,98,102,100,98,104,98,102,104,97,98,102,99,100,106,100,98,102,96,98,102,99,101,104,100,100,104,100,101,104,99,97,101,99,103,105,100,96,109,94,101,103,101,94,102,94,101,101,98,97,101,98,97,101,100,99,104,93,100,107,99,96,98,106,96,95,103,98,102,101,95,101,103,99,96,100,101,96,98,98,101,103,97,96,99,95,100,102,100,97,102,99,97,105,95,104,104,98,98,104,96,101,101,98,97,104,94,100,107,99,98,102,99,100,104,100,99,102,99,99,98,100,99,103,103,98,102,99,102,96,105,98,103,100,95,97,103,99,98,106,96,101,104,95,101,104,98,97,103,99,98,102,97,95,99,101,99,99,99,96,102,96,101,103,99,93,102,99,97,102,103,99,104,101,96,105,99,97,104,101,99,103,99,99,101,102,100,98,98,102,99,100,96,97,102,99,93,100,98,100,103,96,99,103,105,100,103,97,97,105,98,99,106,101,101,102,99,97,102,94,100,106,99,102,104,96,97,103,96,95,103,102,98,104,97,97,102,97,98,103,93,102,102,97,104,100,99,98,104,103,98,101,100,101,97,101,100,97,101,98,99,103,96,95,105,100,102,105,99,103,108,104,98,103,96,99,104,96,98,101,99,97,102,97,97,102,100,98,102,98,98,102,97,95,102,98,103,101,97,95,103,100,99,102,101,99,104,100,96,103,101,97,94,106,99,99,99,95,100,103,100,100,104,98,97,103,102,97,105,96,102,100,98,100,105,99,96,101,96,103,101,98,97,101,98,101,99,96,96,104,99,100,101,98,101,103,96,97,105,100,99,100,100,104,105,100,99,102,96,100,101,97,96,103,102,100,101,106,98,99,99,99,102,102,101,100,107,97,98,102,100,98,103,101,97,106,97,99,103,98,96,103,102,99,105,99,99,105,99,99,99,100,101,105,94,100,100,100,100,104,99,101,103,99,103,105,100,98,103,96,99,103,97,98,104,99,99,97,102,100,98,103,97,98,103,100,96,104,98,101,103,96,98,105,99,97,105,99,97,106,99,101,102,97,101,101,101,100,103,98,100,102,98,101,99,96,101,100,99,97,102,99,103,103,102,97,104,98,96,100,103,101,102,96,100,102,99,99,109,99,97,100,103,97,98,101,96,100,99,99,102,103,99,98,105,94,98,100,100,99,105,99,96,104,99,98,104,97,99,104,94,100,101,98,100,104,97,96,103,97,100,99,96,96,105,96,102,101,98,96,106,101,95,102,97,100,101,96,97,106,100,100,100,107,98,99,103,103,99,101,99,102,103,99,100,102,101,99,99,100,98,106,98,100,103,98,101,100,99,100,103,97,99,102,99,101,106,99,100,102,96,96,98,95,96,100,97,101,103,100,100,105,101,103,105,102,95,106,102,98,103,99,97,102,103,99,100,101,99,95,100,101,104,102,98,100,103,97,98,104,95,101,107,97,98,105,101,96,102,97,99,104,99,97,102,103,98,98,100,100,103,97,100,103,98,100,102,97,96,104,101,101,100,100,98,105,100,96,102,101,99,109,99,97,104,98,99,97,102,102,100,100,101,97,108,98,98,100,97,97,104,99,99,105,98,103,102,100,99,102,97,99,102,101,97,100,100,95,101,98,100,106,101,99,101,97,97,101,95,98,100,99,96,104,99,97,101,95,98,104,97,100,101,97,97,101,99,98,104,97,95,94,102,102,97,102,98,98,98,99,103,102,99,98,104,97,100,103,102,101,106,101,102,101,96,98,102,98,98,99,92,97,105,98,96,105,98,96,106,98,98,102,95,102,102,102,98,104,97,97,104,97,96,102,100,100,101,101,98,100,100,102,97,104,98,101,100,98,96,99,98,99,102,96,101,101,98,101,103,96,95,100,94,102,105,100,101,102,100,102,103,97,100,97,101,98,101,98,96,106,101,97,103,97,99,103,100,97,101,101,98,99,96,103,102,99,100,101,100,99,103,100,97,101,100,98,97,104,100,97,105,98,98,103,100,101,104,99,97,102,101,103,102,98,98,101,97,100,104,98,98,100,97,101,103,97,99,102,99,102,104,102,94,103,98,102,106,101,102,101,98,99,101,100,99,105,99,97,103,95,97,102,100,100,105,98,98,100,106,103,99,106,100,100,104,97,100,106,95,98,105,96,101,106,94,100,104,98,101,102,97,97,104,98,98,102,96,95,106,100,101,103,97,102,102,96,102,102,96,95,102,98,100,103,98,100,106,103,102,102,104,96,102,99,99,103,103,98,102,95,99,99,102,94,100,101,96,98,102,103,102,101,97,99,101,95,99,102,103,98,105,99,97,102,100,98,102,99,100,103,96,102,103,99,97,102,96,97,98,101,98,104,98,103,107,97,98,105,99,100,105,98,99,104,95,99,102,101,96,102,99,102,103,101,101,100,102,101,97,107,101,98,103,101,104,103,95,100,105,102,96,102,99,100,102,102,99,101,100,98,106,96,100,100,101,95,106,98,98,99,98,96,101,98,93,99,97,99,101,98,98,100,99,96,104,100,97,104,98,96,106,99,99,102,97,100,95,105,101,96,104,98,98,108,99,102,103,96,97,102,97,98,106,96,97,105,101,99,100,102,100,105,98,102,102,99,97,102,100,100,104,99,99,99,100,107,107,97,99,102,100,99,102,98,102,103,97,101,100,101,98,109,99,97,101,95,97,101,100,100,102,101,103,98,106,96,101,103,99,96,104,103,100,106,95,101,101,97,100,101,94,96,103,99,96,101,98,98,103,98,96,105,100,96,98,102,100,107,96,100,103,94,98,105,98,100,100,97,101,103,96,96,102,101,95,103,97,102,104,96,95,95,103,98,100,103,95,99,101,99,98,102,101,102,102,99,98,100,98,98,100,99,99,101,99,101,106,100,101,104,99,98,106,98,99,103,99,93,108,97,98,105,98,102,102,100,96,100,100,102,101,96,99,103,97,100,104,98,101,102,97,102,103,101,99,97,103,99,98,103,95,96,105,97,97,102,96,98,102,100,98,102,95,98,101,96,102,102,101,97,104,98,101,100,101,98,102,101,101,103,100,99,105,99,96,103,101,98,100,96,99,102,97,96,101,98,101,103,99,98,103,104,102,103,100,97,99,102,103,98,107,99,98,104,96,98,98,102,98,106,99,100,100,97,100,99,98,97,105,97,98,99,96,99,101,94,101,99,100,97,106,101,95,103,99,97,108,99,101,99,102,96,101,99,96,102,98,101,104,95,96,104,100,105,103,103,100,103,106,99,96,101,99,97,101,97,99,101,97,97,103,98,99,103,96,99,102,97,98,102,99,94,107,103,97,102,94,99,106,95,98,107,97,99,105,97,96,108,95,96,107,97,97,102,94,97,105,99,101,100,99,99,103,103,98,102,97,99,97,97,99,101,105,96,97,102,102,97,103,99,98,104,99,98,99,98,99,103,99,97,103,101,96,101,100,100,106,97,97,103,105,100,104,99,97,100,101,98,100,98,97,108,98,103,102,98,97,102,98,102,101,100,103,103,97,97,103,103,100,103,97,100,101,101,100,99,101,94,99,109,101,97,106,99,99,104,97,97,107,102,97,99,100,97,102,98,96,105,102,96,105,104,100,102,100,96,101,98,101,99,100,102,105,97,99,103,101,97,102,97,99,102,101,96,103,98,101,102,96,98,107,98,100,103,98,100,98,107,98,97,102,99,97,107,100,99,105,98,99,103,100,95,100,100,95,103,97,98,105,101,99,102,101,99,107,94,99,107,99,99,102,98,100,106,99,105,106,95,102,101,100,95,102,96,99,102,97,103,101,99,97,103,93,99,103,99,98,99,104,95,101,103,97,99,102,97,99,101,102,96,102,103,97,102,96,96,104,97,96,103,96,100,101,97,98,102,97,102,102,96,98,102,100,94,100,101,97,106,101,100,105,96,100,103,103,97,101,100,101,100,100,98,103,101,96,103,97,101,102,98,100,101,106,100,98,105,99,98,103,96,97,106,101,102,101,101,95,101,95,96,99,96,96,103,102,99,106,99,101,104,102,99,106,96,102,104,99,98,102,95,99,105,100,96,103,99,95,101,102,102,102,100,99,100,97,99,104,96,102,105,97,99,102,105,96,97,105,99,101,103,97,98,105,97,95,107,98,99,100,99,100,102,101,96,102,95,99,104,102,95,102,103,97,104,97,99,103,101,105,104,98,100,102,97,99,103,101,99,103,98,100,105,99,98,100,97,99,102,98,101,102,104,101,102,98,99,97,100,96,101,102,98,98,103,95,97,103,101,100,105,98,100,101,100,98,99,99,95,103,98,100,104,99,96,102,97,100,101,97,97,102,97,97,106,100,95,101,96,95,101,101,97,102,98,95,102,101,102,101,100,98,103,98,101,102,102,102,100,105,98,97,103,94,97,103,99,97,98,100,97,104,102,97,100,98,102,102,99,95,103,101,98,104,100,100,103,96,99,100,98,99,104,99,95,105,98,93,107,99,100,104,102,97,101,95,97,100,97,97,103,97,100,100,100,98,103,98,97,97,98,101,101,104,102,95,106,102,98,103,96,95,105,100,97,98,101,99,104,97,99,102,100,98,103,95,99,102,97,95,103,103,98,105,96,96,101,99,103,100,97,98,103,98,101,101,103,97,104,100,99,103,100,99,103,100,97,104,102,100,102,97,98,96,102,100,101,103,95,98,103,100,96,104,98,98,105,97,101,104,95,98,103,101,100,108,99,95,104,97,101,103,102,99,102,98,96,99,100,100,102,100,100,105,97,102,105,105,99,104,100,99,102,97,102,103,94,101,101,96,101,104,98,98,104,97,101,98,104,94,103,98,100,94,100,99,98,104,101,100,101,101,99,101,102,95,101,95,98,103,98,99,103,103,98,109,97,102,107,96,99,102,99,99,107,97,99,99,98,98,103,96,99,101,96,101,103,101,99,104,94,101,99,96,99,106,99,101,95,107,95,95,109,93,102,102,101,98,104,101,100,103,98,97,101,94,96,106,98,99,104,103,101,100,97,102,106,99,99,100,104,97,98,100,98,103,98,97,101,104,102,101,100,100,101,100,100,104,103,98,101,106,100,105,98,98,108,101,97,101,98,99,101,105,96,100,104,100,99,104,97,95,105,100,97,101,95,96,102,98,96,101,94,94,104,99,97,100,98,97,105,96,102,103,97,100,103,95,105,100,100,100,101,99,98,106,100,97,103,101,100,106,99,98,102,95,98,102,99,100,101,98,96,102,104,98,101,105,102,100,100,99,98,101,99,97,105,97,102,104,99,95,109,105,99,103,98,100,102,100,98,104,101,96,105,97,98,104,100,102,103,98,96,101,99,99,101,102,101,103,101,97,106,96,99,103,98,96,106,100,99,105,97,98,103,96,100,97,100,95,101,100,97,98,102,99,98,100,99,100,103,96,97,106,99,100,100,102,99,100,98,100,107,98,94,104,101,95,100,96,100,103,97,98,101,103,98,101,96,96,106,95,101,104,97,99,100,101,97,102,104,100,103,102,95,100,96,100,97,103,97,97,104,100,99,106,100,101,103,100,99,103,98,101,102,97,101,100,101,100,101,101,101,100,97,97,106,100,96,100,103,99,102,101,96,105,102,98,102,101,103,99,99,95,104,97,99,101,95,97,107,94,97,101,97,96,105,99,99,99,98,96,96,103,100,99,105,99,99,105,96,98,104,99,99,105,99,98,105,99,100,102,96,101,104,98,96,99,101,97,102,97,97,103,98,99,104,97,100,106,101,101,101,98,99,102,105,97,105,99,98,103,96,94,104,101,100,102,100,98,100,98,98,96,101,99,100,101,99,96,100,98,97,100,98,97,104,97,99,104,95,100,104,99,102,106,96,98,104,95,100,101,96,98,104,98,98,100,100,97,107,101,98,107,103,101,105,100,96,103,98,96,103,95,100,102,96,97,102,99,97,102,98,98,104,96,97,98,103,96,104,106,97,95,102,101,95,102,101,100,100,101,99,101,100,100,99,99,103,103,96,98,102,97,102,102,98,98,105,98,99,104,100,96,101,99,94,100,104,99,105,94,98,104,99,97,102,100,98,104,96,99,97,101,98,104,99,96,99,104,97,94,108,98,100,100,100,101,107,97,102,103,96,99,102,100,96,102,100,102,102,102,98,101,96,98,106,99,99,106,103,99,101,96,103,105,99,101,100,99,99,101,100,99,101,97,100,105,103,99,104,100,98,104,97,101,105,101,95,101,96,100,98,104,96,102,102,99,98,108,101,98,103,95,98,103,99,98,106,101,97,104,97,100,103,99,96,101,100,99,103,97,100,100,103,96,103,99,102,100,104,97,102,100,98,104,96,98,106,96,99,105,98,102,105,98,98,103,99,96,101,99,96,98,101,99,99,103,100,98,104,102,100,100,100,102,102,99,98,106,99,98,108,101,98,102,101,97,105,95,97,101,96,98,105,99,98,104,97,94,102,97,98,105,100,99,103,96,101,103,97,98,104,99,95,104,99,96,105,99,95,103,94,99,104,96,97,97,102,98,100,104,97,97,103,102,97,103,96,99,99,98,94,105,97,99,107,101,102,100,101,101,105,95,99,101,102,97,105,99,99,103,95,99,100,101,100,102,101,99,108,96,98,107,98,101,101,95,98,103,104,101,103,100,95,101,94,97,97,100,97,101,100,103,100,105,98,100,105,102,101,102,101,98,103,100,95,102,99,102,103,97,99,101,97,98,104,99,101,103,99,96,101,99,97,101,102,102,102,101,100,103,96,100,105,101,99,102,97,97,106,94,97,106,98,99,102,97,102,106,98,98,95,103,98,99,103,98,101,105,99,98,100,98,102,108,102,99,104,97,99,100,98,102,103,98,100,103,101,102,102,98,96,101,100,99,107,102,97,108,98,98,102,101,94,101,96,101,101,97,98,100,96,98,105,100,99,104,95,99,106,100,97,97,100,96,96,104,99,101,102,95,100,101,99,96,100,100,94,102,99,102,103,96,96,100,97,99,102,99,98,101,95,98,107,99,101,103,97,97,105,99,99,104,103,98,104,96,99,103,96,97,104,100,93,101,99,99,102,101,98,99,99,99,106,98,95,103,101,101,97,107,96,99,102,98,95,102,100,98,104,97,98,102,97,102,104,98,100,104,97,98,101,95,98,100,98,99,102,98,97,102,99,98,100,97,92,105,102,99,102,100,100,106,103,95,103,97,96,104,99,97,100,100,102,99,99,97,99,102,99,98,99,99,96,99,99,97,105,97,100,102,95,99,100,103,96,102,99,97,104,101,99,106,101,99,102,99,100,106,95,98,105,95,103,107,98,99,101,98,94,105,100,98,103,95,97,106,95,98,105,96,100,104,99,103,100,96,97,105,103,100,101,102,99,96,101,100,100,104,99,98,100,95,96,104,99,100,104,99,100,105,102,102,105,100,101,103,100,96,102,103,97,99,102,97,101,102,98,103,100,96,104,101,96,101,95,102,104,97,95,99,98,102,102,101,97,104,99,97,107,100,95,93,102,99,98,103,95,100,108,101,101,104,102,100,101,101,97,103,99,102,100,98,98,102,101,94,104,96,97,102,99,98,106,98,101,102,97,95,100,97,103,104,100,99,102,94,98,106,98,101,104,103,97,104,100,100,101,98,98,102,95,97,105,100,98,102,104,100,97,104,100,101,103,98,100,109,95,98,103,98,96,103,98,97,108,97,99,105,101,97,102,101,102,105,100,98,108,102,99,102,98,104,104,96,100,102,99,100,103,99,98,104,99,99,106,97,99,103,97,101,102,94,97,102,97,96,96,98,97,102,100,98,100,100,100,95,103,100,99,101,100,95,103,103,95,105,98,96,103,98,100,104,98,99,103,101,101,105,97,99,100,97,100,102,98,99,101,101,98,103,97,102,104,105,97,103,98,97,102,98,99,105,97,103,102,98,98,109,102,97,101,101,101,99,102,98,99,103,99,99,100,99,99,106,101,99,103,95,100,103,99,100,104,99,102,106,97,101,102,96,99,102,99,103,102,100,96,106,95,99,100,100,93,103,95,101,99,97,96,102,102,96,99,99,99,104,93,98,107,100,98,98,108,98,98,102,98,102,101,95,100,103,98,95,101,102,97,99,99,101,103,98,97,100,96,101,101,100,99,102,98,98,104,96,102,107,97,99,105,96,96,100,97,98,102,94,101,105,99,100,103,102,100,105,100,98,102,100,101,99,100,98,102,103,99,101,101,101,96,102,98,104,101,96,99,104,98,99,107,96,101,106,97,100,106,99,95,100,96,99,101,99,95,100,101,96,99,98,97,100,96,101,104,99,95,103,97,97,103,101,101,105,101,97,103,98,97,105,100,99,104,97,99,102,100,100,98,101,101,100,99,96,96,104,99,95,102,97,97,103,97,100,102,103,102,104,99,97,105,99,100,105,100,102,100,100,96,100,95,101,106,98,99,103,95,97,103,95,97,101,101,98,105,97,96,103,95,96,104,94,100,101,97,101,100,97,100,104,101,98,99,98,102,98,101,99,98,99,98,102,101,98,95,104,98,100,103,100,103,107,103,100,102,97,98,102,95,97,101,98,97,102,97,96,102,100,97,103,96,99,102,96,99,101,100,103,104,99,95,103,99,95,102,102,98,102,100,97,102,101,99,93,106,100,100,102,97,98,101,100,99,103,99,99,102,102,98,102,96,100,100,95,100,106,101,97,101,95,102,102,97,100,101,100,99,100,96,96,103,99,99,101,96,99,104,98,98,105,101,100,100,100,105,104,101,101,102,97,100,102,98,97,104,102,100,99,104,98,96,98,101,102,103,101,101,105,97,99,103,101,103,102,98,97,104,98,98,105,98,95,103,102,100,106,100,101,104,102,99,100,101,101,104,94,101,102,100,98,102,99,100,101,99,100,107,100,98,105,94,99,104,98,100,108,99,98,98,102,99,98,103,98,100,103,100,98,103,96,100,104,96,99,106,100,97,105,98,99,104,98,101,101,98,101,101,102,98,105,100,100,101,99,102,99,96,100,99,98,97,100,98,100,101,101,99,107,101,100,100,103,101,105,97,100,104,101,96,107,100,97,100,102,98,99,101,97,99,98,101,101,103,99,99,103,94,99,100,102,100,104,100,96,104,99,98,102,98,98,104,92,101,102,98,100,102,95,96,101,97,99,100,96,99,104,97,100,102,97,96,104,102,97,103,97,99,99,98,98,102,100,102,102,107,97,101,102,104,96,100,99,97,103,99,101,101,99,100,101,99,96,106,97,98,102,101,104,101,99,99,104,97,98,101,98,100,108,100,99,102,97,96,99,97,96,101,97,100,102,103,100,102,97,101,106,102,97,105,101,97,103,99,98,100,101,100,98,101,100,95,99,100,100,101,99,102,101,96,96,104,95,100,108,97,100,103,102,100,102,100,99,103,100,97,102,102,98,100,100,100,105,98,96,102,101,103,102,97,97,103,99,99,101,98,101,105,100,97,101,102,100,109,102,95,102,96,99,99,101,104,101,100,102,100,108,97,99,103,97,97,103,100,103,106,97,105,102,98,101,101,94,98,101,99,95,102,99,95,101,99,100,104,102,97,100,99,101,104,95,97,100,95,96,106,98,100,101,97,101,103,97,98,100,98,95,102,100,99,103,98,97,95,102,99,99,105,96,97,100,99,102,103,100,98,103,95,99,103,100,98,105,99,101,101,97,97,102,98,102,102,94,97,103,97,97,104,94,96,105,97,100,103,94,104,104,101,97,105,98,98,104,97,95,104,101,101,102,100,97,99,98,103,100,101,100,99,102,99,98,99,97,98,102,97,100,100,99,99,103,99,96,100,93,102,104,99,101,102,101,102,105,95,101,98,100,97,101,98,96,103,102,96,103,99,98,103,100,95,99,98,96,99,97,99,102,99,99,101,97,99,103,100,98,100,99,98,98,105,102,98,107,100,96,105,99,99,100,99,98,102,102,103,103,97,99,100,98,99,105,98,98,102,96,102,100,96,100,103,99,98,106,102,95,101,97,100,106,100,100,101,98,98,101,99,100,104,99,98,102,94,95,104,99,101,104,101,95,102,106,103,99,104,100,97,104,95,101,105,94,101,106,98,102,106,95,101,103,98,100,103,95,96,105,98,99,101,95,97,105,98,98,104,96,101,102,98,100,103,94,95,104,97,99,102,96,100,105,103,102,102,104,98,102,100,97,103,100,97,102,97,99,97,103,95,99,101,97,98,102,101,101,104,98,98,101,97,99,102,104,96,103,98,96,102,101,97,105,98,98,104,100,101,104,100,96,103,99,97,100,100,98,107,98,103,105,98,100,105,98,101,103,96,103,104,95,97,103,101,98,101,98,100,103,100,101,99,102,100,96,108,102,99,105,98,103,103,97,100,105,102,97,102,99,98,105,101,99,103,99,97,105,98,102,99,101,96,104,100,98,99,97,99,103,98,94,100,98,100,102,98,99,102,98,96,102,101,97,105,95,95,106,98,101,102,98,100,95,106,99,98,103,99,98,104,100,100,102,97,98,102,99,98,102,98,96,105,100,99,103,101,100,105,96,100,102,97,98,101,100,99,103,100,99,103,100,105,105,97,100,103,99,95,101,96,102,103,97,101,99,101,97,108,100,99,102,96,100,101,101,98,101,100,105,100,106,97,100,101,100,94,104,103,98,106,95,99,102,97,99,103,96,96,103,99,94,103,97,101,105,98,95,103,100,96,99,101,98,108,99,101,106,95,99,102,98,101,100,97,101,102,100,97,104,101,95,103,96,101,103,95,98,96,102,99,97,104,97,99,102,99,97,103,99,101,102,100,98,101,96,98,100,98,98,100,99,100,105,100,101,104,100,101,105,97,100,105,99,96,106,96,99,107,99,101,103,99,96,100,98,105,102,98,100,103,98,101,105,97,101,103,97,100,103,101,96,94,102,98,100,102,95,98,104,96,97,104,96,96,102,101,98,103,97,97,100,97,102,104,105,98,105,101,98,100,98,99,102,101,102,101,100,99,102,98,97,104,102,99,100,96,98,103,98,97,100,97,99,101,98,97,104,104,101,103,99,98,99,103,102,98,106,99,97,103,96,95,100,104,99,105,98,98,99,98,101,99,97,97,104,98,100,101,95,97,102,94,99,101,96,96,104,99,96,106,101,97,105,97,99,99,103,98,102,99,96,102,100,101,101,98,97,103,98,103,102,105,100,102,108,98,98,102,96,96,100,97,98,100,98,97,102,99,98,103,97,100,100,97,96,102,100,96,105,102,99,102,95,99,102,94,100,106,96,98,106,99,96,109,98,96,107,101,97,102,96,97,103,100,100,102,97,99,101,103,98,101,98,99,97,99,102,99,105,98,96,102,100,95,104,98,99,106,98,96,99,98,99,102,98,97,103,100,96,103,99,99,104,97,97,103,106,98,107,98,98,102,102,101,99,102,96,107,97,100,101,97,96,102,101,100,103,99,104,102,98,98,104,102,101,103,97,97,98,103,101,97,103,94,99,110,101,98,107,99,99,108,97,97,105,101,97,99,102,98,106,99,95,105,98,97,105,104,98,102,100,96,99,99,102,102,100,103,104,96,100,101,101,98,104,98,100,103,101,99,100,98,101,102,96,101,105,97,99,104,98,100,98,105,96,100,103,98,96,105,99,97,106,99,99,102,101,95,100,100,93,102,97,96,104,99,98,102,102,100,107,96,99,106,99,101,101,100,99,106,97,101,104,96,99,102,100,96,103,97,99,102,98,103,101,97,99,102,96,98,104,101,102,97,106,94,100,107,96,100,103,98,98,99,101,97,101,102,95,100,95,96,102,99,96,102,100,99,102,97,99,102,97,101,102,99,97,101,97,94,103,99,96,104,104,102,104,96,102,101,101,98,101,99,96,101,102,98,102,100,99,103,98,100,97]        },        {            name: '线性同余',            type: 'line',            stack: '线性同余',            lineStyle: {color: '#5793f3'},            data: [45,99,106,90,101,93,101,96,105,98,115,95,83,92,116,95,97,93,92,119,90,97,92,118,113,101,93,90,107,102,78,102,93,106,90,92,81,88,86,91,83,117,89,94,101,107,86,104,103,104,103,115,97,91,110,90,102,86,104,86,115,115,115,112,107,107,121,119,90,97,89,114,104,100,99,99,100,82,89,90,91,101,81,107,100,97,88,111,99,100,113,94,87,97,96,102,104,112,85,112,95,94,98,102,117,108,96,111,119,100,88,114,99,96,99,94,103,93,113,117,96,105,108,98,116,103,91,98,115,112,99,95,91,114,103,92,110,103,99,102,106,108,119,106,105,87,108,86,111,97,112,98,108,111,114,97,109,93,103,110,110,95,119,96,95,104,106,99,104,101,101,80,112,113,111,84,85,95,88,96,98,115,97,96,128,103,99,93,98,94,101,96,101,104,87,107,122,109,81,108,106,86,92,109,88,95,110,101,92,86,105,105,99,90,88,97,105,87,82,107,85,88,104,94,105,97,81,98,105,103,99,100,100,102,87,95,91,119,85,106,80,104,98,100,82,103,102,100,124,102,102,93,91,107,103,98,103,89,120,91,84,105,84,87,99,114,103,98,89,115,102,93,113,102,85,98,110,112,88,92,97,118,95,109,97,92,102,109,101,101,120,104,87,93,89,90,104,107,107,88,119,106,93,101,97,124,91,87,107,115,116,84,89,100,97,95,97,103,109,89,102,110,124,96,95,118,84,86,90,99,82,117,88,98,94,94,114,81,99,100,98,110,90,100,92,96,108,99,108,112,95,97,97,107,96,100,89,108,118,84,93,105,105,98,97,106,101,103,76,112,112,116,113,101,96,105,106,101,92,107,99,107,124,96,108,121,99,91,117,103,107,114,106,76,104,104,104,102,111,106,99,105,116,89,81,97,105,86,94,87,99,98,108,103,110,111,111,108,101,104,94,117,94,103,97,88,87,92,94,90,112,104,78,102,113,104,95,108,104,78,97,99,94,84,106,101,134,94,93,112,96,114,105,107,92,99,106,114,101,109,92,99,102,95,98,100,120,84,83,100,110,99,98,94,98,111,101,85,117,102,105,96,78,100,86,88,78,101,83,107,115,86,107,111,109,107,102,91,102,98,106,123,112,116,96,100,90,100,100,89,98,85,115,114,99,92,85,104,98,79,102,109,107,112,106,95,110,95,99,108,94,113,110,95,111,108,106,72,85,87,102,97,88,104,104,108,116,112,114,96,83,90,117,90,99,121,105,113,93,99,90,88,88,100,98,92,112,93,107,98,85,101,87,117,97,116,82,101,94,88,104,108,104,91,87,103,100,90,101,100,92,117,98,98,101,88,90,106,94,109,109,96,101,103,105,104,101,108,98,104,81,80,105,115,100,117,87,104,101,84,103,111,93,122,101,98,106,97,99,107,99,116,103,90,93,88,114,97,115,111,117,90,100,95,86,95,107,98,95,120,116,79,90,121,104,97,107,103,88,98,83,111,102,98,113,73,99,101,106,100,111,108,92,88,103,97,108,109,99,96,104,92,98,106,84,97,89,106,94,106,96,107,111,110,110,110,110,109,118,100,90,103,117,99,86,96,105,99,94,128,95,98,102,103,85,105,97,96,98,91,117,97,116,97,114,102,89,91,98,120,96,98,91,118,100,86,104,90,96,102,109,85,115,106,112,116,107,100,99,113,110,86,98,108,115,103,88,106,94,108,103,108,92,110,103,95,99,105,83,96,76,94,108,98,120,105,106,107,92,95,102,87,93,107,82,107,113,101,99,94,96,96,109,101,106,102,92,98,114,86,96,95,94,102,94,100,95,92,90,104,98,111,92,94,88,95,84,98,97,96,88,83,106,97,112,93,79,109,92,102,97,113,116,107,102,105,108,100,82,104,86,103,97,117,87,103,107,89,92,103,110,116,110,99,117,92,93,86,96,97,82,120,93,89,101,106,97,110,103,109,112,98,95,79,114,100,95,77,89,83,91,111,108,93,101,89,93,122,102,85,107,104,96,109,99,97,95,101,95,93,109,96,97,100,91,79,97,93,125,110,113,112,98,92,103,98,109,109,126,91,103,105,109,104,109,101,89,99,113,88,91,111,82,97,79,103,107,95,116,108,100,94,109,94,123,102,98,117,83,109,96,99,103,90,98,94,93,112,95,105,85,100,97,99,97,98,89,104,113,100,104,103,90,92,104,99,109,76,111,97,112,102,83,92,102,96,83,92,79,97,106,108,103,100,93,97,84,85,82,97,97,86,94,116,103,106,115,80,91,94,104,100,124,98,94,113,98,91,104,96,106,99,94,110,92,80,101,108,96,97,92,95,106,108,99,98,109,90,105,105,108,105,103,89,98,78,100,93,86,99,110,124,105,104,96,91,114,104,105,94,132,100,102,107,93,107,105,89,79,112,99,105,104,99,97,87,115,121,111,105,92,92,92,95,87,92,97,74,97,102,107,124,100,119,101,93,88,118,97,113,102,114,93,117,97,103,106,87,94,109,114,112,85,91,91,111,106,119,98,96,92,100,111,110,113,103,114,105,106,110,93,87,105,94,109,87,90,114,90,100,108,96,94,94,102,101,96,102,103,108,99,103,107,89,100,93,106,97,94,110,117,116,102,96,119,102,126,116,92,101,114,88,99,93,81,107,87,107,102,113,99,110,106,105,111,103,108,106,104,90,93,113,116,107,110,90,110,101,92,107,109,110,88,93,96,96,104,98,104,109,110,103,110,74,115,95,85,89,116,96,97,91,109,88,81,100,93,110,103,104,88,101,104,92,110,99,111,103,108,93,90,99,91,97,87,99,85,91,127,91,97,94,83,100,118,94,102,83,121,99,91,124,102,106,101,110,100,101,105,115,95,99,95,94,98,108,102,102,92,100,82,114,84,107,91,89,98,93,88,94,94,111,114,108,107,104,109,115,91,105,112,100,103,109,105,105,114,88,108,110,82,95,105,98,96,107,115,88,90,124,78,84,114,110,81,99,86,105,86,99,102,101,86,100,103,104,105,109,103,107,112,98,98,105,94,128,94,106,84,120,93,92,100,107,110,109,77,99,118,110,94,105,86,100,93,98,83,89,99,93,82,95,102,82,101,75,125,106,100,104,110,105,99,112,114,106,96,89,120,111,86,95,92,105,119,119,101,101,103,95,100,98,102,99,108,100,124,113,90,101,125,126,101,97,112,107,85,88,98,93,102,125,94,77,93,83,96,103,95,106,99,108,87,95,96,104,92,98,93,108,102,90,112,100,101,105,107,109,88,96,83,100,112,93,104,99,99,105,106,107,96,90,95,105,105,102,106,94,99,86,109,98,87,100,103,93,113,105,117,112,102,97,89,92,91,99,97,86,106,102,89,118,107,102,88,100,125,100,90,102,94,100,95,103,98,99,106,93,121,104,106,86,108,77,96,94,100,87,93,93,118,107,96,91,114,109,87,98,93,103,87,99,75,91,100,88,103,92,101,86,104,91,91,77,88,99,107,103,82,100,84,105,97,107,107,116,100,99,100,93,83,93,77,86,101,85,92,107,94,99,99,83,94,113,104,99,102,126,126,98,113,95,134,106,109,101,90,106,76,96,102,104,78,101,99,92,84,107,116,109,93,98,97,97,105,96,97,123,94,109,93,103,91,94,98,92,118,84,91,112,108,107,114,105,99,114,105,105,107,108,105,100,99,100,103,90,90,107,79,90,84,128,92,87,90,101,101,106,117,92,110,99,92,115,118,104,82,88,101,109,87,103,96,104,120,91,94,109,106,88,103,88,93,118,92,102,107,118,107,95,106,102,112,91,100,101,99,98,110,102,98,98,111,100,99,99,94,97,91,106,107,112,106,90,90,91,85,99,86,102,93,94,93,95,103,106,103,92,84,111,102,112,89,98,104,98,81,113,100,89,99,89,106,118,88,89,94,90,92,98,107,92,95,100,105,97,64,109,100,94,102,101,114,108,115,109,94,87,105,119,109,100,81,96,98,97,95,96,94,108,99,100,100,102,99,86,113,92,107,91,106,91,85,98,83,109,115,101,102,119,98,110,103,95,112,120,111,109,97,112,130,95,107,108,113,98,110,109,109,97,100,93,81,90,77,118,89,119,101,102,102,102,103,105,97,105,107,85,101,105,113,96,93,107,100,106,114,93,114,93,90,109,103,94,112,101,91,109,100,87,99,90,98,109,100,91,100,96,95,110,99,95,118,89,100,114,90,96,96,102,88,116,106,98,93,106,113,107,112,85,83,109,105,103,101,92,99,110,94,105,103,107,91,102,105,102,97,90,89,87,116,114,94,108,106,83,90,112,89,111,102,94,96,87,99,118,102,101,95,95,98,112,107,92,109,118,108,103,101,106,109,87,102,82,103,115,81,86,82,98,106,111,81,96,122,99,102,104,97,114,94,105,105,111,121,101,111,108,112,108,115,108,87,82,107,112,86,86,97,101,96,81,108,103,92,102,99,99,88,100,81,101,112,84,94,98,83,105,102,77,121,98,111,87,106,106,105,112,112,108,95,100,106,92,103,104,106,108,105,103,120,100,94,98,110,96,117,101,91,94,113,107,107,106,108,97,121,94,83,90,86,90,93,83,107,90,105,97,111,90,93,111,106,111,102,82,88,97,80,94,95,98,105,112,107,100,116,98,93,89,100,96,107,106,116,109,99,118,105,94,93,103,113,94,91,99,88,103,94,111,105,106,98,92,118,97,91,101,115,85,90,110,112,96,108,97,83,111,113,87,107,100,98,108,104,88,110,96,103,92,98,102,100,87,113,104,95,98,96,119,101,108,91,107,108,96,89,101,110,101,108,112,109,88,121,103,107,99,92,105,103,88,105,101,89,110,93,94,102,102,96,95,101,99,77,102,96,92,110,113,105,110,81,97,97,87,88,121,80,82,95,88,95,108,102,98,89,104,91,107,95,114,102,108,124,88,108,112,96,99,91,98,109,111,104,111,112,116,91,87,94,102,92,83,126,90,106,94,103,101,96,98,118,105,97,84,103,90,104,98,90,92,97,102,90,115,107,91,110,117,78,94,93,105,81,102,101,94,84,91,100,102,109,112,95,99,100,72,110,96,96,100,114,103,114,88,113,89,92,99,106,117,78,107,104,101,99,92,98,96,99,88,104,89,107,117,109,83,104,102,110,98,105,102,81,104,99,85,104,112,92,103,99,113,117,105,96,95,99,87,112,84,90,102,105,100,113,99,113,100,113,99,101,98,111,97,91,103,130,96,109,107,79,96,99,103,92,83,120,97,91,85,90,101,103,85,93,109,95,102,105,97,106,101,121,94,89,98,101,98,92,90,101,95,115,93,104,111,103,93,87,85,103,67,91,107,134,99,117,121,97,97,93,91,126,88,91,99,129,112,115,97,117,99,95,83,100,115,81,90,112,93,109,110,89,84,118,80,101,97,100,104,117,97,105,92,91,107,117,88,114,106,93,95,124,106,89,102,106,112,103,104,85,109,110,102,121,110,76,95,108,108,103,98,78,95,101,120,81,111,90,84,113,101,101,102,105,112,102,94,101,110,87,101,94,112,93,82,110,96,102,92,86,98,99,119,95,95,100,103,89,109,91,112,92,108,87,102,92,108,101,82,117,113,88,109,95,101,98,116,108,82,94,104,104,119,102,84,103,92,100,94,93,92,107,101,97,85,121,116,88,111,89,103,93,91,96,104,97,94,119,106,100,121,98,84,116,106,117,100,98,84,94,119,84,90,95,115,103,109,90,102,91,103,103,104,117,107,127,97,86,107,107,96,114,104,110,108,110,97,100,87,99,85,81,88,100,98,118,92,98,94,93,100,107,100,104,108,97,98,92,89,106,88,90,92,104,91,109,102,95,90,104,104,83,106,117,117,93,126,98,88,87,105,97,80,107,105,104,89,113,105,99,105,111,106,101,107,90,87,89,116,96,87,90,79,117,93,88,103,107,121,119,90,98,92,110,104,97,106,112,95,84,104,95,97,107,86,97,114,105,100,98,95,94,111,98,109,78,84,112,92,80,92,116,118,89,88,93,92,107,90,93,103,91,96,110,76,95,98,96,96,93,109,99,98,91,98,106,103,103,105,102,99,95,99,97,90,105,117,105,105,85,93,79,113,97,127,114,111,89,84,97,93,91,91,105,82,105,99,102,105,90,107,92,95,116,94,118,109,97,88,112,94,107,87,84,99,100,104,105,106,80,106,104,96,113,109,100,92,106,96,96,117,112,130,92,117,93,118,104,99,116,78,111,102,100,109,97,95,81,106,102,94,106,98,101,102,97,103,102,103,90,91,108,101,116,103,92,107,125,86,107,98,106,104,95,90,100,95,96,90,95,107,100,103,96,95,92,102,100,109,106,116,98,96,101,101,103,125,99,99,78,111,115,102,96,103,93,83,97,109,98,112,102,89,110,86,105,115,90,92,100,87,114,111,101,94,94,93,89,97,104,102,103,111,107,93,118,103,100,101,112,100,111,96,70,98,96,98,106,103,105,117,89,98,111,125,95,94,103,101,84,105,91,113,103,111,125,122,89,118,101,89,85,109,91,116,102,103,95,98,102,99,114,101,102,95,95,92,97,104,94,106,86,95,101,123,99,94,108,96,102,92,90,95,115,95,90,87,88,103,103,109,97,97,93,99,102,112,105,102,106,101,100,93,87,89,98,99,110,109,103,86,108,96,108,110,100,96,95,88,119,108,113,93,110,101,87,104,93,104,85,106,108,102,117,91,93,115,102,122,97,114,100,127,86,82,99,109,105,112,104,100,106,108,93,87,100,95,126,94,101,110,98,122,128,102,106,98,92,95,105,82,100,92,100,112,86,91,107,113,89,102,91,113,102,99,83,121,116,95,101,101,84,87,113,89,97,122,81,107,99,113,112,102,85,94,109,100,110,105,86,97,94,105,106,88,106,101,92,83,101,111,78,97,101,102,91,98,87,98,88,92,106,108,97,96,106,98,105,96,92,83,112,103,97,109,104,86,96,92,93,110,95,92,111,103,97,111,100,106,101,93,101,104,94,96,90,103,91,113,107,84,94,113,106,98,97,110,92,120,102,109,98,107,104,118,84,101,96,112,95,97,105,92,90,95,87,102,96,113,85,91,107,91,115,92,95,110,99,124,90,109,108,122,96,94,102,99,127,100,98,109,109,99,95,106,105,102,104,82,101,95,104,115,85,105,110,93,100,117,100,108,96,85,117,104,86,83,96,93,92,99,103,103,85,86,86,92,104,90,109,91,98,108,99,98,87,96,107,89,106,106,127,89,97,112,118,101,109,97,107,107,107,114,85,135,106,103,113,97,100,105,96,108,113,106,101,91,111,107,114,99,92,101,101,92,107,98,99,97,118,87,104,105,87,106,108,121,110,103,108,96,104,93,116,80,85,103,101,92,100,82,102,110,96,90,99,91,107,99,101,103,99,84,103,97,87,90,95,82,112,112,106,105,106,106,86,117,87,110,79,93,103,85,102,96,84,98,94,99,97,106,97,118,100,101,94,98,102,103,94,111,101,90,87,110,90,95,112,102,97,110,117,92,120,100,99,108,106,103,88,104,98,108,115,123,103,100,107,103,115,101,124,95,97,102,108,85,91,112,95,100,98,93,113,100,86,94,93,90,99,113,96,111,108,85,102,116,110,90,104,106,97,94,102,101,97,98,90,99,92,119,99,114,108,94,113,107,105,94,99,95,97,99,92,88,100,123,112,87,118,84,115,102,101,109,99,103,119,87,96,70,112,112,113,99,107,89,92,99,97,108,94,84,95,95,109,105,85,111,95,94,104,102,91,95,103,101,101,101,118,101,106,96,116,95,99,95,90,101,98,83,98,107,108,89,101,89,115,85,104,105,119,105,100,79,102,101,118,89,97,115,104,102,92,117,104,105,86,93,84,99,110,90,103,101,96,104,110,89,109,98,107,114,95,96,99,109,94,102,92,105,95,104,116,98,96,114,95,109,96,99,123,80,82,89,98,93,105,94,95,91,100,92,93,108,93,102,90,112,107,106,104,99,80,93,100,103,125,106,106,115,103,87,100,87,96,101,105,86,108,82,100,102,114,87,94,104,112,108,97,111,113,78,93,94,84,112,111,92,94,101,96,101,97,81,95,95,83,103,86,100,89,98,85,88,104,97,94,90,99,101,100,91,100,117,104,102,105,113,95,107,77,94,104,112,101,114,81,114,109,111,100,100,102,102,117,116,99,84,88,84,106,114,104,90,84,112,97,77,92,102,100,91,87,100,96,106,89,93,110,105,100,90,105,93,106,107,99,94,113,98,101,96,97,120,94,94,98,90,100,94,114,97,94,93,96,93,114,86,123,104,86,97,101,104,120,115,96,91,105,88,89,94,114,95,102,81,77,104,99,96,110,96,85,104,102,112,109,95,98,93,120,85,82,108,99,98,105,87,94,124,109,89,98,97,104,112,93,108,110,92,101,103,100,109,112,98,114,119,105,86,99,108,102,102,130,89,119,114,104,93,102,108,112,81,98,93,98,102,87,101,96,85,106,97,108,83,124,103,89,97,100,95,87,99,95,114,117,95,109,109,92,98,109,119,102,111,102,99,110,119,85,102,114,90,92,109,84,77,109,96,98,99,118,95,115,105,89,93,83,95,100,75,107,93,93,84,98,94,103,112,90,99,100,96,103,88,105,106,106,121,93,111,96,106,126,97,109,99,95,111,108,105,109,91,98,104,92,107,112,107,99,108,86,102,99,105,102,88,118,95,93,94,102,87,106,84,86,101,104,97,109,98,107,98,109,93,98,88,88,95,93,97,89,98,90,90,97,91,100,114,90,101,113,100,91,96,110,97,89,90,83,94,107,88,113,109,91,89,101,105,102,103,100,115,102,75,90,111,96,98,102,100,89,99,106,99,83,101,101,101,98,87,106,109,95,91,89,88,81,86,92,80,85,96,96,92,97,109,83,94,100,85,121,125,100,93,104,98,107,117,85,87,108,92,108,79,121,110,100,104,103,123,90,89,118,94,102,96,90,99,99,79,107,90,87,96,93,80,111,125,100,110,93,109,91,96,117,123,107,98,89,110,100,108,95,106,114,91,81,110,69,88,107,103,88,114,83,95,94,105,93,90,105,107,82,99,109,103,101,93,97,113,105,107,117,102,101,96,110,104,108,120,116,89,111,101,90,92,103,130,112,99,100,105,98,85,96,103,122,84,109,101,80,94,104,92,107,108,101,101,110,107,104,85,104,93,102,109,102,101,101,92,110,97,96,117,109,90,88,102,92,94,103,96,99,97,100,86,84,96,87,103,112,108,81,84,91,112,107,100,102,97,126,85,98,99,97,93,94,89,100,97,95,107,105,82,107,126,104,109,98,107,88,108,102,96,100,110,94,94,116,124,102,112,92,116,105,98,111,93,111,105,93,98,107,95,91,97,90,94,91,107,87,98,89,99,111,84,91,93,107,111,98,101,100,103,96,90,107,110,77,79,107,86,112,102,113,97,114,106,87,120,110,80,118,110,91,99,110,87,98,105,99,104,85,111,103,89,112,97,94,101,101,120,104,103,97,100,98,105,118,111,106,110,99,107,100,106,119,96,112,102,95,90,99,113,91,103,102,101,91,98,111,106,109,93,102,113,99,96,85,95,99,85,105,83,109,81,109,93,85,91,94,94,101,94,82,98,83,90,96,112,103,94,111,83,80,114,103,90,106,118,112,97,89,108,88,86,100,99,129,104,101,111,97,95,93,106,108,103,103,111,113,108,111,109,88,98,118,94,79,108,98,97,109,96,112,93,101,108,122,100,97,94,84,102,99,96,109,88,105,110,114,82,91,102,113,101,96,102,86,89,118,117,108,100,91,94,100,100,98,108,99,110,97,104,97,100,108,98,88,92,104,96,108,121,114,102,95,103,122,85,102,108,92,103,116,115,98,108,109,88,89,89,111,108,102,98,101,82,104,87,102,91,101,86,101,109,106,91,88,97,99,101,91,86,110,105,97,104,112,98,101,83,134,111,89,104,106,89,103,90,95,95,101,91,95,93,91,106,101,99,97,108,104,119,105,105,105,94,112,99,87,91,100,87,107,99,100,96,80,126,95,79,108,97,100,92,86,101,104,90,100,89,100,114,110,111,107,108,98,87,101,102,96,101,98,119,103,111,83,88,102,120,75,97,91,100,108,98,103,98,100,96,92,100,103,115,101,88,97,88,111,102,100,98,99,98,122,89,81,94,105,106,94,103,94,94,97,89,102,88,93,82,107,92,112,100,91,115,102,87,99,90,105,90,110,87,101,110,68,101,106,100,91,99,90,89,102,110,102,94,95,101,90,101,96,111,115,89,106,111,99,110,95,108,101,91,100,99,86,104,109,106,105,109,98,112,91,106,93,80,89,81,107,85,86,96,98,98,96,105,102,104,99,94,110,102,91,94,87,114,89,112,95,91,109,112,114,111,87,89,101,98,91,91,76,99,94,108,106,104,107,101,110,100,110,94,104,99,109,92,101,105,85,88,95,92,93,93,103,103,104,105,102,97,85,89,91,99,94,105,112,92,103,94,92,98,99,99,97,111,84,96,115,96,98,93,99,102,92,96,92,93,104,100,107,115,92,89,98,106,125,93,102,86,94,98,101,104,92,94,95,91,113,106,94,100,95,92,99,99,108,85,110,114,106,108,87,98,88,104,98,110,90,80,107,98,96,109,104,105,94,98,90,89,102,99,104,95,89,88,90,94,105,104,107,102,108,97,91,93,124,112,93,97,104,113,105,98,92,95,93,95,109,85,102,88,88,82,92,101,99,99,104,118,101,81,93,97,100,90,110,93,109,108,116,93,103,98,100,94,85,91,82,104,90,111,120,101,101,104,83,104,88,96,112,98,119,100,103,104,101,99,101,116,106,97,110,95,81,112,105,103,97,84,89,93,98,117,83,112,102,97,98,97,92,99,117,125,99,107,99,96,112,108,98,113,108,103,100,99,90,92,104,99,107,104,103,82,101,83,103,80,85,109,107,89,95,93,106,112,98,114,91,106,97,103,99,101,100,91,85,86,95,110,89,117,100,120,103,95,106,105,104,104,93,93,100,92,100,103,111,100,99,93,115,90,85,105,101,110,83,104,91,100,108,100,101,103,111,88,109,105,113,103,106,106,95,105,87,118,104,98,99,92,104,105,84,97,101,86,93,114,94,101,89,79,94,81,88,101,96,92,102,86,96,103,111,113,94,95,86,115,95,112,115,115,102,106,96,113,92,109,96,74,94,125,110,97,73,84,95,114,108,101,106,99,99,96,104,94,89,82,88,96,105,91,93,85,111,102,112,82,109,108,81,103,100,95,106,103,96,97,91,108,83,120,104,93,95,108,95,99,107,106,121,90,88,91,110,106,113,67,92,90,92,108,82,101,88,86,107,115,105,103,112,105,87,116,87,102,104,110,87,99,115,116,73,88,102,112,103,115,98,113,85,91,87,104,97,98,108,107,81,108,112,108,106,101,103,100,98,97,95,99,94,109,111,98,100,100,85,107,107,96,94,95,96,95,88,122,105,108,112,98,98,110,120,102,109,94,105,110,101,101,100,88,99,111,103,86,95,101,91,98,96,92,97,89,86,100,99,98,100,80,114,107,86,93,105,100,106,107,107,108,104,95,112,100,99,81,94,105,108,101,103,92,116,112,101,111,90,106,103,91,104,89,90,112,93,94,104,87,93,101,91,95,88,91,88,83,87,93,115,97,105,104,113,107,118,107,112,107,96,116,108,99,104,87,102,96,86,100,113,91,95,117,96,118,89,94,97,96,98,111,106,95,78,109,89,119,91,95,106,100,113,95,96,101,114,112,95,107,115,100,107,101,105,90,110,88,100,86,89,93,110,96,99,83,101,113,95,98,98,97,95,92,103,113,98,98,96,95,103,97,96,110,110,91,88,110,94,112,96,83,95,110,93,106,102,95,108,107,107,91,79,83,97,89,94,100,108,86,105,89,97,109,98,100,89,105,99,109,95,102,95,97,100,92,105,121,97,98,122,92,104,114,96,89,96,97,103,112,89,109,99,73,104,81,90,113,98,80,100,92,95,92,132,103,106,84,90,85,113,80,78,96,117,103,99,112,109,110,97,82,125,94,98,92,84,96,88,108,110,88,110,90,105,110,101,94,105,117,90,121,90,97,97,102,84,101,83,111,105,101,104,113,97,97,94,96,104,99,92,103,101,84,103,103,105,102,101,78,117,101,94,118,94,92,87,93,82,107,100,78,92,113,121,99,93,95,98,104,80,99,85,95,94,98,109,88,83,109,90,106,106,100,115,110,88,98,84,94,102,113,105,88,96,98,88,85,94,107,102,111,87,101,96,88,92,91,103,108,106,89,110,92,108,98,98,104,113,98,104,121,86,108,96,103,80,90,101,115,93,106,96,102,100,114,92,103,105,95,103,109,90,113,95,96,99,108,88,93,99,110,112,110,115,87,95,92,89,106,96,104,104,98,93,134,102,88,114,118,122,90,92,116,99,98,117,100,101,104,99,100,105,125,94,91,116,97,105,90,88,102,103,90,96,98,103,91,97,83,104,104,116,107,95,107,91,109,99,111,103,92,109,105,94,100,86,101,93,88,107,93,83,102,92,91,96,104,89,103,92,81,90,98,100,85,93,125,93,86,90,98,87,93,91,71,109,85,110,110,90,98,86,104,93,90,96,93,94,82,94,100,93,93,99,93,103,103,100,96,73,102,92,100,100,102,96,90,105,116,100,120,99,87,106,96,94,103,83,112,93,105,99,95,96,77,87,96,115,94,95,121,88,104,109,107,105,98,100,95,95,85,91,98,98,80,105,119,99,87,104,98,108,89,98,98,106,83,106,110,93,97,88,114,96,101,124,104,109,112,112,104,92,96,94,93,96,123,110,107,93,114,114,99,88,107,96,92,108,106,93,82,89,86,89,107,111,104,99,102,108,112,108,91,110,81,114,90,82,115,108,105,106,87,113,106,107,91,84,108,96,98,94,120,106,95,105,89,84,115,89,101,104,106,91,93,104,101,104,99,102,98,94,96,89,114,91,104,89,110,77,106,87,82,85,116,95,110,104,96,103,84,113,95,92,83,101,102,117,112,91,97,79,98,110,110,113,116,126,107,92,99,99,115,105,106,112,106,86,92,97,99,104,110,94,99,91,95,107,102,100,102,90,96,80,104,95,102,111,97,98,107,82,99,103,111,90,106,89,108,108,95,114,74,106,95,107,86,100,95,70,97,95,107,86,100,98,106,101,91,86,113,99,108,123,98,82,98,106,118,90,90,107,129,105,100,101,91,93,100,106,94,104,93,91,101,96,92,112,98,92,86,102,115,90,89,103,106,109,115,106,86,104,97,97,115,94,100,106,96,101,103,118,100,126,95,103,80,97,93,96,102,106,102,93,103,110,109,100,96,119,92,95,91,86,112,103,103,84,95,93,115,113,97,94,100,91,93,98,96,102,100,94,107,95,106,79,83,94,90,95,105,87,98,98,116,113,96,109,100,97,108,104,89,102,100,87,97,98,90,89,112,98,99,112,88,110,102,113,96,95,98,104,98,93,92,86,100,102,105,99,101,98,96,98,109,96,103,112,104,89,101,102,101,105,107,110,92,104,97,103,92,112,113,102,106,109,79,106,93,88,83,114,100,97,105,96,132,92,85,114,112,102,117,98,88,106,115,97,109,84,87,112,104,90,84,118,106,103,92,96,117,93,107,89,92,116,104,105,100,105,109,100,101,109,117,92,103,104,93,105,84,121,86,102,85,105,107,116,107,91,99,100,113,91,119,116,96,105,109,97,104,90,105,105,82,94,106,112,86,92,99,88,93,83,125,110,85,103,106,93,98,92,98,104,103,95,124,101,114,94,107,96,101,73,95,96,108,86,97,109,111,97,92,93,113,87,89,113,102,101,105,101,81,114,117,95,103,88,98,121,92,107,118,96,98,103,107,99,95,106,94,104,94,111,87,90,122,118,101,96,110,102,101,85,105,107,106,95,106,89,96,92,100,88,84,105,92,114,93,117,102,112,88,108,97,118,92,100,87,98,108,98,113,106,118,98,102,99,106,81,112,100,106,89,92,91,102,90,98,114,94,103,112,91,115,91,89,91,97,97,99,122,107,81,106,109,98,118,120,95,97,105,87,82,97,97,91,138,108,81,122,101,101,123,88,106,104,106,93,109,105,103,99,93,112,93,109,103,106,124,120,95,107,88,101,92,109,97,121,109,98,113,89,93,114,109,102,106,100,103,105,95,100,90,104,112,102,114,94,95,102,79,101,94,100,93,87,97,111,102,103,110,101,94,99,112,86,104,92,100,104,111,74,78,119,98,94,91,101,89,100,110,102,105,116,88,84,89,103,86,106,85,121,101,100,102,96,89,99,89,87,84,115,102,108,97,110,113,100,103,118,111,83,111,89,91,82,97,108,103,101,106,83,91,101,113,114,93,87,96,98,96,93,77,99,98,96,100,90,86,92,103,108,108,110,111,82,104,100,96,110,102,96,111,92,90,88,81,107,90,108,105,103,89,90,92,119,104,90,98,121,98,102,110,96,105,129,101,120,106,91,111,96,105,115,107,96,110,98,92,107,97,116,110,96,103,103,90,94,103,96,84,109,98,103,100,95,108,92,86,78,101,103,102,102,106,114,100,106,102,100,84,113,102,86,95,102,99,96,101,91,123,100,96,85,102,121,93,99,96,100,99,101,109,110,91,103,117,107,119,87,89,96,96,100,91,105,81,91,104,97,100,114,91,100,109,110,90,101,91,83,90,117,89,111,100,103,104,99,93,114,85,102,104,96,83,88,95,96,113,99,112,80,92,108,106,109,96,96,103,109,91,99,98,99,100,81,97,88,109,85,112,117,96,111,86,93,119,116,97,105,85,120,107,105,114,118,87,104,90,91,92,99,87,104,99,106,92,100,90,104,86,115,104,108,111,96,93,84,102,105,93,98,83,91,104,79,105,104,96,93,77,96,105,104,103,91,94,105,112,100,115,100,92,106,96,92,124,110,104,96,109,106,106,91,97,90,93,93,105,105,96,92,121,103,106,101,100,109,112,100,100,108,93,101,94,103,114,91,116,122,104,90,127,93,103,106,97,115,82,119,99,120,101,107,96,93,106,107,105,101,93,96,95,107,98,98,107,96,101,100,104,86,94,98,93,84,101,99,98,98,100,85,105,102,112,120,89,105,101,83,101,106,106,98,81,119,104,105,90,85,95,104,101,116,108,108,93,98,102,107,81,106,81,119,110,90,90,93,109,95,101,103,88,110,109,96,92,84,106,85,86,97,105,96,103,78,95,89,110,111,117,112,100,113,99,104,89,98,106,105,88,122,107,103,110,96,95,119,102,110,94,99,114,105,99,90,106,101,95,92,102,100,106,124,84,89,100,95,101,94,91,102,101,100,104,106,112,104,108,90,98,89,91,90,96,93,105,95,101,81,99,77,94,91,99,96,100,94,101,116,92,117,96,121,110,93,103,77,97,117,103,100,97,114,101,97,99,101,115,107,81,87,110,103,89,85,88,114,76,110,91,87,100,96,106,87,110,107,93,106,102,96,106,100,117,95,99,95,100,118,102,120,93,98,86,106,115,109,80,102,102,95,87,119,128,126,108,106,108,93,94,87,103,117,99,92,92,106,103,89,100,87,94,99,105,101,106,105,107,110,103,104,85,116,108,79,108,99,100,82,97,110,109,110,101,99,93,95,103,116,119,108,98,98,109,109,109,102,86,88,108,90,109,114,87,89,92,90,98,83,97,92,84,101,100,104,89,92,97,100,98,107,101,102,99,93,106,93,97,97,101,118,82,98,106,90,96,109,111,102,103,111,117,92,101,88,112,93,106,96,117,103,92,94,100,104,85,96,90,93,101,88,84,79,97,113,95,102,100,110,98,86,115,98,102,120,106,111,95,118,87,106,103,85,112,92,98,93,108,91,116,108,99,102,82,109,102,105,99,96,107,98,110,89,105,106,112,96,99,88,116,89,93,96,82,88,108,97,127,110,77,104,88,106,98,111,105,95,93,107,102,94,91,109,94,92,95,112,110,94,99,94,96,111,100,87,108,97,105,99,77,108,108,107,97,96,85,119,103,109,121,86,103,100,90,108,77,90,94,106,99,87,103,117,99,99,92,93,107,94,87,108,110,102,108,105,90,92,104,106,98,99,96,101,120,104,93,81,103,93,88,103,108,75,107,93,85,84,84,118,115,100,109,105,91,97,103,104,104,111,96,92,107,111,91,108,107,92,93,111,101,83,91,108,84,109,87,98,103,111,97,117,91,101,109,109,98,85,98,89,100,113,100,110,102,94,89,99,88,89,97,107,94,113,113,94,86,88,86,84,97,87,113,114,107,105,112,86,116,93,103,87,100,82,93,103,93,99,96,91,105,84,99,88,92,87,88,94,117,103,100,88,87,105,94,94,88,107,111,109,83,94,106,94,86,80,109,108,105,102,94,81,109,127,99,115,107,89,118,97,101,95,94,90,99,92,99,94,105,82,111,98,104,108,98,98,85,100,96,102,102,93,99,96,89,97,96,105,124,84,98,99,96,94,87,98,108,93,92,93,117,107,97,90,112,91,97,79,106,98,123,96,103,88,104,112,101,96,136,110,107,110,124,105,93,101,75,102,95,86,94,97,84,111,100,116,114,90,102,100,86,110,93,109,106,96,100,94,100,100,109,104,92,113,109,113,93,103,100,81,113,95,94,80,84,94,111,108,107,102,100,86,99,84,95,103,123,111,94,107,106,93,106,95,92,78,98,95,86,103,111,101,106,84,107,97,109,104,111,88,102,102,104,116,108,98,102,90,104,109,101,115,79,103,95,100,99,100,88,110,96,106,94,102,95,114,89,111,88,103,96,103,96,109,101,87,89,101,80,86,104,77,97,100,101,99,113,88,111,95,91,90,99,102,82,114,117,101,96,105,87,111,103,89,87,84,99,98,92,95,112,98,119,100,100,103,85,109,131,111,102,96,128,107,120,106,98,87,100,85,103,112,90,104,101,104,101,77,98,106,119,106,93,115,84,109,106,108,96,105,87,104,89,96,103,83,84,77,91,114,88,87,82,103,99,103,107,97,114,90,87,104,90,94,98,113,110,101,111,84,97,100,98,100,103,99,106,94,122,94,100,102,113,101,115,86,105,94,88,105,94,100,111,88,104,105,106,100,99,99,100,106,105,115,98,98,111,101,95,89,107,104,95,125,78,91,84,116,93,115,109,116,107,86,102,108,87,95,90,93,114,96,112,102,109,80,92,85,110,92,102,111,99,115,90,97,104,102,86,108,111,111,107,91,110,104,89,94,96,98,86,90,91,104,119,106,93,87,107,89,90,85,94,97,95,103,95,93,85,110,91,103,95,90,97,111,114,108,102,96,110,100,95,89,81,106,88,103,99,113,78,107,79,109,81,115,100,122,88,110,122,107,93,117,122,78,96,98,91,103,100,96,91,101,85,92,89,83,82,101,106,106,116,83,109,118,107,99,69,99,105,107,103,104,89,93,98,105,91,99,117,104,111,110,87,100,89,109,91,121,89,108,103,93,96,99,96,96,109,97,92,90,89,107,97,115,101,93,87,80,89,96,115,93,117,105,121,107,94,89,90,89,96,102,114,89,75,109,86,100,107,126,95,112,100,104,94,88,111,101,94,86,102,94,105,95,105,109,111,98,104,116,111,105,92,90,96,114,97,119,94,97,104,106,99,121,116,98,108,104,112,111,106,102,83,106,97,99,115,98,108,100,81,101,105,114,100,86,105,88,105,89,93,119,96,102,94,102,99,101,98,88,90,98,85,98,95,110,78,110,105,100,121,108,85,97,114,114,106,104,103,114,108,105,105,105,91,101,114,111,82,99,94,100,90,94,102,85,103,112,86,74,105,103,99,114,97,94,101,85,90,105,99,120,109,98,91,112,93,110,104,100,93,86,96,100,82,91,112,84,94,82,85,103,100,110,109,105,97,88,97,95,93,101,111,109,99,105,111,88,99,95,105,97,103,101,102,95,88,115,96,91,118,100,90,86,100,115,100,101,89,110,86,115,100,100,107,91,96,108,106,102,93,105,98,106,106,100,89,102,104,118,100,101,95,99,114,96,120,97,90,94,93,105,102,105,114,106,100,106,87,80,103,113,100,103,128,86,94,94,114,98,96,107,116,110,98,108,87,82,114,97,105,100,85,111,99,122,94,115,99,90,101,108,102,82,92,115,100,86,87,99,98,97,91,107,88,89,99,109,96,114,86,100,112,98,99,94,106,85,99,95,111,97,80,77,95,103,103,105,111,106,92,96,117,100,92,106,107,117,106,112,102,95,106,99,98,82,130,114,108,95,95,106,98,110,99,90,121,101,110,106,99,98,88,109,100,126,89,93,99,109,92,98,109,99,78,73,107,93,96,102,111,101,85,86,92,101,101,86,98,105,90,95,103,97,107,113,91,100,99,95,108,120,103,96,114,95,81,106,113,111,95,96,87,101,111,94,107,109,107,102,105,101,101,102,97,99,112,107,91,82,86,117,107,101,111,109,115,114,87,104,90,91,128,97,86,95,73,120,101,100,93,98,91,100,82,101,91,100,95,91,86,119,100,107,96,104,99,110,107,120,89,92,82,104,96,104,84,91,101,112,98,105,111,111,111,119,108,110,97,101,111,110,102,100,90,106,109,104,123,92,108,99,101,109,91,110,109,94,87,92,97,101,113,90,111,106,103,97,81,97,95,107,97,116,112,102,78,110,116,104,93,103,69,82,99,88,89,99,84,85,121,85,91,108,93,106,94,94,103,95,103,102,85,90,114,95,112,85,102,91,99,126,109,88,125,86,111,95,92,108,128,89,101,91,81,105,98,115,108,106,82,92,98,87,104,96,83,119,104,93,94,96,112,97,71,102,87,92,98,108,99,92,117,101,106,95,116,84,104,93,98,108,90,101,110,103,86,91,106,90,88,105,98,106,107,113,105,93,96,76,100,97,107,78,105,98,106,106,91,96,81,99,97,106,115,89,117,111,109,123,97,86,101,89,96,107,107,84,94,94,105,91,95,101,116,99,103,105,92,96,108,110,93,91,98,108,99,87,97,109,87,102,122,89,108,105,84,99,88,124,86,100,111,96,106,105,101,93,103,97,106,94,115,100,86,80,113,98,90,90,105,104,87,107,107,92,82,93,114,111,107,107,92,79,93,84,110,104,106,119,77,87,106,104,98,107,100,87,94,95,100,93,100,102,105,100,97,101,93,87,90,123,101,83,91,105,114,97,89,83,101,106,107,103,110,118,93,91,97,97,114,91,95,102,82,93,102,91,114,120,87,94,106,90,92,97,104,111,99,99,106,95,87,109,88,83,106,104,81,104,106,92,108,101,83,86,99,102,98,92,105,105,109,99,106,94,80,100,82,111,85,87,109,97,101,112,94,93,95,98,99,96,93,102,93,115,100,96,100,108,108,107,104,91,96,88,104,93,104,112,122,92,103,98,106,83,95,90,89,103,110,88,91,94,94,103,117,79,104,100,87,102,95,104,110,97,110,105,105,109,116,110,111,98,90,100,95,87,92,103,100,73,113,98,104,103,108,104,100,110,78,96,101,98,101,101,110,130,104,77,103,106,92,96,89,103,108,103,91,99,96,86,84,89,112,84,87,100,84,100,85,87,111,97,119,106,103,96,91,90,120,100,108,94,99,75,109,100,109,113,97,98,117,100,95,114,103,115,102,79,115,94,83,114,109,114,101,91,109,77,99,112,101,99,107,116,110,86,103,91,117,103,105,117,90,112,96,115,115,108,84,97,80,99,100,92,118,103,95,94,90,116,103,104,104,94,87,108,102,106,126,100,86,103,90,98,96,99,94,89,91,96,107,99,86,102,105,95,108,123,92,99,103,79,95,103,118,104,90,98,94,120,84,87,85,91,87,99,97,113,90,123,110,102,107,96,109,105,120,98,102,93,107,95,103,101,96,98,94,110,106,103,99,96,103,94,114,107,100,96,101,92,104,108,98,92,108,89,100,93,104,105,93,101,89,98,99,90,98,96,121,89,99,104,103,118,93,93,97,79,113,112,83,90,99,97,114,102,106,105,119,93,115,102,108,123,113,100,110,97,116,113,102,100,89,109,90,107,102,109,91,94,106,105,101,112,107,99,73,105,96,104,90,87,109,93,77,118,73,87,88,80,108,100,100,101,87,133,97,103,102,89,105,111,90,105,85,89,72,93,86,89,97,101,91,96,89,98,93,93,107,103,87,104,89,95,106,109,120,92,99,108,105,97,106,85,114,92,105,107,105,104,102,108,94,86,113,114,98,117,91,92,89,108,119,106,92,79,116,103,96,131,89,93,102,110,98,107,75,112,94,100,103,91,105,91,102,95,112,98,97,86,92,90,111,113,94,95,97,116,103,115,92,101,104,109,107,111,93,90,95,111,95,118,97,96,84,94,92,107,88,96,108,93,104,108,104,116,94,100,99,108,110,110,102,118,110,111,104,100,123,104,93,99,101,91,94,104,122,94,97,87,97,92,85,99,102,106,95,90,83,89,108,93,86,108,105,87,92,106,119,107,84,103,99,101,92,111,119,112,106,104,103,99,95,107,94,99,81,84,100,125,98,101,100,101,98,102,97,106,83,92,87,97,106,88,97,107,101,92,95,97,106,113,113,104,76,98,92,93,111,89,108,113,87,100,119,92,89,99,126,86,106,97,98,92,104,105,89,92,91,100,83,107,95,99,104,103,90,84,100,105,97,96,88,87,88,108,113,96,107,96,102,105,92,101,98,78,94,131,96,110,100,83,106,94,109,90,100,111,112,86,109,109,107,121,108,99,99,103,95,92,98,117,91,101,96,90,116,81,115,114,107,96,106,104,89,98,106,113,112,102,112,98,102,95,107,89,104,89,94,119,101,100,102,99,84,103,87,99,97,108,97,112,129,95,99,95,106,102,104,111,99,95,103,102,95,85,90,104,101,104,91,90,112,112,106,105,102,93,109,92,97,116,111,104,93,109,90,105,94,108,97,94,108,120,104,121,114,110,105,91,87,103,97,91,99,100,97,97,88,87,96,86,104,109,106,102,88,105,106,96,118,96,93,94,120,112,98,92,83,102,116,107,105,112,94,79,118,110,123,118,108,101,90,109,110,84,88,81,101,109,109,114,90,109,96,84,100,111,97,96,104,96,98,99,102,95,100,110,101,91,101,97,87,121,109,113,88,114,92,87,114,96,105,103,92,79,112,121,93,98,93,98,102,110,98,86,92,95,99,121,90,97,115,89,78,99,115,111,102,89,100,93,107,100,104,101,111,95,103,96,84,111,78,114,99,102,98,84,83,106,92,98,98,88,111,119,100,109,98,105,100,107,109,121,94,111,91,88,111,97,98,102,94,98,101,106,108,106,106,118,106,97,75,103,97,102,120,101,109,88,88,97,111,118,102,102,111,104,108,89,96,110,114,83,111,103,100,105,95,102,108,88,119,89,88,97,88,117,74,101,113,103,95,114,74,115,92,99,111,103,104,107,97,112,95,119,108,102,104,86,106,91,94,85,115,99,91,91,113,104,107,86,97,110,103,90,101,103,109,112,105,104,114,88,109,97,109,93,95,103,94,105,105,121,98,99,109,106,94,103,106,109,100,106,99,110,105,115,109,108,110,92,96,89,126,119,94,103,95,87,107,107,95,87,97,104,87,93,94,95,104,103,110,97,134,81,97,101,107,97,91,109,116,103,86,87,106,103,92,119,108,96,100,98,110,117,95,104,88,105,90,103,90,105,104,85,97,91,90,102,80,98,104,103,105,107,109,104,94,114,87,105,84,102,92,91,102,90,91,100,110,112,108,93,107,98,95,90,90,91,94,113,109,94,102,104,106,97,83,110,83,116,80,95,94,107,88,103,100,124,110,92,108,85,96,87,109,93,89,124,101,101,87,104,88,107,108,98,109,119,102,92,108,117,103,93,103,96,96,102,108,124,113,103,79,87,108,86,119,97,106,87,102,92,87,106,93,119,97,94,89,100,98,96,86,111,105,90,101,102,119,109,101,101,103,85,102,99,107,101,99,95,81,105,88,122,93,101,104,123,91,103,104,105,103,92,85,93,92,102,93,101,87,94,113,98,102,95,101,103,87,84,110,99,122,90,104,111,89,113,92,103,112,73,104,89,90,107,98,112,127,93,97,96,99,97,111,90,109,102,85,76,107,109,90,94,104,100,114,89,101,97,113,98,98,107,99,107,90,105,104,92,93,112,96,103,99,109,79,105,101,123,107,84,103,102,95,111,111,104,104,109,115,106,97,101,99,100,117,104,117,117,104,122,95,96,105,95,89,106,120,107,93,109,113,87,118,89,81,96,97,100,102,99,90,117,106,109,103,97,93,93,91,109,120,97,100,77,104,87,109,91,98,91,99,92,105,104,122,102,105,108,93,101,104,88,92,121,82,104,99,113,107,95,86,111,89,107,94,98,101,86,90,97,103,117,96,85,108,85,87,102,106,97,102,95,98,110,107,114,119,97,94,101,100,102,85,115,88,92,93,105,105,104,91,99,104,105,104,94,106,106,112,98,95,100,109,99,95,111,108,115,111,100,103,116,105,98,89,104,103,87,101,98,105,82,47]        }    ]}        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><p>细看之下，便会发现其实用<code>Math.random()</code>会更加稳定一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试伪随机~
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="typescript" scheme="http://blog.fivezha.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(7)---二分搜索和一些应用</title>
    <link href="http://blog.fivezha.cn/2020/07/31/algorithm4-1-binary-search/"/>
    <id>http://blog.fivezha.cn/2020/07/31/algorithm4-1-binary-search/</id>
    <published>2020-07-30T22:57:49.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>二分搜索和一些用到二分思想的题目<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二分搜索可以说是应用非常广泛的一类算法了，非常多的暴力算法优化方案都是在一些条件下用二分，并且二分效率很高，可以让$\mathcal{O}(N)$算法秒变$\mathcal{O}(log_2N)$，效率大大提高<del>(超时就先往二分上靠再说)</del>，故本篇文章就讨论一下二分算法和一些关于二分的题目。</p><h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><p>最基础的版本，用于在一个有序序列中查找需要的元素：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在一个列表中二分查找到某个值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 11:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 需要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo 左范围 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hi 右范围 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 查找到了就返回下标，没查找到就返回-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">binarySearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = _hi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">val</span> mid = lo + (hi - lo) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            key &lt; list[mid] -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            key &gt; list[mid] -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每一次都会是比上一次缩减<strong>1/2</strong>的搜查量，$\cfrac{N}{2^k} = 1$，所以时间复杂度为<br>$$<br>\mathcal{O}(\log_2N)<br>$$<br>空间复杂度为<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="查找列表中是否存在某元素"><a href="#查找列表中是否存在某元素" class="headerlink" title="查找列表中是否存在某元素"></a>查找列表中是否存在某元素</h2><p>查找列表中是否存在某元素，这个问题，其实用<code>遍历</code>或者<code>二分</code>都可以解，并且不会特别影响时间复杂度，因为排序算法时间复杂度$\mathcal{O}(Nlog_2N)$已经决定了这个算法的时间复杂度，但是利用二分搜索更能提升算法效率，说不准就卡那么几毫秒。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找列表中是否存在某元素，利用[binarySearch]二分查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 11:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 需要查找的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">containsInList</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> sorted = list.sorted()</span><br><span class="line">    <span class="comment">// 这里调用了上面的函数</span></span><br><span class="line">    <span class="keyword">val</span> res = binarySearch(sorted, key)</span><br><span class="line">    <span class="keyword">return</span> res != -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<br>$$<br>\mathcal{O}(Nlog_2N + log_2N)\\<br>=\mathcal{O}(Nlog_2N)<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(N)<br>$$<br>因为启用了额外的数组。</p><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>本题目也可以使用二分搜索做，最开始是使用蛮力法解决，时间复杂度为$\mathcal{O}(N^3)$，将其中最后一个元素的选取改为二分查找后便成为了$\mathcal{O}(N^2)$，复杂度大大降低。原理就是先排序，依旧是两重循环找出前两个数字，第三个数值利用二分法从剩余元素中找。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找已排序元素中是否有重复元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 11:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否存在重复元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">containsDuplicatesInSorted</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until list.size - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list[i] == list[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分法[binarySearch]求三数之和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 满足和为0的所有组合的列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 数组元素小于3个时抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">threeSumBinaryFast</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;, num: <span class="type">Int</span>)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> res = LinkedList&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">    <span class="keyword">val</span> sl = list.sorted().run &#123;</span><br><span class="line">        <span class="keyword">if</span> (containsDuplicatesInSorted(<span class="keyword">this</span>))</span><br><span class="line">            distinct()</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list.size &lt; <span class="number">3</span>) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"数组非重复元素小于3个!"</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> sl.indices) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> i + <span class="number">1</span> until sl.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> k = binarySearch(sl, num - (sl[i] + sl[j]), j + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (k != -<span class="number">1</span>) &#123;</span><br><span class="line">                res.add(listOf(sl[i], sl[j], sl[k]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度方面，排序+循环时间复杂度$\mathcal{O}(N\log_2N+N^2\log_2N)$，化简得：<br>$$<br>\mathcal{O}(N^2)<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(N)<br>$$<br>排序产生的中间数组。</p><h2 id="数组局部最小元素"><a href="#数组局部最小元素" class="headerlink" title="数组局部最小元素"></a>数组局部最小元素</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200731122225.png" alt="题目描述" title="">                </div>                <div class="image-caption">题目描述</div>            </figure><p>思路已经很明确了，即是每一次都往小部分缩小<strong>1/2</strong>的范围，最终查找到的符合条件的mid就成功了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部最小元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左边界 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右边界 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最小元素数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 数组元素小于3个时抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">partialMinElem</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">Number</span>&gt;, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.size &lt; <span class="number">3</span>) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"数组元素小于3个！"</span>)</span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = _hi</span><br><span class="line">    <span class="comment">// 两边需要单独测试</span></span><br><span class="line">    <span class="keyword">if</span> (list[lo] &lt; list[lo + <span class="number">1</span>]) <span class="keyword">return</span> lo</span><br><span class="line">    <span class="keyword">if</span> (list[hi] &lt; list[hi - <span class="number">1</span>]) <span class="keyword">return</span> hi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo <span class="keyword">in</span> _lo..hi &amp;&amp; hi &lt;= _hi) &#123;</span><br><span class="line">        <span class="comment">// 取mid</span></span><br><span class="line">        <span class="keyword">val</span> mid = lo + (hi - lo) / <span class="number">2</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里分为三个情况</span></span><br><span class="line"><span class="comment">         * ↘↗直接返回</span></span><br><span class="line"><span class="comment">         * ↗↗往左走</span></span><br><span class="line"><span class="comment">         * ↗↘都可以，原题是往小的地方走(因为部分排序过的数组会更快)</span></span><br><span class="line"><span class="comment">         * ↘↘往右走</span></span><br><span class="line"><span class="comment">         * 总之就是往小的地方走</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            mid == _lo -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &lt; list[mid + <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> lo = mid + <span class="number">1</span></span><br><span class="line">            mid == _hi -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &lt; list[mid - <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            list[mid - <span class="number">1</span>] &gt; list[mid] &amp;&amp; list[mid] &lt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &lt; list[mid] &amp;&amp; list[mid] &lt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &lt; list[mid] &amp;&amp; list[mid] &gt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[mid - <span class="number">1</span>] &gt;= list[mid + <span class="number">1</span>]) lo = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当所有元素都是一样的时候才没有最小值，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度(最差)：<br>$$<br>\mathcal{O}(2log_2N)<br>$$<br>为什么是这个时间复杂度呢，因为在最差情况下，向一边走完之后发现没有结果，然后就往另一边走，才发现结果，所以总体是$\mathcal{O}(2log_2N)$。</p><p>空间复杂度：<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="矩阵局部最小元素"><a href="#矩阵局部最小元素" class="headerlink" title="矩阵局部最小元素"></a>矩阵局部最小元素</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200731214656.png" alt="题目描述" title="">                </div>                <div class="image-caption">题目描述</div>            </figure><p>这个题目也是跟上个题目类似，就是每一次缩减<strong>1/2</strong>的大小，不过这个并非数组，而是一个矩阵，所以我们对于复杂度不能用上一个题目那种分析方式来写。本题目的思路便是先从最中间元素开始搜查，根据上一题目的四种情况进行讨论，横向讨论完在下一次用纵向讨论，这样每一次都是缩减<strong>1/2</strong>，最终找到负荷情况的i，j就可以了。</p><p>但其实这个题目<strong>混沌的一批</strong>，如果用<code>遍历+二分</code>的做法的话，就会使得时间复杂度成为$\mathcal{O}(Nlog_2N)$，而非题目所要求的$\mathcal{O}(N)$，所以才要一直二分下去。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 矩阵局部最小元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matrix 矩阵</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最小元素数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 矩阵为空的时候抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">matrixPartialMinElem</span><span class="params">(matrix: <span class="type">List</span>&lt;<span class="type">List</span>&lt;<span class="type">T</span>&gt;&gt;)</span></span>: Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.isEmpty()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"矩阵不能为空！"</span>)</span><br><span class="line">    <span class="keyword">var</span> lor = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> hir = matrix.size - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lor &lt;= hir) &#123;</span><br><span class="line">        <span class="keyword">val</span> mr = lor + (hir - lor) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> kc = partialMinElem(matrix[mr])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            kc == -<span class="number">1</span> -&gt; &#123;</span><br><span class="line">                lor++</span><br><span class="line">            &#125;</span><br><span class="line">            mr == <span class="number">0</span> -&gt;</span><br><span class="line">                <span class="keyword">if</span> (matrix[mr + <span class="number">1</span>][kc] &gt; matrix[mr][kc])</span><br><span class="line">                    <span class="keyword">return</span> Pair(mr, kc)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    lor = mr + <span class="number">1</span></span><br><span class="line">            mr == matrix.size - <span class="number">1</span> -&gt;</span><br><span class="line">                <span class="keyword">if</span> (matrix[mr][kc] &lt; matrix[mr - <span class="number">1</span>][kc])</span><br><span class="line">                    <span class="keyword">return</span> Pair(mr, kc)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    hir = mr - <span class="number">1</span></span><br><span class="line">            matrix[mr - <span class="number">1</span>][kc] &gt; matrix[mr][kc] &amp;&amp; matrix[mr][kc] &lt; matrix[mr + <span class="number">1</span>][kc] -&gt;</span><br><span class="line">                <span class="keyword">return</span> Pair(mr, kc)</span><br><span class="line">            matrix[mr - <span class="number">1</span>][kc] &lt; matrix[mr][kc] &amp;&amp; matrix[mr][kc] &lt; matrix[mr + <span class="number">1</span>][kc] -&gt;</span><br><span class="line">                hir = mr - <span class="number">1</span></span><br><span class="line">            matrix[mr - <span class="number">1</span>][kc] &lt; matrix[mr][kc] &amp;&amp; matrix[mr][kc] &gt; matrix[mr + <span class="number">1</span>][kc] -&gt;</span><br><span class="line">                <span class="keyword">if</span> (matrix[mr - <span class="number">1</span>][kc] &gt;= matrix[mr + <span class="number">1</span>][kc]) lor = mr + <span class="number">1</span> <span class="keyword">else</span> hir = mr - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; lor = mr + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Pair(-<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度方面：</p><p>这个我怎么推都是$\mathcal{O}((log_2N)^2)$的复杂度（其实有推出一个$\mathcal{O}(2N)$来，但是总感觉不是特别靠谱），如果有大佬能推出来$\mathcal{O}(N)$的复杂度可以在下面留言，感谢！</p><p>空间复杂度方面：<br>$$<br>\mathcal{O}(1)<br>$$<br>没什么好说的。</p><h2 id="双调查找"><a href="#双调查找" class="headerlink" title="双调查找"></a>双调查找</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200802133254.png" alt="image-20200802133247034" title="">                </div>                <div class="image-caption">image-20200802133247034</div>            </figure><p>可以发现，这个像是局部最小值的变形，这里面必定有<strong>极大值</strong>，所以我们把问题分解成了三个子问题：</p><ol><li>找到最大值</li><li>向左二分找值</li><li>向右二分找值</li></ol><p>这样三个二分查找总共最差则是$\mathcal{O}(3log_2N)$，满足题意。为什么这里可以直接用二分法找最大值呢，因为这个数组很特殊，先增后减，可以说局部最大值就是最大值，所以可以利用二分查找直接找出。</p><p>局部最大函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 局部最大元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左边界 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右边界 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最大元素下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 数组元素小于3个时抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">partialMaxElem</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = _hi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="comment">// 取mid</span></span><br><span class="line">        <span class="keyword">val</span> mid = lo + (hi - lo) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            mid == _lo -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &gt; list[mid + <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> lo = mid + <span class="number">1</span></span><br><span class="line">            mid == _hi -&gt;</span><br><span class="line">                <span class="keyword">if</span> (list[mid] &gt; list[mid - <span class="number">1</span>]) <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            list[mid - <span class="number">1</span>] &lt; list[mid] &amp;&amp; list[mid] &gt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &gt; list[mid] &amp;&amp; list[mid] &gt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            list[mid - <span class="number">1</span>] &gt; list[mid] &amp;&amp; list[mid] &lt; list[mid + <span class="number">1</span>] -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[mid - <span class="number">1</span>] &lt;= list[mid + <span class="number">1</span>]) lo = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当所有元素都是一样的时候才没有最小值，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双栈查找函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双调查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/31 15:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左边界 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右边界 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 查找元素下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 查不到最大元素时抛出常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">doubleToneSearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> mi = partialMaxElem(list)</span><br><span class="line">    <span class="keyword">if</span> (mi == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"请输入正确的双调列表！"</span>)</span><br><span class="line">    <span class="keyword">if</span> (list[mi] == key)</span><br><span class="line">        <span class="keyword">return</span> mi</span><br><span class="line">    <span class="keyword">val</span> l = binarySearch(list, key, _lo, mi - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> r = binarySearch(list.subList(mi + <span class="number">1</span>, _hi + <span class="number">1</span>).reversed(), key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">        r == -<span class="number">1</span> -&gt; l</span><br><span class="line">        l == -<span class="number">1</span> -&gt; _hi - r</span><br><span class="line">        <span class="keyword">else</span> -&gt; l</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度（最差）：<br>$$<br>\mathcal{O}((\frac{1}{2}+\frac{1}{2}+2)log_2N) =\\<br>\mathcal{O}(3log_2N)<br>$$</p><p>空间复杂度：<br>$$<br>\mathcal{O}(N)<br>$$<br>用了一半的反转数组。</p><h2 id="仅用加减实现的二分查找"><a href="#仅用加减实现的二分查找" class="headerlink" title="仅用加减实现的二分查找"></a>仅用加减实现的二分查找</h2><p>题目是这样描述的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200802233108.png" alt="image-20200802233108582" title="">                </div>                <div class="image-caption">image-20200802233108582</div>            </figure><p>说的挺高深的，其实就是利用倒了<code>斐波那契数列</code>，个人感觉可能还能有数列满足指数级，暂时还没时间去想，有空可能会去想。</p><p>为什么能用<code>斐波那契数列</code>来求解呢？这还要跟<code>斐波那契数列</code>的特性有关系，我们知道<code>斐波那契数列</code>的规律是这样的：<br>$$<br>\mathcal{f}(n)=<br>\begin{cases}<br>1,  &amp; \mbox{if }n\mbox{ is 1} \\<br>1, &amp; \mbox{if }n\mbox{ is 2} \\<br>\mathcal{f}(n - 1) + \mathcal{f}(n-2), &amp;\mbox{if }n\mbox{ is &gt;=3}<br>\end{cases}<br>$$<br>所以从分割点的左右两边来看，都包含有<code>f(1)..f(n-2)</code>的所有信息，只不过右边比左边多出了<code>f(n-1)</code>，所以无论是左边分还是右边往下分，都是可以分离直到<code>f(1)</code>产生的，这就是为什么能用<code>斐波那契数列</code>代替二分搜索的原因。</p><p>知道了原因，我们就来思考条件，首先一个首要条件便是：<strong>列表大小必须是斐波那契数列其中的某个元素 - 1</strong>才可以进行，所以我们需要先将数组扩充到大于这个数组长度的最小<code>斐波那契数列</code>的值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建最大值大于[length]的第一个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/3 1:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 最长值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 数列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">makeFibonacciListUntilLength</span><span class="params">(length: <span class="type">Int</span>)</span></span>: List&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (length) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; emptyList()</span><br><span class="line">        <span class="number">1</span> -&gt; listOf(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="number">2</span> -&gt; listOf(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> fl = mutableListOf(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">var</span> nv = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> (length &gt; nv - <span class="number">1</span>) &#123;</span><br><span class="line">                fl.add(nv)</span><br><span class="line">                nv += fl[fl.size - <span class="number">2</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            fl.add(nv)</span><br><span class="line">            fl</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契二分搜索</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/31 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 需要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _lo 左范围 默认为0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> _hi 右范围 默认为list.size - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 查找到了就返回下标，没查找到就返回-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">fibonacciBinarySearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>, _lo: <span class="type">Int</span> = <span class="number">0</span>, _hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (list.size &lt; <span class="number">3</span>) <span class="keyword">return</span> list.indexOf(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时最末尾的值肯定是刚好大于长度的那个</span></span><br><span class="line">    <span class="keyword">val</span> fbl = makeFibonacciListUntilLength(_hi - _lo + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> tl = list.toMutableList()</span><br><span class="line">    tl.addAll(List((fbl.last() - <span class="number">1</span> - list.size)) &#123; list.last() &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lo = _lo</span><br><span class="line">    <span class="keyword">var</span> hi = <span class="keyword">if</span> (_hi == list.lastIndex) tl.lastIndex <span class="keyword">else</span> _hi</span><br><span class="line">    <span class="keyword">var</span> k = fbl.lastIndex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">val</span> mid = lo + fbl[k - <span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            tl[mid] &gt; key -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">                k--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 小堆就-2，因为少了f(n-1)的信息</span></span><br><span class="line">            tl[mid] &lt; key -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">                k -= <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">return</span> <span class="keyword">if</span> (mid &gt;= _hi) list.lastIndex <span class="keyword">else</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<br>$$<br>\mathcal{O}(log_2N)<br>$$<br>空间复杂度：<br>$$<br>\mathcal{O}(N)<br>$$<br>越往后来说空间增加都近似于前一个数值的$\frac{1}{3}$，所以空间复杂度约为$\mathcal{O}(N)$</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二分搜索和一些用到二分思想的题目
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>如何利用GitHubAction自动化测试你的kotlin程序并部署文档到GithubPage</title>
    <link href="http://blog.fivezha.cn/2020/07/28/github-action-kotlin-test-action/"/>
    <id>http://blog.fivezha.cn/2020/07/28/github-action-kotlin-test-action/</id>
    <published>2020-07-28T01:42:12.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>简单的实践操作<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天一直在写算法，但是一个一个测试太麻烦了，并且也没有文档看，简直累人，所以就写了个<code>action</code>让它自动生成并部署到<code>GithubPage</code>上面去，爽了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ......</span><br><span class="line">    testImplementation(</span><br><span class="line">            <span class="string">'org.assertj:assertj-core:3.12.2'</span>,</span><br><span class="line">            <span class="string">'org.junit.jupiter:junit-jupiter-api:5.4.2'</span></span><br><span class="line">    )</span><br><span class="line">    testRuntime(<span class="string">'org.junit.jupiter:junit-jupiter-engine:5.4.2'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试task"><a href="#编写测试task" class="headerlink" title="编写测试task"></a>编写测试task</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成！看看效果吧~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728100426.png" alt="test" title="">                </div>                <div class="image-caption">test</div>            </figure><p>测试成功~</p><h2 id="文档生成"><a href="#文档生成" class="headerlink" title="文档生成"></a>文档生成</h2><p>本次使用的是<code>kotlin</code>官方文档生成器<a href="https://github.com/Kotlin/dokka" target="_blank" rel="noopener"><strong>dokka</strong></a>，内含有多种生成方案，并且可以集成到<code>Gradle</code>中，爽的。</p><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>这里以插件方式引入：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    ......</span><br><span class="line">    id <span class="string">'org.jetbrains.dokka'</span> version <span class="string">'0.10.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写task"><a href="#编写task" class="headerlink" title="编写task"></a>编写task</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">dokka &#123;</span><br><span class="line">    <span class="comment">// 样式，具体看官方文档</span></span><br><span class="line">    outputFormat = <span class="string">'javadoc'</span></span><br><span class="line">    outputDirectory = <span class="string">"$buildDir/dokka"</span></span><br><span class="line">    disableAutoconfiguration = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    cacheRoot = <span class="string">'default'</span></span><br><span class="line"></span><br><span class="line">    configuration &#123;</span><br><span class="line">        moduleName = <span class="string">'doc'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use to include or exclude non public members.</span></span><br><span class="line">        includeNonPublic = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do not output deprecated members. Applies globally, can be overridden by packageOptions</span></span><br><span class="line">        skipDeprecated = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions</span></span><br><span class="line">        reportUndocumented = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do not create index pages for empty packages</span></span><br><span class="line">        skipEmptyPackages = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// This is a list of platform names that will be shown in the final result. See the "Platforms" section of this readme</span></span><br><span class="line">        targets = [<span class="string">"JVM"</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Platform used for code analysis. See the "Platforms" section of this readme</span></span><br><span class="line">        platform = <span class="string">"JVM"</span></span><br><span class="line"></span><br><span class="line">        sourceRoot &#123;</span><br><span class="line">            <span class="comment">// 源文件目录</span></span><br><span class="line">            path = <span class="string">"src"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sourceLink &#123;</span><br><span class="line">            <span class="comment">// Unix based directory relative path to the root of the project (where you execute gradle respectively).</span></span><br><span class="line">            path = <span class="string">"src/main/kotlin"</span> <span class="comment">// or simply "./"</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// URL showing where the source code can be accessed through the web browser</span></span><br><span class="line">            url = <span class="string">"https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions/blob/master/src/main/kotlin"</span> <span class="comment">//remove src/main/kotlin if you use "./" above</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定行数前缀，github是#L</span></span><br><span class="line">            lineSuffix = <span class="string">"#L"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于链接java官方文档</span></span><br><span class="line">        jdkVersion = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disable linking to online kotlin-stdlib documentation</span></span><br><span class="line">        noStdlibLink = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disable linking to online JDK documentation</span></span><br><span class="line">        noJdkLink = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成！看看效果~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728101048.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728101144.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功~</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>每次都运行脚本太累了，干脆直接用<code>CI</code>自动跑了，这里用的是<code>GithubAction</code>，具体如何使用可以看：<a href="https://blog.fivezha.cn/2020/07/21/github-action-demo/">如何利用GitHubAction和GithubPage部署React应用</a> 这篇，这里只写出<code>yml</code>文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Test</span> <span class="string">Workflow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Kotlin</span> <span class="string">Tests</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">      <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 验证wrapper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">validate</span> <span class="string">wrapper</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">gradle/wrapper-validation-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装jdk</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 缓存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Gradle</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.gradle/caches</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle-$&#123;&#123;</span> <span class="string">hashFiles('**/*.gradle')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 给权限</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Grant</span> <span class="string">execute</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">gradlew</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 测试程序</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">with</span> <span class="string">gradle</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Doc</span> <span class="string">Workflow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span> <span class="string">[published]</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Kotlin</span> <span class="string">Documentation</span> <span class="string">Generation</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">      <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 验证wrapper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">validate</span> <span class="string">wrapper</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">gradle/wrapper-validation-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 安装jdk</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 缓存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Gradle</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.gradle/caches</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle-$&#123;&#123;</span> <span class="string">hashFiles('**/*.gradle')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-gradle</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 给权限</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Grant</span> <span class="string">execute</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">gradlew</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 缓存</span></span><br><span class="line">      <span class="comment"># 暂时还未找到hash值的解决方案，找到了请pr</span></span><br><span class="line">      <span class="comment"># - name: Cache Dokka</span></span><br><span class="line">      <span class="comment">#   uses: actions/cache@v2</span></span><br><span class="line">      <span class="comment">#   with:</span></span><br><span class="line">      <span class="comment">#     path: ~/.cache/dokka</span></span><br><span class="line">      <span class="comment">#     key: $&#123;&#123; runner.os &#125;&#125;-dokka-$&#123;&#123; hashFiles('**/*') &#125;&#125;</span></span><br><span class="line">      <span class="comment">#     restore-keys: $&#123;&#123; runner.os &#125;&#125;-dokka</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 生成文档</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">documentation</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">dokka</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 部署到ghpage</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./build/dokka</span></span><br></pre></td></tr></table></figure><p>完成！测试一下~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200728101648.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>成功~</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>爽到了爽到了~</p><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">GitHub地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的实践操作
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
      <category term="gradle" scheme="http://blog.fivezha.cn/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>如何利用GitHubAction和gulp自动化部署压缩你的GithubPage+Hexo博客</title>
    <link href="http://blog.fivezha.cn/2020/07/24/github-action-blog/"/>
    <id>http://blog.fivezha.cn/2020/07/24/github-action-blog/</id>
    <published>2020-07-24T13:37:09.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>差点翻车<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>GithubAction</code>作为<code>Github</code>提供的免费的<code>CI/CD</code>服务，让开发者感受到了自动化的爽，相比起<code>Travis CI</code>来说，<code>GitHubAction</code>集成方便，非常适合快速部署的操作，本教程便是一篇如何利用<code>GithubAction</code>对于<code>GithubPage+Hexo</code>博客进行自动化部署，并利用<code>gulp</code>进行压缩。</p><h2 id="配置GithubAction"><a href="#配置GithubAction" class="headerlink" title="配置GithubAction"></a>配置GithubAction</h2><h3 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h3><p>首先依旧是申请key，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724215856700.png" alt="image-20200724215856700" title="">                </div>                <div class="image-caption">image-20200724215856700</div>            </figure><p>此时会生成<strong>.pub的公钥与没有后缀的私钥</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721154822499.png" alt="成功生成密钥" title="">                </div>                <div class="image-caption">成功生成密钥</div>            </figure><h3 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h3><p>首先新建一个空仓库，用于存放你的博客根目录，新建完成后将<strong>博客根目录</strong>所有文件都上传到这个仓库中，传完项目结构大体如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220337436.png" alt="image-20200724220337436" title="">                </div>                <div class="image-caption">image-20200724220337436</div>            </figure><p>然后开始配置仓库，首先</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220449987.png" alt="image-20200724220449987" title="">                </div>                <div class="image-caption">image-20200724220449987</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220517055.png" alt="image-20200724220517055" title="">                </div>                <div class="image-caption">image-20200724220517055</div>            </figure><p>配置成你的公钥，然后在上传博客的仓库中，上传你的私钥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220651398.png" alt="image-20200724220651398" title="">                </div>                <div class="image-caption">image-20200724220651398</div>            </figure><p><strong>注意这里的私钥名字一定要跟后面Action里面设置的一样！(不知道就跟我一样)</strong></p><h3 id="配置workflow"><a href="#配置workflow" class="headerlink" title="配置workflow"></a>配置workflow</h3><p>在博客根目录新建<code>.github</code>文件夹，再在<code>.github</code>文件夹里新建<code>workflows</code>文件夹，新建完在<code>workflows</code>文件夹里新建<code>deploy.yml</code>文件，然后按照如下编写：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库就运行</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 切换到master</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装node</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">11.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">"11.x"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 缓存 node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装hexo并生成</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 部署到GitHubPage</span></span><br><span class="line">    <span class="comment"># from https://github.com/peaceiris/actions-gh-pages    </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="comment"># 这里写你自己的仓库名</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">xmmmmmovo/xmmmmmovo.github.io</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>好了，这样就已经配置完成了，你每次提交到此仓库，便会自动帮你运行部署到GithubPage上去。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221510619.png" alt="image-20200724221510619" title="">                </div>                <div class="image-caption">image-20200724221510619</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221450653.png" alt="image-20200724221450653" title="">                </div>                <div class="image-caption">image-20200724221450653</div>            </figure><p>可以看到，已经成功运行了。</p><h2 id="配置gulp"><a href="#配置gulp" class="headerlink" title="配置gulp"></a>配置gulp</h2><p>我们随便点开一个文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221832348.png" alt="image-20200724221832348" title="">                </div>                <div class="image-caption">image-20200724221832348</div>            </figure><p>可以看到，里面充斥着大量的空格，积少成多，这会占用非常多的时间，让你的博客感觉加载起来很慢，所以既然我们都是全自动化部署了，我们不如直接在进行一遍压缩操作，这样使你博客加载的更加迅速，体验更加良好。</p><h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><p>首先进到博客根目录，然后打开命令行，输入(这里其实你直接在<code>package.json</code>里面写也行(因为node_modules已经没用了)，但是我比较懒)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp@3.9.1 gulp-minify-css gulp-htmlmin gulp-htmlclean --save-dev</span><br></pre></td></tr></table></figure><p>待完成后，改写<code>deploy.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库就运行</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 切换到master</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装node</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">11.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">"11.x"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 缓存 node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装hexo并生成</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">gulp</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 部署到GitHubPage</span></span><br><span class="line">    <span class="comment"># from https://github.com/peaceiris/actions-gh-pages    </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="comment"># 这里写你自己的仓库名</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">xmmmmmovo/xmmmmmovo.github.io</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="comment"># 这里我改成了与原格式相似格式的commit message</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">'Site updated: $<span class="template-variable">&#123;&#123; github.event.head_commit.timestamp &#125;&#125;</span>'</span></span><br></pre></td></tr></table></figure><p>然后编写<code>gulpfile.js</code>文件用来加载<code>gulp</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>]);</span><br></pre></td></tr></table></figure><p>此时再次提交，等待<code>GithubAction</code>完成之后，便可以查看效果了~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724222548668.png" alt="image-20200724222548668" title="">                </div>                <div class="image-caption">image-20200724222548668</div>            </figure><p>可以看到800多行瞬间变为了16行，是不是很爽~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;差点翻车
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(6)---如何利用六个栈使队列所有操作时间复杂度达到O(1)</title>
    <link href="http://blog.fivezha.cn/2020/07/23/algorithm4-1-threestackqueue/"/>
    <id>http://blog.fivezha.cn/2020/07/23/algorithm4-1-threestackqueue/</id>
    <published>2020-07-23T10:11:16.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>第一次看见的前面就标有极难的题目<a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>本问题其实是有一篇论文作为参考的:</p><div class="row">    <embed src="https://ecommons.cornell.edu/bitstream/handle/1813/6273/80-433.pdf" width="100%" height="550" type="application/pdf"></div><p>这篇论文是以<code>LISP</code>作为实现语言的，我们本次依旧是使用<code>kotlin</code>进行实现。</p><p>当然，这里三个栈需要实现的是<strong>双向队列</strong>的<strong>API</strong>，六个栈实现的是<strong>单向队列</strong>。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>首先，先要说明一个事情——其实栈的实现大多数都是利用<code>顺序表</code>来进行实现的，但是根据算法第四版里面的实现方案，栈其实是利用链表来实现的，虽然不影响后面复杂度分析，但是底层区别首先在这里说清楚。</p><p>然而，队列的实现有着<code>顺序表</code>和<code>链表</code>两种解决方案，用<code>顺序表</code>虽然出队列也依旧是$\mathcal{O}(1)$的效率，但是随着标志位的后移，需要的空间会<strong>线性增长</strong>，但是如果不后移则会变成$\mathcal{O}(N)$的复杂度，所以衍生出了<code>循环队列</code>的中间方案。不过<code>Java</code>源码中，给出了一个非常巧妙的方案，它将<code>Queue</code>和<code>Deque</code>作为一个接口，让其他数据结构实现这个接口，这样无论是<code>链表</code>还是<code>线性表</code>，只要实现了这个接口，就可以作为队列来使用。</p><p>言归正传，回到这个问题，要分析多个栈实现队列，我们首先分析双栈情况，就是左右横跳，用另一个栈作为中间栈，每一次出队列先把所有的元素移动到另一个栈中再出栈，这样出栈时间复杂度$\mathcal{O}(N)$，入栈直接压入原栈，时间复杂度$\mathcal{O}(1)$，但如果我们再利用多个栈进行模拟，就可以把所有操作压缩到$\mathcal{O}(1)$的时间复杂度了。</p><p>根据算法第四版的题目描述，设定的是利用3个栈进行实现，但是这是均摊时间复杂度之后达到的$\mathcal{O}(1)$，不是真$\mathcal{O}(1)$，所以本文章又给出了第二种利用六个栈实现的方案。</p><h2 id="三个栈实现双向队列-虚假的-mathcal-O-1"><a href="#三个栈实现双向队列-虚假的-mathcal-O-1" class="headerlink" title="三个栈实现双向队列(虚假的$\mathcal{O}(1)$)"></a>三个栈实现双向队列(虚假的$\mathcal{O}(1)$)</h2><p>主要实现<code>Deque</code>的几个方法，具体代码解释已经写到注释里面了，所以直接放代码了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用三个栈实现队列</span></span><br><span class="line"><span class="comment"> * 使得所有操作都是O(1)</span></span><br><span class="line"><span class="comment"> *  @Author xmmmmmovo</span></span><br><span class="line"><span class="comment"> *  @Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackDeque</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 左栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示存储的栈位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tmpIsRight = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">            lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; tst.isEmpty()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入左队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushLeft</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        lst.push(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入右队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        rst.push(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出左队列(对应的是入右队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popLeft</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 这里如果左栈有值的话就说明要么左边插入值了</span></span><br><span class="line"><span class="comment">            * 要么右边或者中转栈转移到了左栈，无论哪种情况都是栈顶就是最左</span></span><br><span class="line"><span class="comment">            * 直接出栈就可以</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            lst.isNotEmpty() -&gt; lst.pop()</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里先判断中转栈内容是否是存的右栈的内容</span></span><br><span class="line"><span class="comment">             * 判断如果是右栈的内容，再判断中转栈是否是空的</span></span><br><span class="line"><span class="comment">             * 如果不是就说明右栈已经转移到中转栈中了</span></span><br><span class="line"><span class="comment">             * 相当于移动到了左栈，所以直接弹出中转栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isNotEmpty() &amp;&amp; tmpIsRight -&gt; tst.pop()</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里先判断中转栈内容是否是存的右栈的内容</span></span><br><span class="line"><span class="comment">             * 判断如果不是右栈的内容，再判断中转栈是否是空的</span></span><br><span class="line"><span class="comment">             * 如果不是就说明是左栈移动到了中栈了</span></span><br><span class="line"><span class="comment">             * 相当于移动到了右栈，所以先弹出到左栈再弹出左栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isNotEmpty() &amp;&amp; !tmpIsRight -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (tst.isNotEmpty())</span><br><span class="line">                    lst.push(tst.pop())</span><br><span class="line">                lst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里如果是中转栈是空的并且右栈不为空</span></span><br><span class="line"><span class="comment">             * 就直接转移到中转栈再弹出中转栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isEmpty() &amp;&amp; rst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (rst.isNotEmpty())</span><br><span class="line">                    tst.push(rst.pop())</span><br><span class="line">                tmpIsRight = <span class="literal">true</span> <span class="comment">// 存的是右栈</span></span><br><span class="line">                tst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 所有栈都没有内容，自然就抛出异常</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出右队列(对应的是出左队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popRight</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            rst.isNotEmpty() -&gt; rst.pop()</span><br><span class="line">            tst.isNotEmpty() &amp;&amp; !tmpIsRight -&gt; tst.pop()</span><br><span class="line">            tst.isNotEmpty() &amp;&amp; tmpIsRight -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (!tst.isEmpty())</span><br><span class="line">                    rst.push(tst.pop())</span><br><span class="line">                rst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            tst.isEmpty() &amp;&amp; lst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (lst.isNotEmpty())</span><br><span class="line">                    tst.push(lst.pop())</span><br><span class="line">                tmpIsRight = <span class="literal">false</span> <span class="comment">// 存的是左栈</span></span><br><span class="line">                tst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = lst.size + rst.size + tst.size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">asList</span><span class="params">()</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> list = mutableListOf&lt;T&gt;()</span><br><span class="line">        lst.forEach &#123;</span><br><span class="line">            list.add(it)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果非空那就得判断tmp里面存储的是左还是右了</span></span><br><span class="line">        <span class="comment">// 但是右栈一定要翻转</span></span><br><span class="line">        tst.run &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmpIsRight) <span class="keyword">this</span> <span class="keyword">else</span> reversed()</span><br><span class="line">        &#125;.forEach &#123; list.add(it) &#125;</span><br><span class="line">        rst.reversed().forEach &#123;</span><br><span class="line">            list.add(it)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String = asList().toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sq = StackDeque&lt;String&gt;()</span><br><span class="line">sq.pushLeft(<span class="string">"a"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"b"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"c"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"d"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"e"</span>)</span><br><span class="line">println(sq.popRight())</span><br><span class="line">sq.pushRight(<span class="string">"f"</span>)</span><br><span class="line">sq.pushRight(<span class="string">"g"</span>)</span><br><span class="line">sq.pushRight(<span class="string">"h"</span>)</span><br><span class="line">println(sq.asList())</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200725134752097.png" alt="image-20200725134752097" title="">                </div>                <div class="image-caption">image-20200725134752097</div>            </figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>时间复杂度：</p><p>这里我们主要分析出队列的时间复杂度，因为入队列操作仅是一个入栈操作，时间复杂度：<br>$$<br>\mathcal{O}(1)<br>$$<br>出队列方面，因为两端出队列思想相似，所以仅分析其中一边即可。</p><p>可以看到，首先先说明一下，队列是先进先出的，所以是<code>右进左出</code>，<code>左进右出</code>，选择右进左出分析，可以看到出方向首先尝试从另一边栈进行出栈操作，如果成功就是$\mathcal{O}(1)$，如果失败就继续判断中转栈是否是右栈内容，尝试从中转栈进行出栈，成功依旧是$\mathcal{O}(1)$，当中转栈是左栈或者只有右栈不为空的时候，所需要的时间复杂度才为$\mathcal{O}(N)$，所以考虑N个元素，最差情况是便是<code>左进右出</code>情况，因为此时才会存在移栈，此时仅在第一次出队列时时间复杂度为$\mathcal{O}(N)$。所以均摊时间复杂度下，出队列操作的时间复杂度为：<br>$$<br>\mathcal{O}(N/N)\\<br>= \mathcal{O}(1)<br>$$<br>可以看到是均摊后时间复杂度才达到$\mathcal{O}(1)$，所以是虚假的$\mathcal{O}(1)$。</p><p>空间复杂度：</p><p>虽然这里用到了三个栈，但是所有需求空间加起来是等于添加的总元素的，所以空间是成线性增长的，所以空间复杂度是：<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="六个栈实现单向队列-真正的-mathcal-O-1"><a href="#六个栈实现单向队列-真正的-mathcal-O-1" class="headerlink" title="六个栈实现单向队列(真正的$\mathcal{O}(1)$)"></a>六个栈实现单向队列(真正的$\mathcal{O}(1)$)</h2><p>因为双向会更加绕，所以这里选用单项队列进行讲解，主要方向是<code>右进左出</code>。当然，这里的思想跟上面的有些许不同，三个栈的情况是存在单次操作$\mathcal{O}(N)$的，所以在这里我们将解决这个问题。</p><p>参考博客文章：<a href="https://www.cnblogs.com/ikesnowy/p/7157813.html" target="_blank" rel="noopener">点此跳转</a></p><p>根据上面的思路，我们发现了整个实现的思路就是<strong>均摊</strong>，作为双向队列，如果仅用三个栈的话，中间栈只能存储一个栈，所以我们无论如何都需要有一次进行单个栈所有元素转存的方案，所以无法均摊到单个操作上(如果有四个栈可能可行)，但是本次仅用作单项队列，所以对于出栈来说只是左栈需要转存，所以可以把转存操作均摊到每一个出栈操作上来。</p><p>整体思路上是在入队列的时候便使得左右两个栈尽量相等，然后在出栈的时候再进行判断。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2020. xmmmmmovo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用六个栈实现单向队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/28 16:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackDequeOpt</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> lst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> rst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左栈替换栈 用于复制时转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tlst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右栈替换栈 用于复制时候入队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> trst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左翻转栈，用于保护左栈原有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> lstrev = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于复制过程中的出栈操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> hlst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否在复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isCopying = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要复制数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> needCopy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:54</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; tlst.isEmpty() &amp;&amp; trst.isEmpty() &amp;&amp; lstrev.isEmpty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入右队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:55</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 左栈大于右栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff &gt; <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                needCopy = <span class="number">0</span></span><br><span class="line">                rst.push(element)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 左右栈相等的时候，因为不知道下一步操作</span></span><br><span class="line"><span class="comment">             * 所以提前准备来进行复制操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff == <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                rst.push(element)</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                hlst = lst.clone()</span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果还在复制直接 入栈到中转栈</span></span><br><span class="line"><span class="comment">             * 因为原栈需要别的用处</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying -&gt; &#123;</span><br><span class="line">                tlst.push(element)</span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出左队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:55</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回队列第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 没有元素时抛出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popLeft</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果没有在copy的时候并且左大于右则直接左栈弹出</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff &gt; <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> lst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果没有在复制并且左栈刚好等于右栈，那么就直接弹出左栈</span></span><br><span class="line"><span class="comment">             * 这样左栈小于右栈，进入复制状态</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            !isCopying &amp;&amp; sizeDiff == <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> t = lst.pop()</span><br><span class="line">                hlst = lst.clone()</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">                <span class="keyword">return</span> t</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 因为复制状态下，所有左栈元素会到hlst中所以直接hlst出栈</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> t = hlst.pop()</span><br><span class="line">                needCopy--</span><br><span class="line">                oneStep()</span><br><span class="line">                oneStep()</span><br><span class="line">                <span class="keyword">return</span> t</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预览元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 16:56</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回队列第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 没有元素时抛出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peekLeft</span><span class="params">()</span></span>: T = <span class="keyword">if</span> (isCopying) hlst.peek() <span class="keyword">else</span> lst.peek()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中间操作 这里是脱离了入栈出栈操作的额外操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 20:32</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">oneStep</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 正在copy的时候左右栈都不是空的，这说明需要进行交换了</span></span><br><span class="line"><span class="comment">             * 本次这里右栈进入左栈中转栈</span></span><br><span class="line"><span class="comment">             * 左栈进入左栈反转栈(用于后面直接替换</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isNotEmpty() &amp;&amp; rst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                needCopy++</span><br><span class="line">                tlst.push(rst.pop())</span><br><span class="line">                lstrev.push(lst.pop())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 此状态说明此时左栈已经完成转移，右栈还有剩余</span></span><br><span class="line"><span class="comment">             * 把右栈的元素移动到左栈中转栈中</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                tlst.push(rst.pop())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 此时说明左右栈都是空栈了</span></span><br><span class="line"><span class="comment">             * 但是需要复制的数量大于1</span></span><br><span class="line"><span class="comment">             * 就说明lstrev还有剩余可以转移的元素</span></span><br><span class="line"><span class="comment">             * 直接转移到左中转栈用于后面计算</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; needCopy &gt; <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">true</span></span><br><span class="line">                needCopy--</span><br><span class="line">                tlst.push(lstrev.pop())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果左右栈都为空， 并且仅有一个需要复制的</span></span><br><span class="line"><span class="comment">             * 那么就直接把最后一个元素并入左栈中转栈</span></span><br><span class="line"><span class="comment">             * 中转栈转为主栈 就完成了一个循环</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; needCopy == <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">false</span></span><br><span class="line">                needCopy--</span><br><span class="line">                tlst.push(lstrev.pop())</span><br><span class="line">                lst = tlst</span><br><span class="line">                rst = trst</span><br><span class="line">                tlst = Stack()</span><br><span class="line">                trst = Stack()</span><br><span class="line">                lstrev = Stack()</span><br><span class="line">                hlst = Stack()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 同上</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            isCopying &amp;&amp; lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; needCopy == <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                isCopying = <span class="literal">false</span></span><br><span class="line">                lst = tlst</span><br><span class="line">                rst = trst</span><br><span class="line">                tlst = Stack()</span><br><span class="line">                trst = Stack()</span><br><span class="line">                lstrev = Stack()</span><br><span class="line">                hlst = Stack()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左栈-右栈大小的差值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 20:33</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sizeDiff: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = lst.size - rst.size</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列总长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xmmmmmovo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/7/29 20:33</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> version-1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = lst.size + rst.size + tlst.size + trst.size + lstrev.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2020. xmmmmmovo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> fundamental</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ds.StackDequeOpt</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions.*</span><br><span class="line"><span class="keyword">import</span> org.junit.platform.commons.logging.LoggerFactory</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDequeOptTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> sdo = StackDequeOpt&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> log = LoggerFactory.getLogger(StackDequeOptTest::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">before</span><span class="params">()</span></span> &#123;</span><br><span class="line">            log.info &#123; <span class="string">"StackDequeOptTest start"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AfterAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">after</span><span class="params">()</span></span> &#123;</span><br><span class="line">            log.info &#123; <span class="string">"StackDequeOptTest end"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span> &#123;</span><br><span class="line">        assertEquals(<span class="literal">true</span>, sdo.isEmpty())</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        assertEquals(<span class="literal">false</span>, sdo.isEmpty())</span><br><span class="line">        sdo.popLeft()</span><br><span class="line">        assertEquals(<span class="literal">true</span>, sdo.isEmpty())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">2</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">3</span>)</span><br><span class="line">        assertEquals(<span class="number">3</span>, sdo.popLeft())</span><br><span class="line">        assertEquals(<span class="number">2</span>, sdo.popLeft())</span><br><span class="line">        assertEquals(<span class="number">1</span>, sdo.popLeft())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peekLeft</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">2</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">3</span>)</span><br><span class="line">        assertEquals(<span class="number">3</span>, sdo.peekLeft())</span><br><span class="line">        sdo.popLeft()</span><br><span class="line">        assertEquals(<span class="number">2</span>, sdo.peekLeft())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getSize</span><span class="params">()</span></span> &#123;</span><br><span class="line">        assertEquals(<span class="number">0</span>, sdo.size)</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        assertEquals(<span class="number">1</span>, sdo.size)</span><br><span class="line">        sdo.popLeft()</span><br><span class="line">        assertEquals(<span class="number">0</span>, sdo.size)</span><br><span class="line">        sdo.pushRight(<span class="number">1</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">2</span>)</span><br><span class="line">        sdo.pushRight(<span class="number">3</span>)</span><br><span class="line">        assertEquals(<span class="number">3</span>, sdo.size)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/20200730001450.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>时间复杂度：</p><p>这里所有复杂度都均摊到了每一个操作上，不会出现某些情况时间复杂度激升的情况，综合时间复杂度：<br>$$<br>\mathcal{O}(1)<br>$$<br>空间复杂度：<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于这个题目也是众说纷纭，有的人说作者已经将题目改成了有限个栈而非三个栈，但是官方网站上却标注着使用三个栈实现，然而因为疫情原因，纸质书依旧在学校里躺着，没法证明，但就从电子版来看，作者有很大可能也没有改题。其实这个题目在<code>stackoverflow</code>上面也有人询问(<a href="https://stackoverflow.com/questions/5538192/how-to-implement-a-queue-with-three-stacks" target="_blank" rel="noopener">链接</a>)，但是大多数人都暗示了使用三个栈是不可能存在真正的$\mathcal{O}(1)$的，当然也有一些抖机灵的解法——比如某些<code>套娃栈</code>的邪道解法，真的是天马行空。不管怎么说，对于一道存在这么个争议的题目，也就仅是能到这里了。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次看见的前面就标有极难的题目
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>解决mathjax公式不换行问题</title>
    <link href="http://blog.fivezha.cn/2020/07/23/mathjax-newline/"/>
    <id>http://blog.fivezha.cn/2020/07/23/mathjax-newline/</id>
    <published>2020-07-23T03:56:03.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>如何解决hexo中mathjax公式不换行<a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在<code>hexo</code>中写公式一般是用<code>LaTex</code>写然后利用<code>Mathjax</code>进行翻译来显示，但是当编写多行公式的时候，比如下面的公式的时候</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723115858343.png" alt="image-20200723115858343" title="">                </div>                <div class="image-caption">image-20200723115858343</div>            </figure><p>本来应该渲染出来如下效果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723141719914.png" alt="image-20200723141719914" title="">                </div>                <div class="image-caption">image-20200723141719914</div>            </figure><p>然而实际渲染出来确实下面这个样子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723115846661.png" alt="image-20200723115846661" title="">                </div>                <div class="image-caption">image-20200723115846661</div>            </figure><p>很让人头大，经过多方面排查，最终发现了问题的根源。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查看编译过后的html文件发现，其中的<code>\\</code>都被转义成了<code>\</code>，这样是无法利用<code>mathjax</code>进行显示换行的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142052704.png" alt="image-20200723142052704" title="">                </div>                <div class="image-caption">image-20200723142052704</div>            </figure><p>所以我们现在要做的很简单，便是把<code>\\</code>转义掉，不让它再被编译即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142327914.png" alt="image-20200723142327914" title="">                </div>                <div class="image-caption">image-20200723142327914</div>            </figure><p>可以看到已经被成功转义</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142423810.png" alt="image-20200723142423810" title="">                </div>                <div class="image-caption">image-20200723142423810</div>            </figure><p>现在公式已经会正常显示了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics//image-20200723142544542.png" alt="image-20200723142544542" title="">                </div>                <div class="image-caption">image-20200723142544542</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何解决hexo中mathjax公式不换行
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="latex" scheme="http://blog.fivezha.cn/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>如何利用GitHubAction和GithubPage部署React应用</title>
    <link href="http://blog.fivezha.cn/2020/07/21/github-action-demo/"/>
    <id>http://blog.fivezha.cn/2020/07/21/github-action-demo/</id>
    <published>2020-07-21T07:03:12.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>本文是从物联网工程与技术实践期末文档中抽取出来的，可能格式比较奇怪。<a id="more"></a></p><h2 id="GithubAction"><a href="#GithubAction" class="headerlink" title="GithubAction"></a>GithubAction</h2><p>官网的第一段，便讲明了此功能的用途和作用。</p><blockquote><p>在 GitHub 操作 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</p></blockquote><p>看上去云里雾里，其实就是利用yml进行的自定义脚本操作，用于测试/部署的时候的一些列繁琐重复工作实现全流水线自动化作业的功能。</p><h2 id="GithubPage"><a href="#GithubPage" class="headerlink" title="GithubPage"></a>GithubPage</h2><blockquote><p>您可以为自己、您的组织或项目设置一个基本 GitHub Pages 站点。</p></blockquote><p>白嫖Github服务器用来部署自己的web应用。部署后链接格式：<code>&lt;用户名&gt;.github.io/&lt;仓库名&gt;</code></p><h2 id="开始编写"><a href="#开始编写" class="headerlink" title="开始编写"></a>开始编写</h2><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724215856700.png" alt="图2.13 成功生成密钥" title="">                </div>                <div class="image-caption">图2.13 成功生成密钥</div>            </figure><p>此时会生成.pub的公钥与没有后缀的私钥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721154822499.png" alt="图2.14 成功生成密钥" title="">                </div>                <div class="image-caption">图2.14 成功生成密钥</div>            </figure><p>此时再将公钥私钥部署到GitHub：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721163516689.png" alt="image-20200721163516689" title="">                </div>                <div class="image-caption">image-20200721163516689</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image002.jpg" alt="图2.15 GitHub部署公钥" title="">                </div>                <div class="image-caption">图2.15 GitHub部署公钥</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721163738918.png" alt="image-20200721163738918" title="">                </div>                <div class="image-caption">image-20200721163738918</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image004.jpg" alt="图2.16 GitHub部署私钥" title="">                </div>                <div class="image-caption">图2.16 GitHub部署私钥</div>            </figure><h3 id="编写deploy-yml文件"><a href="#编写deploy-yml文件" class="headerlink" title="编写deploy.yml文件"></a>编写deploy.yml文件</h3><p>首先先在仓库根目录新建<code>.github/workflows</code>文件夹，然后在此文件夹下新建<code>deploy.yml</code>文件</p><p>然后编写此文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">[12.x]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">page</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./build</span></span><br></pre></td></tr></table></figure><p>此时自动化流程部署已完成，每次commit便会自动部署到GitHub服务器中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image001.png" alt="图2.17 GitHub部署流程" title="">                </div>                <div class="image-caption">图2.17 GitHub部署流程</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/clip_image003.jpg" alt="图2.18 自动化部署" title="">                </div>                <div class="image-caption">图2.18 自动化部署</div>            </figure><h3 id="添加依赖缓存"><a href="#添加依赖缓存" class="headerlink" title="添加依赖缓存"></a>添加依赖缓存</h3><p>上面的流程如果仔细查看的话，会发现一个问题——每一次commit都会进行一次<code>Install Package</code>的操作，这样不仅浪费了性能，还极大的浪费了时间，每一次都会浪费平均50s左右的时间进行依赖下载，占用了我们的开发时间，所以我在这里对于<code>node_modules</code>做了缓存操作，最终<code>deploy.yml</code>文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">[12.x]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">page</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./build</span></span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721160457703.png" alt="图2.19 未加缓存" title="">                </div>                <div class="image-caption">图2.19 未加缓存</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721160518125.png" alt="图2.20 添加缓存" title="">                </div>                <div class="image-caption">图2.20 添加缓存</div>            </figure><p>可以看到下载依赖的时间从42s变为了9s，可以说是质的飞跃了~</p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><a href="http://xmmmmmovo.github.io/IOTBP/" target="_blank" rel="noopener">部署成果查看</a></p><p><a href="https://github.com/xmmmmmovo/IOTBP" target="_blank" rel="noopener">Github仓库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是从物联网工程与技术实践期末文档中抽取出来的，可能格式比较奇怪。
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
      <category term="typescript" scheme="http://blog.fivezha.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>谜之github徽章以及存储介质感悟</title>
    <link href="http://blog.fivezha.cn/2020/07/18/github-arctic/"/>
    <id>http://blog.fivezha.cn/2020/07/18/github-arctic/</id>
    <published>2020-07-18T14:51:41.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>没想到居然这么快就投入使用了<a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;今天点开了许久未打开的GitHub，还没来得及点进动态查看大佬们star的项目之前，自己便先被一则消息吸引了，本着太长不看的原则，还未仔细查看便条件反射般的点了<code>Got it</code>的圆角矩形按钮。之后我的视线便顺着气泡凸起指向的位置寻去，发现了一枚雪花形状新徽章出现在了自己<code>Profile -&gt; Highlights</code>上，让那枚<code>Pro</code>徽章显得不那么孤单。查看了一下详细信息后，阿这，这不是半年前在油管看到过的<strong>GitHub北极代码库</strong>计划吗？！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200718231856879.png" alt="image-20200718231856879" title="">                </div>                <div class="image-caption">image-20200718231856879</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;当时因为新冠的原因宅在家里实在是太闲了，甚至无聊到了在油管搜索GitHub…….</p><p>&nbsp;&nbsp;&nbsp;&nbsp;然后就看到了下面的这个视频👇(Youtube视频，显示可能需要某些手段)</p><iframe width="890" height="500" src="https://www.youtube.com/embed/fzI9FNjXQ0o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>&nbsp;&nbsp;&nbsp;&nbsp;大致讲的就是把代码存一份到北极去留作备份，用以后来信息断层的人们考古用，用以最容易理解的符号表示解密方案（怎么越听越像自举），然后根据解密方案查找信息。wow，awesome！竟然这么快就上线了，不愧是微软时代的GitHub，有钱就是效率高啊。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;虽然没有被采用，但是我最感兴趣的还是其中提到的存储介质——<strong>磁带</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;说到磁带，应该可以说是很多人的“ 童年 ”了，每天晚上洗脚的时候，每天早晨吃饭的时候，本应该在愉快的动画中度过的时间，被硬生生的安排成英语听力时间，每天听着机械一般的无感情的单词朗读和强挤出来的好似使出了自己毕生实力的浮夸演技对话仅是为了那用于糊弄老师的好似无上的圣旨一般的家长签字。有过类似经历的hxd们估计已经时会心一笑了，然而随着时代发展，磁带这一承载着童年回忆的物件如今却基本上在生活消费市场上销声匿迹了，现代课本也已经基本上全面使用光盘作为附载信息的存储介质了。然而，磁带作为一种经历了半个多世纪的存储介质，却从未消亡，沦为收藏家的玩物，反而在更加高精尖的研究机构/企业存储中继续发光发热。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的言论并非胡思乱想的民科行为，而是实打实的存在有公开数据的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719125239292.png" alt="image-20200719125239292" title="">                </div>                <div class="image-caption">image-20200719125239292</div>            </figure><p><a href="http://www.radi.cas.cn/gdxx/tzgg/201805/t20180521_5013864.html" target="_blank" rel="noopener"><strong>中国科学院遥感与数字地球研究所LTO磁带采购公告👆</strong></a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719125412481.png" alt="image-20200719125412481" title="">                </div>                <div class="image-caption">image-20200719125412481</div>            </figure><p><a href="http://big.ac.cn/xwzx/kyjz/201501/t20150128_4306330.html" target="_blank" rel="noopener"><strong>基因组研究所海量磁带库备份系统正式投入运行👆</strong></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，甚至在中国科学院内部，磁带依旧是很重要的存储介质，不仅在国内，国外各大研究机构也是磁带的“大客户”：</p><p><a href="https://www.osti.gov/etdeweb/servlets/purl/20315863" target="_blank" rel="noopener"><strong>国际评价中子核数据库</strong></a>中便多次提到磁带，并且明确提出离线检索中包含磁带数据，可以说，磁带只不过换了一种新的方式存在，并且发展的更加茁壮。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;讲到这里，肯定很多人都会有着大大的疑惑——为什么这些研究机构不使用更加“现代”的存储工具呢？咱们接着往下看。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;猛然提到研究机构有点让人不知所措，不如我们先从一些旧照片中找寻一下线索：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1960s-woman-data-entry-computer-b-5000-vintage-images.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/56ff99412e0fa0da59ac26059574bc1c.jpg" alt="ibm 1960s | Ibm, Old computers" title="">                </div>                <div class="image-caption">ibm 1960s | Ibm, Old computers</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/d7d48f381d510e9d588ea96121280934.jpg" alt="This room-sized IBM computer from the 1960s was awesome in it's" title="">                </div>                <div class="image-caption">This room-sized IBM computer from the 1960s was awesome in it's</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;上面一组照片拍摄于上世纪60年代，可以看到当时的磁带存放并用于大型机房，由专业的操作员进行专业的操作的，没错，1952年，IBM成功发布了计算机业内的第一款磁带机，拉开了磁带发展第一时期的序幕。这一时期延续了35年，主要特征是圆轴磁带的使用，并且需要人工手动操作(装载、卸载和归档)。如果说当时使用磁带是没有选择，那么为什么现代科研机构也还是继续使用磁带呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;别急，接着往下讲，时间跨越到千禧年往后的2002年，此时磁带跨越了第二个时代——近现时代，此时磁带已经不需要那种大型磁带驱动器，不专用于主机，这让便携和低成本产品得以于平民消费市场面世，自然，廉价的存储介质和便于携带的特性很快便掀起了一股风潮……同年，磁带的容量首次超过了最大磁盘的容量，过去，一个磁盘所能容纳的信息量往往需要多盒磁带才能装得下；但是现在情况完全反过来，一盒磁带就可以容纳多个磁盘的数据。磁盘的失败从此便可见一斑。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/49-131215-9-4.jpg" alt="随身携带的磁带播放器" title="">                </div>                <div class="image-caption">随身携带的磁带播放器</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;后面的事情大家也都经历了，计算机硬盘/软盘的出现，改变了家用电脑的存储境况，单位体积的容量大大提升，全面改善了用户体验，这使得家用电脑短暂的磁带存储介质的时代极其短暂。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-afaea03afc6c7d936cf24933f9081a87_r.jpg" alt="苹果Ⅱ 使用磁带作为存储媒介" title="">                </div>                <div class="image-caption">苹果Ⅱ 使用磁带作为存储媒介</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-a05960f41b5058867fc363c6b737c993_r.jpg" alt="苹果Ⅱ 使用磁带作为存储媒介" title="">                </div>                <div class="image-caption">苹果Ⅱ 使用磁带作为存储媒介</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-b8f4941449f99d7e6cff36972e5eabd2_r.jpg" alt="雅达利5200" title="">                </div>                <div class="image-caption">雅达利5200</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;从这里，其实就可以看出民用设备与科研设备选用上的些许差距了，民用设备主要讲究的就是成本和便利，而科研设备主要考虑的则是稳定性和持久性。好了说了这么多，大概历史也说明了，磁带作为一种历史悠久的存储介质，甚至一直到2002年还在发展，但是其单位体积的存储容量使得其无法在民用大放异彩。总结一下，磁带价格低廉，发展没有落后，但是单位体积存储容量小。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;相信已经有人分析出来结果了，在这里我引用一下<strong>CERN</strong>数据存储主管<strong>Alberto Pace</strong>的分析来说明优点</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;相比硬盘，磁带储存拥有4大优势：虽然，磁带的装卸是落后的，即使在自动化装置协助下，在储存库中找出对应的磁带并装入读取装置中最快也需要40秒。但是一旦就绪后，磁带的读取速度却可以达到硬盘的4倍。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;其次是可靠性。磁带也会遇到损毁的情况，如断裂。但断裂后的磁带仍可以重新接上，而且仅会造成数百MB的损失——这对于动辄上TB的专业储存设备来说，实在小事一桩。但对硬盘来说，物理损坏甚至会导致全部数据丢失。CERN的实际数据是，他们每年储存在磁带上的100PB数据（1PB相当于1000TB），每年会损失数百MB；相对的，储存在硬盘上的50PB 数据，这个数字则达数百TB。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;还有就是，对于磁带来说，突然断电也不会损坏记录下来的资料，但对于硬盘来说，这是一件危险的事情。<br>​&nbsp;&nbsp;&nbsp;&nbsp;最后也是最重要的，是磁盘一定程度上更加安全。比如说如果一间公司的数据中心被黑客劫持，他可以在数分钟内让硬盘上50PB数据从此在世上消失，但如果磁带的话，不好意思，可能需要数年。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;不过，磁带储存并非只与那些每秒就碰撞出几个GB的核子对撞实验室有密切联系。调查表明，磁带储存也同样适合中小型企业。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，磁带储存更便宜也更持久。数据在磁带上往往能存放超过30年；硬盘超过5年的话，如果你是公司的IT主管，你就需要考虑将数据转移了。而且磁带目前仍然是储存成本最低的解决方案，目前大概每GB数据在磁带上的成本为4美分，硬盘的话则为10美分。如果考虑到前面所说的寿命问题，差距将会更大。所以，磁带在展示还并没有出现真正消亡的迹象，我们也看到了这个老一代的产品所寻求的生存潜力。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;好了，讲完了一个传奇的历史，其实最让我惊奇的是一个已经淡出生活的物件竟然在另外一个领域还有这不俗的影响，磁带就如同软件语言的<code>C++</code>一样，“老” ，乃于它的历史。而技术却一直在改良。磁带和其他大部分储存媒介一样，磁带的储存密度也一直在攀升（遵循摩尔定律）。其实这种想当然的事情并不少见，比如常年混迹手机圈子的人，总会说一句：</p><blockquote><p>索尼要凉</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;但其实呢，索尼靠着全世界的音乐版权，hi-res，PS系列，相机，电视······如此之多的产业早就让索尼赚的盆满钵满，说不准手机产业就是拿来试水的，到时候，公开宣布退出的时候，大抵又会有人说道：</p><blockquote><p>索尼果然凉了</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，这其实很正常，因为人类就是这样的生物，在<strong>丹尼尔 · 卡尼曼</strong>所著的<strong>《思考，快与慢》</strong>第五章中便描述了这种现象，下面我提出一个问题，再做出分析：</p><blockquote><p>现在我公司有大量的重要数据集静态资源需要长时间稳定使用，仅是用于读取，请问我选取存储介质的时候是选用SSD还是HDD呢？</p></blockquote><p>请作答。</p><p>。</p><p>。</p><p>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;hummmmm，相信有人很快选了HDD了，因为长时间稳定存储还是大量的存储，听说过SSD损耗的估计都早早排除了SSD这个选项了。事实上呢，这里应该选用SSD，因为仅是用于读取，而SSD的读取是不会有损耗的，仅是写入会有损耗（这里可以去看一下SSD原理就明白了），所以这里建议选取快速的SSD更佳。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，你可能会说：“这SSD读取不损耗我也不知道啊”，那你为什么不去百度呢？其实这里是你的“系统1”——经验系统在作怪，你想当然的把你已知的信息带入了当前环境中来，导致你不能存在客观的逻辑判断。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面是原书中的形容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719194910451.png" alt="a" title="">                </div>                <div class="image-caption">a</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719194943595.png" alt="b" title="">                </div>                <div class="image-caption">b</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;几乎可以说，我们大多数时间都不能离开这个系统，它能帮助我们做出大量的简单的判断，比如闹铃响了需要关闹铃，手机没电了需要充电，这些都是由你的“系统1”来做出判断，但当你被这个系统牵着鼻子走，很少觉得自己会有“系统2”判断的时候，便是你需要警觉的时候，因为，我们独立思考的人格，才是我们作为一个活在这个多面的世界中的最好体现。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这便是小弟的一点点延展思考，仅代表自己的观点，欢迎反驳，但是不喜勿喷，和平讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没想到居然这么快就投入使用了
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="思考感悟" scheme="http://blog.fivezha.cn/tags/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(5)---约瑟夫环问题</title>
    <link href="http://blog.fivezha.cn/2020/07/17/algorithm4-Josephus/"/>
    <id>http://blog.fivezha.cn/2020/07/17/algorithm4-Josephus/</id>
    <published>2020-07-17T09:24:23.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>约瑟夫环问题（蛮力，数学解法）<a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>约瑟夫问题是一个很著名的<del>杀人</del>问题：</p><p>约瑟夫问题是个著名的问题：N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。<br>例如：只有三个人，把他们叫做A、B、C，他们围成一圈，从A开始报数，假设报2的人被杀掉。</p><ul><li>首先A开始报数，他报1。侥幸逃过一劫。</li><li>然后轮到B报数，他报2。非常惨，他被杀了</li><li>C接着从1开始报数</li><li>接着轮到A报数，他报2。也被杀死了。</li><li>最终胜利者是C</li></ul><p>可怜，真可怜，数学家真是心狠手辣（雾）</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>这里跟算法第四版的输入有点不一样，这里我们有三个参数：</p><ul><li>总人数</li><li>剩余人数</li><li>间隔人数</li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>最后剩余人的编号合集，由逗号分隔</p><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>顾名思义，求，就是嗯求，靠着大量循环做出来的结果。</p><p>循环删除直到剩余人数到需要的人数，每一次循环都删除间隔人数后的那个，最后剩下来的就是活着的人。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721161113695.png" alt="image-20200721161113695" title="">                </div>                <div class="image-caption">image-20200721161113695</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>这里有两个实现，可以使用双向队列实现，也可以用循环链表实现。</p><h4 id="双向队列实现"><a href="#双向队列实现" class="headerlink" title="双向队列实现"></a>双向队列实现</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向队列暴力求法</span></span><br><span class="line"><span class="comment"> * 就是嗯求</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">queueForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="comment">// 初始化队列</span></span><br><span class="line">    <span class="keyword">val</span> deque = Deque&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">            pushRight(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有到剩余人数就继续循环</span></span><br><span class="line">    <span class="keyword">while</span> (deque.size != remainPeople) &#123;</span><br><span class="line">        <span class="comment">// 跳过间隔人数</span></span><br><span class="line">        <span class="comment">// 这里的跳过为了不影响后面的循环做的是左出右进的方案</span></span><br><span class="line">        <span class="keyword">for</span> (q <span class="keyword">in</span> <span class="number">1</span> until intervalPeople)</span><br><span class="line">            deque.pushRight(deque.popLeft())</span><br><span class="line">        deque.popLeft()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        deque.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">            append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">            <span class="keyword">if</span> (index != deque.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双向队列实现请看<a href="https://blog.fivezha.cn/2020/07/17/algorithm4-1-4/">算法(第四版)笔记(4)—Deque,Buffer,四数之和,三数之和</a></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>时间复杂度：</p><p>这里的<strong>双向队列</strong>采用的是<strong>链表</strong>实现，所以进出队列的时间复杂度都是$\mathcal{O}(1)$，所以仅用计算循环时间复杂度。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R)*I)<br>$$<br>空间复杂度：</p><p>存在中间数据结构双向队列，非常数级空间复杂度。<br>$$<br>\mathcal{O}(N)<br>$$</p><h4 id="循环链表实现"><a href="#循环链表实现" class="headerlink" title="循环链表实现"></a>循环链表实现</h4><p>循环链表循环链表，就是说头尾相连的链表<del>(就像是人体蜈蚣那样)</del></p><p>所以首先来实现循环链表：</p><h5 id="循环链表实现-1"><a href="#循环链表实现-1" class="headerlink" title="循环链表实现"></a>循环链表实现</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环链表</span></span><br><span class="line"><span class="comment"> * 此类仅用于约瑟夫环问题 所以api设计很简单</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableIterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> last: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size</span><br><span class="line">        <span class="keyword">get</span>() = _size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n = first</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = n.next</span><br><span class="line">            <span class="comment">// 快速gc</span></span><br><span class="line">            n.item = <span class="literal">null</span></span><br><span class="line">            n.next = <span class="literal">null</span></span><br><span class="line">            n.prev = <span class="literal">null</span></span><br><span class="line">            n = next</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="literal">null</span></span><br><span class="line">        last = <span class="literal">null</span></span><br><span class="line">        _size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = _size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        linkedLast(element)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> IteratorImpl(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNode</span><span class="params">(index: <span class="type">Int</span>)</span></span>: Node&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> reIndex = index % _size</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (reIndex &lt; (_size shr <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> node = first</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until index) &#123;</span><br><span class="line">                node = node?.next</span><br><span class="line">            &#125;</span><br><span class="line">            node!!</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> node = last</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> _size - <span class="number">2</span> downTo index) &#123;</span><br><span class="line">                node = node?.prev</span><br><span class="line">            &#125;</span><br><span class="line">            node!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedLast</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> l = last</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, l, <span class="literal">null</span>)</span><br><span class="line">        last = nNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l.next = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        first!!.prev = nNode</span><br><span class="line">        nNode.next = first</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlink</span><span class="params">(node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> npre = node.prev</span><br><span class="line">        <span class="keyword">val</span> nnext = node.next</span><br><span class="line">        <span class="keyword">val</span> nitem = node.item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (npre == last &amp;&amp; nnext == first) &#123;</span><br><span class="line">            last = <span class="literal">null</span></span><br><span class="line">            first = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == first)</span><br><span class="line">                first = nnext</span><br><span class="line">            <span class="keyword">if</span> (node == last)</span><br><span class="line">                last = npre</span><br><span class="line">            npre!!.next = nnext</span><br><span class="line">            nnext!!.prev = npre</span><br><span class="line">            node.next = <span class="literal">null</span></span><br><span class="line">            node.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.item = <span class="literal">null</span></span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> nitem!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转字符串方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">when</span> (_size) &#123;</span><br><span class="line">            <span class="number">0</span> -&gt; <span class="keyword">return</span> <span class="string">"[]"</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">                sb.append(<span class="string">"["</span>)</span><br><span class="line">                <span class="keyword">var</span> n = first</span><br><span class="line">                <span class="keyword">while</span> (n != last) &#123;</span><br><span class="line">                    sb.append(<span class="string">"<span class="subst">$&#123;n!!.item&#125;</span>, "</span>)</span><br><span class="line">                    n = n.next</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">"<span class="subst">$&#123;n!!.item&#125;</span>]"</span>).toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">                <span class="keyword">var</span> item: T?,</span><br><span class="line">                <span class="keyword">var</span> prev: Node&lt;T&gt;?,</span><br><span class="line">                <span class="keyword">var</span> next: Node&lt;T&gt;?</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看位置是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkPositionIndex</span><span class="params">(index: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"index: <span class="variable">$index</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorImpl</span></span>(</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> index: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) : MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> lastReturned: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            checkPositionIndex(index, size)</span><br><span class="line">            current = getNode(index)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = current != <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            lastReturned = current</span><br><span class="line">            current = current?.next</span><br><span class="line">            index++</span><br><span class="line">            <span class="keyword">return</span> lastReturned?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            unlink(lastReturned ?: <span class="keyword">throw</span> IllegalStateException())</span><br><span class="line">            index--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主函数实现"><a href="#主函数实现" class="headerlink" title="主函数实现"></a>主函数实现</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">linkedListForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> cl = CircularLinkedList&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">            add(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> iter = cl.iterator()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext() &amp;&amp; cl.size != remainPeople) &#123;</span><br><span class="line">        iter.next()</span><br><span class="line">        cnt++</span><br><span class="line">        <span class="keyword">if</span> (cnt == intervalPeople) &#123;</span><br><span class="line">            iter.remove()</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        cl.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">            append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">            <span class="keyword">if</span> (index != cl.size - <span class="number">1</span>) append(<span class="string">", "</span>) <span class="keyword">else</span> <span class="keyword">return</span><span class="symbol">@apply</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>时间复杂度：</p><p>这里使用的是<strong>循环链表</strong>实现，所以进出队列的时间复杂度都是$\mathcal{O}(1)$，所以仅用计算循环时间复杂度。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R)*I)<br>$$<br>空间复杂度：</p><p>存在中间数据结构循环链表，非常数级空间复杂度。<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="数学解法"><a href="#数学解法" class="headerlink" title="数学解法"></a>数学解法</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>其实数学解法也是应用了一种环的思想，但环思想在此解法中仅是辅助作用，主要的思想是<code>倒推</code>和<code>数学归纳法</code>的应用。</p><p>我们先从<code>(T = 2, R = 1, I = 3)</code>开始看起：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/v2-20ec6f3cc6f423abcd3b6ec1cc06eacf_r.jpg" alt="preview" title="">                </div>                <div class="image-caption">preview</div>            </figure><p>可以看到，</p><p>第一轮删除了<strong>2</strong>，所以第二轮就从<strong>2</strong>后面的一位元素开始。</p><p>因为我们假设整个数组也是环形的，所以数组结尾后面的元素也是开始的元素，如此反复，所以第二轮删除了<strong>0</strong></p><p>同理，第三轮删除了<strong>4</strong></p><p>第四轮删除了<strong>1</strong></p><p>这样，完整的过程我们就模拟完成了，这也是我们前两种方法的主要思路，模拟整个过程，完成计算。但其实，我们并不需要观察整个数组变化的过程，我们只需要观察我们所需要的关键元素就可以了，在这里即是<strong>3</strong>，我们从最后一轮选择出的结果倒推，直到推导出此元素最开始在原数组中的位置即可直接输出原数组中的元素。注意：这里我们是先正向推导了一遍才可以直接看出来数字是<strong>3</strong>的，真实情况下我们是不需要正向推导，而是从结果来反推。</p><p>比如上面的例子，第一轮反推，我们首先抛弃数字的概念，设定最后选出来的数字<strong>x</strong>的下标是<strong>0</strong>。</p><p>为反推到第四轮首先先补上间隔数字，得出<strong>[a, x, | a, x]</strong>，此时<strong>x</strong>下标为<strong>1</strong></p><p>再往上反推，得出<strong>[a , x , b, | a, x]</strong>，所以<strong>x</strong>下标为<strong>1</strong></p><p>再往上，<strong>[x, b, c, a, | x, b]</strong>，所以<strong>x</strong>下标为<strong>0</strong></p><p>再往后就是<strong>[c, a , d, x, b, | c, a]</strong>，所以最终<strong>x</strong>的坐标就是<strong>3</strong></p><p>从此，我们可以发现，每一次倒推的数组组成都是<strong>末尾+新数字+开头</strong>的反向三明治结构，这就导致每一次倒推的数字下标是$(index + I) \mod K$，$K$为反推后数组大小。</p><p>根据数学归纳法，可以推出如下公式：</p><p>设函数$f(K, I)$为$K$个报数时，间隔人数为$I$的时候，所求最终胜出的人的编号。<br>$$<br>f(K, I) = (f(K - 1, I) + I) \mod K<br>$$<br>测试一下<br>$$<br>f(1,3) = 0\\<br>f(2,3) = (f(1, 3) + 3) \mod 2 = 1\\<br>f(3,3) = (f(2, 3) + 3) \mod 3 = 1\\<br>f(4,3) = (f(3, 3) + 3) \mod 4 = 0\\<br>f(5,3) = (f(4, 3) + 3) \mod 5 = 3<br>$$<br>结果正确~</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="数学实现"><a href="#数学实现" class="headerlink" title="数学实现"></a>数学实现</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mathFastSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> k = MutableList(remainPeople) &#123; it &#125;</span><br><span class="line">    <span class="keyword">for</span> (idx <span class="keyword">in</span> remainPeople + <span class="number">1</span>..totalPeople) &#123;</span><br><span class="line">        k.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                          k[index] = (i + intervalPeople) % idx</span><br><span class="line">                         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        k.map &#123; it + <span class="number">1</span> &#125;</span><br><span class="line">        .forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                         append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                         <span class="keyword">if</span> (index != k.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h6><p>时间复杂度：</p><p>这里使用的是<strong>数学方法</strong>实现。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R+1)*R)<br>$$<br>空间复杂度：</p><p>不存在中间数据结构，仅是用到了循环变量，所以是常数级空间复杂度。<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="类实现"><a href="#类实现" class="headerlink" title="类实现"></a>类实现</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithms</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ds.CircularLinkedList</span><br><span class="line"><span class="keyword">import</span> ds.Deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JosephusSolutions</span></span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> totalPeople: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> intervalPeople: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> remainPeople: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        checkArguments()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkArguments</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">                totalPeople &lt;= <span class="number">0</span> || remainPeople &lt;= <span class="number">0</span> || intervalPeople &lt;= <span class="number">0</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"人数不能小于等于0！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalPeople &lt; remainPeople)</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"总人数不能小于剩余人数！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changePeopleNumbers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            totalPeople: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            intervalPeople: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            remainPeople: <span class="type">Int</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPeople = totalPeople</span><br><span class="line">        <span class="keyword">this</span>.intervalPeople = intervalPeople</span><br><span class="line">        <span class="keyword">this</span>.remainPeople = remainPeople</span><br><span class="line">        checkArguments()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向队列暴力求法</span></span><br><span class="line"><span class="comment">     * 就是嗯求</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queueForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="comment">// 初始化队列</span></span><br><span class="line">        <span class="keyword">val</span> deque = Deque&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">                pushRight(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有到剩余人数就继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (deque.size != remainPeople) &#123;</span><br><span class="line">            <span class="comment">// 跳过间隔人数</span></span><br><span class="line">            <span class="comment">// 这里的跳过为了不影响后面的循环做的是左出右进的方案</span></span><br><span class="line">            <span class="keyword">for</span> (q <span class="keyword">in</span> <span class="number">1</span> until intervalPeople)</span><br><span class="line">                deque.pushRight(deque.popLeft())</span><br><span class="line">            deque.popLeft()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            deque.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != deque.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">linkedListForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="keyword">val</span> cl = CircularLinkedList&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">                add(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> iter = cl.iterator()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext() &amp;&amp; cl.size != remainPeople) &#123;</span><br><span class="line">            iter.next()</span><br><span class="line">            cnt++</span><br><span class="line">            <span class="keyword">if</span> (cnt == intervalPeople) &#123;</span><br><span class="line">                iter.remove()</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            cl.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != cl.size - <span class="number">1</span>) append(<span class="string">", "</span>) <span class="keyword">else</span> <span class="keyword">return</span><span class="symbol">@apply</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mathFastSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="keyword">val</span> k = MutableList(remainPeople) &#123; it &#125;</span><br><span class="line">        <span class="keyword">for</span> (idx <span class="keyword">in</span> remainPeople + <span class="number">1</span>..totalPeople) &#123;</span><br><span class="line">            k.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                k[index] = (i + intervalPeople) % idx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            k.map &#123; it + <span class="number">1</span> &#125;.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != k.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;约瑟夫环问题（蛮力，数学解法）
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(4)---Deque,Buffer</title>
    <link href="http://blog.fivezha.cn/2020/07/17/algorithm4-1-4/"/>
    <id>http://blog.fivezha.cn/2020/07/17/algorithm4-1-4/</id>
    <published>2020-07-17T01:36:36.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>双向队列,双栈缓冲区的实现<a id="more"></a></p><h2 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200717093114582.png" alt="image-20200717093114582" title="">                </div>                <div class="image-caption">image-20200717093114582</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Deque</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向队列类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span>&lt;<span class="type">T</span>&gt; : <span class="type">Collection</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> list = LinkedList&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span> = list.size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushLeft</span><span class="params">(element: <span class="type">T</span>)</span></span> = list.addFirst(element)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">(element: <span class="type">T</span>)</span></span> = list.addLast(element)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popLeft</span><span class="params">()</span></span>: T = list.removeFirst()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popRight</span><span class="params">()</span></span>: T = list.removeLast()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = list.size</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含[element]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含所有[elements]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">containsAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (elements.isEmpty())</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            elements.all &#123;</span><br><span class="line">                contains(it)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看[element]的位置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">indexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == element) &#123;</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> list.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.iterator()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于双向链表的实现见这篇博客: <a href="https://blog.fivezha.cn/2020/07/13/algorithm4-linkedlist/">算法(第四版)笔记(3)—双向链表(LinkedList)实现</a></p><h2 id="缓冲区Buffer"><a href="#缓冲区Buffer" class="headerlink" title="缓冲区Buffer"></a>缓冲区Buffer</h2><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200717093315081.png" alt="image-20200717093315081" title="">                </div>                <div class="image-caption">image-20200717093315081</div>            </figure><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> ls = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rs = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(c: <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">        ls.push(c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">()</span></span>: <span class="built_in">Char</span> =</span><br><span class="line">        <span class="keyword">if</span> (ls.size() == <span class="number">0</span>) <span class="keyword">throw</span> NoSuchElementException(<span class="string">"无法删除"</span>)</span><br><span class="line">        <span class="keyword">else</span> ls.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">left</span><span class="params">(k: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; ls.size()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"无法到达"</span>)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..k) &#123;</span><br><span class="line">            rs.push(ls.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">right</span><span class="params">(k: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; rs.size()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"无法到达"</span>)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..k) &#123;</span><br><span class="line">            ls.push(rs.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = ls.size() + rs.size()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder().also &#123;</span><br><span class="line">            it.append(ls)</span><br><span class="line">            it.reverse()</span><br><span class="line">            it.append(<span class="string">" | "</span>)</span><br><span class="line">            it.append(rs)</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于栈的实现见这篇博客:<a href="https://blog.fivezha.cn/2020/07/11/algorithm4th-1/#%E6%A0%88">算法(第四版)笔记(1)—简单类的实现</a></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200717095951864.png" alt="image-20200717095951864" title="">                </div>                <div class="image-caption">image-20200717095951864</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200717095958140.png" alt="image-20200717095958140" title="">                </div>                <div class="image-caption">image-20200717095958140</div>            </figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;双向队列,双栈缓冲区的实现
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(3)---双向链表(LinkedList)实现</title>
    <link href="http://blog.fivezha.cn/2020/07/13/algorithm4-linkedlist/"/>
    <id>http://blog.fivezha.cn/2020/07/13/algorithm4-linkedlist/</id>
    <published>2020-07-13T11:59:21.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>根据算法第四版和源码进行的链表实现，主要实现<code>MutableList&lt;T&gt;</code>接口和<code>MutableListIterator&lt;T&gt;</code>迭代器<a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>主要是实现<code>MutableList&lt;T&gt;</code>接口，迭代器实现<code>MutableListIterator&lt;T&gt;</code>接口。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>链表，就是一个一个节点连接起来的数据结构，这种数据结构优点是<strong>使用过的空间大小和元素数量成正比且增删时间复杂度低</strong>，缺点则是<strong>查找困难，需要通过引用访问任意元素</strong>。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="增删"><a href="#增删" class="headerlink" title="增删"></a>增删</h4><p>在这一部分主要需要特别考虑的几种情况：</p><ul><li>在表头插入节点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200715151744188.png" alt="image-20200715151744188" title="">                </div>                <div class="image-caption">image-20200715151744188</div>            </figure><ul><li>删除表头结点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200715151824396.png" alt="image-20200715151824396" title="">                </div>                <div class="image-caption">image-20200715151824396</div>            </figure><ul><li>在表尾插入节点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200715151838973.png" alt="image-20200715151838973" title="">                </div>                <div class="image-caption">image-20200715151838973</div>            </figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>迭代方面，主要是实现<code>MutableListIterator&lt;T&gt;</code>，当要遍历的时候仅需要</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = LinkedList&lt;String&gt;()</span><br><span class="line"><span class="keyword">for</span> (n <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = LinkedList&lt;String&gt;()</span><br><span class="line"><span class="keyword">val</span> mutableListIterator = numbers.listIterator()</span><br><span class="line"><span class="keyword">while</span> (mutableListIterator.hasNext()) &#123;</span><br><span class="line">    mutableListIterator.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>便可。</p><p>迭代过程的<code>remove()</code>和<code>add()</code>则是实现当前节点的删除和在当前节点之前添加的功能。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.NoSuchElementException</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> last: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _size: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在尾部插入[element]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        linkedLast(element)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 让[element]成为[index]位置的节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        checkPositionIndex(index, size)</span><br><span class="line">        <span class="keyword">if</span> (index == _size) &#123;</span><br><span class="line">            linkedLast(element)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            linkedBefore(element, getNode(index))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 让[index]位置成为[elements]的第一个节点位置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(index: <span class="type">Int</span>, elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        checkPositionIndex(index, size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (elements.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里的两个节点代表着插入节点的前后节点</span></span><br><span class="line">        <span class="keyword">var</span> pred: Node&lt;T&gt;?</span><br><span class="line">        <span class="keyword">var</span> succ: Node&lt;T&gt;?</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否是最尾部插入</span></span><br><span class="line">        <span class="keyword">if</span> (index == _size) &#123;</span><br><span class="line">            succ = <span class="literal">null</span></span><br><span class="line">            pred = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            succ = getNode(index)</span><br><span class="line">            pred = succ.prev</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (e <span class="keyword">in</span> elements) &#123;</span><br><span class="line">            <span class="keyword">val</span> nNode = Node(e, pred, <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明是在首节点插入的</span></span><br><span class="line">                first = nNode</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 一直往后插入</span></span><br><span class="line">                pred.next = nNode</span><br><span class="line">            &#125;</span><br><span class="line">            pred = nNode</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = pred</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pred!!.next = succ</span><br><span class="line">            succ.prev = pred</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _size += elements.size</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在尾部添加[elements]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        addAll(_size, elements)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n = first</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = n.next</span><br><span class="line">            <span class="comment">// 快速gc</span></span><br><span class="line">            n.item = <span class="literal">null</span></span><br><span class="line">            n.next = <span class="literal">null</span></span><br><span class="line">            n.prev = <span class="literal">null</span></span><br><span class="line">            n = next</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="literal">null</span></span><br><span class="line">        last = <span class="literal">null</span></span><br><span class="line">        _size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除为[element]的节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.item == element) &#123;</span><br><span class="line">                unlink(node)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (containsAll(elements)) elements.all &#123;</span><br><span class="line">            remove(it)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除[index]位置的节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAt</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">val</span> node = getNode(index)</span><br><span class="line">        <span class="keyword">val</span> item = node.item</span><br><span class="line">        unlink(node)</span><br><span class="line">        <span class="keyword">return</span> item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">retainAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (containsAll(elements)) &#123;</span><br><span class="line">            clear()</span><br><span class="line">            addAll(elements)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设定[index]为[element]并返回旧值</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">return</span> getNode(index).run &#123;</span><br><span class="line">            item!!.also &#123;</span><br><span class="line">                item = element</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含[element]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含所有[elements]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">containsAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (elements.isEmpty())</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            elements.all &#123;</span><br><span class="line">                contains(it)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取[index]节点数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">return</span> getNode(index).item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">indexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == element) &#123;</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表是否为空</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = _size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以查到的最后一个元素</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">lastIndexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = _size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> node = last</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.item == element) &#123;</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">            &#125;</span><br><span class="line">            index--</span><br><span class="line">            node = node.prev</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回迭代器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回列表迭代器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">()</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedListIterator(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回从某个index开始的迭代器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">(index: <span class="type">Int</span>)</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">return</span> LinkedListIterator(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回子列表</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">subList</span><span class="params">(fromIndex: <span class="type">Int</span>, toIndex: <span class="type">Int</span>)</span></span>: MutableList&lt;T&gt; &#123;</span><br><span class="line">        checkRangeIndexes(fromIndex, toIndex, size)</span><br><span class="line">        <span class="keyword">val</span> res = LinkedList&lt;T&gt;()</span><br><span class="line">        <span class="keyword">var</span> i = fromIndex</span><br><span class="line">        <span class="keyword">var</span> n = getNode(fromIndex)</span><br><span class="line">        <span class="keyword">while</span> (i &lt; toIndex) &#123;</span><br><span class="line">            res.add(n.item!!)</span><br><span class="line">            i++</span><br><span class="line">            n = n.next!!</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取链表长度</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = _size</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取首节点数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getFirst</span><span class="params">()</span></span>: T = first?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取尾节点数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getLast</span><span class="params">()</span></span>: T = last?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        first = last.also &#123;</span><br><span class="line">            last = first</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> n = first</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">            n.prev = n.next.also &#123;</span><br><span class="line">                n!!.next = n!!.prev</span><br><span class="line">            &#125;</span><br><span class="line">            n = n.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加首节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addFirst</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        linkedFirst(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addLast</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        linkedLast(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除首节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeFirst</span><span class="params">()</span></span>: T = unlinkFirst()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeLast</span><span class="params">()</span></span>: T = unlinkLast()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个节点</span></span><br><span class="line"><span class="comment">     * 判断1/2的size然后从左往右或者从右往左查找</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNode</span><span class="params">(index: <span class="type">Int</span>)</span></span>: Node&lt;T&gt; = <span class="keyword">if</span> (index &lt; (_size shr <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until index) &#123;</span><br><span class="line">            node = node?.next</span><br><span class="line">        &#125;</span><br><span class="line">        node!!</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = last</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> _size - <span class="number">2</span> downTo index) &#123;</span><br><span class="line">            node = node?.prev</span><br><span class="line">        &#125;</span><br><span class="line">        node!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接首节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedFirst</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> f = first</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, <span class="literal">null</span>, f)</span><br><span class="line">        first = nNode</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = nNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f.prev = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接到[node]节点前面</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedBefore</span><span class="params">(item: <span class="type">T</span>, node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> prev = node.prev</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, prev, node)</span><br><span class="line">        node.prev = nNode</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = nNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedLast</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> l = last</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, l, <span class="literal">null</span>)</span><br><span class="line">        last = nNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l.next = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解除首部连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlinkFirst</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> f = first ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        <span class="keyword">val</span> item = f.item</span><br><span class="line">        <span class="keyword">val</span> next = f.next</span><br><span class="line">        <span class="comment">// 快速GC</span></span><br><span class="line">        f.next = <span class="literal">null</span></span><br><span class="line">        f.item = <span class="literal">null</span></span><br><span class="line">        first = next</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> item!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解除尾部连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlinkLast</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> l = last ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        <span class="keyword">val</span> item = l.item</span><br><span class="line">        <span class="keyword">val</span> prev = l.prev</span><br><span class="line">        <span class="comment">// 快速GC</span></span><br><span class="line">        l.item = <span class="literal">null</span></span><br><span class="line">        l.prev = <span class="literal">null</span></span><br><span class="line">        last = prev</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> item!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlink</span><span class="params">(node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> np = node.prev</span><br><span class="line">        <span class="keyword">val</span> nn = node.next</span><br><span class="line">        <span class="keyword">val</span> ne = node.item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (np == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = nn</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            np.next = nn</span><br><span class="line">            node.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nn == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = np</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nn.prev = np</span><br><span class="line">            node.next = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.item = <span class="literal">null</span></span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> ne!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * " == " 方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(other: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (other === <span class="keyword">this</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> (other !<span class="keyword">is</span> List&lt;*&gt;) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderedEquals(<span class="keyword">this</span>, other)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash计算</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hashCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> = orderedHashCode(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转字符串方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">when</span> (_size) &#123;</span><br><span class="line">            <span class="number">0</span> -&gt; <span class="keyword">return</span> <span class="string">"[]"</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">                sb.append(<span class="string">"["</span>)</span><br><span class="line">                <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">                <span class="keyword">val</span> max = _size - <span class="number">1</span></span><br><span class="line">                <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">                    sb.append(it)</span><br><span class="line">                    <span class="keyword">if</span> (idx == max) <span class="keyword">return</span> sb.append(<span class="string">"]"</span>).toString()</span><br><span class="line">                    sb.append(<span class="string">", "</span>)</span><br><span class="line">                    idx++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">"]"</span>).toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 节点类</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">            <span class="keyword">var</span> item: T?,</span><br><span class="line">            <span class="keyword">var</span> prev: Node&lt;T&gt;? = <span class="literal">null</span>,</span><br><span class="line">            <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看element是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkElementIndex</span><span class="params">(index: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"index: <span class="variable">$index</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看位置是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkPositionIndex</span><span class="params">(index: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"index: <span class="variable">$index</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看范围是否合法</span></span><br><span class="line"><span class="comment">         *  */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkRangeIndexes</span><span class="params">(fromIndex: <span class="type">Int</span>, toIndex: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span> || toIndex &gt; size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"fromIndex: <span class="variable">$fromIndex</span>, toIndex: <span class="variable">$toIndex</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fromIndex &gt; toIndex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"fromIndex: <span class="variable">$fromIndex</span> &gt; toIndex: <span class="variable">$toIndex</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看边界是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkBoundsIndexes</span><span class="params">(startIndex: <span class="type">Int</span>, endIndex: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (startIndex &lt; <span class="number">0</span> || endIndex &gt; size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"startIndex: <span class="variable">$startIndex</span>, endIndex: <span class="variable">$endIndex</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (startIndex &gt; endIndex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"startIndex: <span class="variable">$startIndex</span> &gt; endIndex: <span class="variable">$endIndex</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 哈希函数</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">orderedHashCode</span><span class="params">(c: <span class="type">Collection</span>&lt;*&gt;)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> hashCode = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> (e <span class="keyword">in</span> c) &#123;</span><br><span class="line">                hashCode = <span class="number">31</span> * hashCode + (e?.hashCode() ?: <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hashCode</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看是否相等</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">orderedEquals</span><span class="params">(c: <span class="type">Collection</span>&lt;*&gt;, other: <span class="type">Collection</span>&lt;*&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.size != other.size) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> otherIterator = other.iterator()</span><br><span class="line">            <span class="keyword">for</span> (elem <span class="keyword">in</span> c) &#123;</span><br><span class="line">                <span class="keyword">val</span> elemOther = otherIterator.next()</span><br><span class="line">                <span class="keyword">if</span> (elem != elemOther) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器类</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">open</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span></span>(</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">var</span> index: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) : MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">var</span> lastReturned: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">var</span> current: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            checkPositionIndex(index, _size)</span><br><span class="line">            current = <span class="keyword">if</span> (index == _size) <span class="literal">null</span> <span class="keyword">else</span> getNode(index)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否存在下一个节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = index &lt; _size</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一节点数据</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            lastReturned = current</span><br><span class="line">            current = current?.next</span><br><span class="line">            index++</span><br><span class="line">            <span class="keyword">return</span> lastReturned?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 删除当前节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> lastNext = lastReturned?.next</span><br><span class="line">            unlink(lastReturned ?: <span class="keyword">throw</span> IllegalStateException())</span><br><span class="line">            index--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表迭代器类</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">open</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListIterator</span></span>(</span><br><span class="line">        index: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) : LinkedIterator(</span><br><span class="line">        index</span><br><span class="line">    ), MutableListIterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否有上一节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasPrevious</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = index &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一节点游标</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextIndex</span><span class="params">()</span></span>: <span class="built_in">Int</span> = index</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回上一节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">previous</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasPrevious()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            current = <span class="keyword">if</span> (current == <span class="literal">null</span>) last <span class="keyword">else</span> current!!.prev</span><br><span class="line">            lastReturned = current</span><br><span class="line">            index--</span><br><span class="line">            <span class="keyword">return</span> lastReturned?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一节点游标</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">previousIndex</span><span class="params">()</span></span>: <span class="built_in">Int</span> = index - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">            lastReturned = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                linkedLast(element)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                linkedBefore(element, current!!)</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> IllegalStateException()</span><br><span class="line">            current!!.item = element</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> ll = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>)</span><br><span class="line">        ll.add(i)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.reverse()</span><br><span class="line">    println(ll)</span><br><span class="line">    <span class="keyword">val</span> it = ll.listIterator()</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        print(<span class="string">"<span class="subst">$&#123;it.next()&#125;</span> "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    <span class="keyword">while</span> (it.hasPrevious()) &#123;</span><br><span class="line">        print(<span class="string">"<span class="subst">$&#123;it.previous()&#125;</span> "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    ll.addFirst(<span class="number">111</span>)</span><br><span class="line">    ll.addLast(<span class="number">222</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.removeFirst()</span><br><span class="line">    ll.removeLast()</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.removeAt(<span class="number">1</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.add(<span class="number">9</span>, <span class="number">114514</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    println(ll.size)</span><br><span class="line">    ll.clear()</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.addAll(listOf(<span class="number">1111</span>, <span class="number">2222</span>, <span class="number">3333</span>, <span class="number">4444</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.clear()</span><br><span class="line">    ll.addAll(<span class="number">0</span>, listOf(<span class="number">121</span>, <span class="number">222</span>, <span class="number">3445</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">    println(ll.getFirst())</span><br><span class="line">    println(ll.getLast())</span><br><span class="line">    ll.<span class="keyword">set</span>(<span class="number">2</span>, <span class="number">1000000</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.remove(<span class="number">121</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.removeAll(listOf(<span class="number">222</span>, <span class="number">1000000</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.addAll(listOf(<span class="number">1123</span>, <span class="number">1122</span>, <span class="number">2234</span>))</span><br><span class="line">    ll.retainAll(listOf(<span class="number">1123</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200719124417501.png" alt="image-20200719124417501" title="">                </div>                <div class="image-caption">image-20200719124417501</div>            </figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据算法第四版和源码进行的链表实现，主要实现&lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt;接口和&lt;code&gt;MutableListIterator&amp;lt;T&amp;gt;&lt;/code&gt;迭代器
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(2)---简单计算器(加减乘除括号)</title>
    <link href="http://blog.fivezha.cn/2020/07/12/algorithm4-eval-int-arithmetic/"/>
    <id>http://blog.fivezha.cn/2020/07/12/algorithm4-eval-int-arithmetic/</id>
    <published>2020-07-12T07:51:45.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>中缀表达式转后缀表达式，计算后缀表达式实现的加减乘除括号计算器。<a id="more"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>中缀表达式转后缀表达式，计算后缀表达式。</p><h4 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h4><ul><li>数字<ul><li>直接添加到结果</li></ul></li><li>非数字<ul><li>” ）“，依次弹栈添加到结果直到“（ ”(左括号也弹栈)</li><li>“（ “直接压栈，不用管</li><li>判断是否低于栈顶符号，大于直接入栈，等于先弹栈再入栈，低于直接弹栈到<strong>字符优先级高于栈顶符号</strong>或者<strong>左括号或空栈</strong></li></ul></li></ul><h4 id="后缀计算"><a href="#后缀计算" class="headerlink" title="后缀计算"></a>后缀计算</h4><ul><li>数字<ul><li>入栈</li></ul></li><li>非数字<ul><li>根据字符进行两次出栈操作然后计算完再入栈</li></ul></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="中缀转后缀-1"><a href="#中缀转后缀-1" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优先级</span></span><br><span class="line"><span class="comment"> * 加减优先级最低</span></span><br><span class="line"><span class="comment"> * 然后就是乘除</span></span><br><span class="line"><span class="comment"> * 括号优先级最高</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">val</span> priority = mapOf(</span><br><span class="line">    <span class="string">"+"</span> to <span class="number">0</span>,</span><br><span class="line">    <span class="string">"-"</span> to <span class="number">0</span>,</span><br><span class="line">    <span class="string">"*"</span> to <span class="number">1</span>,</span><br><span class="line">    <span class="string">"/"</span> to <span class="number">1</span>,</span><br><span class="line">    <span class="string">"("</span> to <span class="number">2</span>,</span><br><span class="line">    <span class="string">")"</span> to <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中缀转后缀</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">infixToPostfix</span><span class="params">(expr: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> s = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line"></span><br><span class="line">    expr.forEach &#123; c: <span class="built_in">Char</span> -&gt;</span><br><span class="line">        <span class="keyword">when</span> (c) &#123;</span><br><span class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span> -&gt; sb.append(c)</span><br><span class="line">            <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (!s.isEmpty()</span><br><span class="line">                    &amp;&amp; s.peek() != <span class="string">'('</span></span><br><span class="line">                    &amp;&amp; priority[c.toString()]!! &lt;= priority[s.peek().toString()]!!</span><br><span class="line">                ) &#123;</span><br><span class="line">                    sb.append(s.pop())</span><br><span class="line">                &#125;</span><br><span class="line">                s.push(c)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'('</span> -&gt; s.push(c)</span><br><span class="line">            <span class="string">')'</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (!s.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.peek() == <span class="string">'('</span>) &#123;</span><br><span class="line">                        s.pop()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sb.append(s.pop())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> UnsupportedOperationException(<span class="string">"未知字符!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.isEmpty()) &#123;</span><br><span class="line">        sb.append(s.pop())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算后缀"><a href="#计算后缀" class="headerlink" title="计算后缀"></a>计算后缀</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算后缀表达式</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">evalPostfix</span><span class="params">(expr: <span class="type">String</span>)</span></span>: <span class="built_in">Double</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> s = Stack&lt;<span class="built_in">Double</span>&gt;()</span><br><span class="line">    expr.forEach &#123; c: <span class="built_in">Char</span> -&gt;</span><br><span class="line">        <span class="keyword">when</span> (c) &#123;</span><br><span class="line">            <span class="string">'+'</span> -&gt; s.pop().plus(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="string">'-'</span> -&gt; s.pop().minus(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="string">'*'</span> -&gt; s.pop().times(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="string">'/'</span> -&gt; s.pop().div(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; s.push(Character.getNumericValue(c).toDouble())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (s.isEmpty()) <span class="number">0.0</span> <span class="keyword">else</span> s.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 四则运算(带括号)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">evalIntArithmetic</span><span class="params">(expr: <span class="type">String</span>)</span></span>: <span class="built_in">Double</span> =</span><br><span class="line">    evalPostfix(infixToPostfix(expr.trim().replace(<span class="string">" "</span>, <span class="string">""</span>)))</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fundamentals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.evalIntArithmetic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(evalIntArithmetic(<span class="string">""</span>))</span><br><span class="line">    println(evalIntArithmetic(<span class="string">" 1 + 2"</span>))</span><br><span class="line">    println(evalIntArithmetic(<span class="string">"1+2*3+(4*5+6)*7"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712185745469.png" alt="image-20200712185745469" title="">                </div>                <div class="image-caption">image-20200712185745469</div>            </figure><p>验算：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712185812495.png" alt="image-20200712185812495" title="">                </div>                <div class="image-caption">image-20200712185812495</div>            </figure><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中缀表达式转后缀表达式，计算后缀表达式实现的加减乘除括号计算器。
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(1)---简单类的实现</title>
    <link href="http://blog.fivezha.cn/2020/07/11/algorithm4th-1/"/>
    <id>http://blog.fivezha.cn/2020/07/11/algorithm4th-1/</id>
    <published>2020-07-11T14:40:50.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>算法第四版第一章节<a id="more"></a></p><h2 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200711224750298.png" alt="image-20200711224750298" title="">                </div>                <div class="image-caption">image-20200711224750298</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.math.sqrt</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 累加器 防抖动版本</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> total: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> times: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mean: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> s: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">addDataValue</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> dv = value.toDouble()</span><br><span class="line">        total += dv</span><br><span class="line"></span><br><span class="line">        s += <span class="number">1.0</span> * (times - <span class="number">1</span>) / times * (dv - mean) * (dv - mean)</span><br><span class="line">        mean += (dv - mean) / times</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mean</span><span class="params">()</span></span>: <span class="built_in">Double</span> = mean</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">variance</span><span class="params">()</span></span>: <span class="built_in">Double</span> = <span class="keyword">if</span> (times &lt;= <span class="number">1</span>) <span class="built_in">Double</span>.NaN <span class="keyword">else</span> s / (times - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stddev</span><span class="params">()</span></span>: <span class="built_in">Double</span> = sqrt(variance())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">total</span><span class="params">()</span></span>: <span class="built_in">Double</span> = total</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mean (<span class="variable">$times</span> times, <span class="subst">$&#123;String.format(<span class="string">"%.2f"</span>, total)&#125;</span> values): "</span> +</span><br><span class="line">                <span class="string">"<span class="subst">$&#123;String.format(<span class="string">"%7.5f"</span>, mean())&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视化累加器"><a href="#可视化累加器" class="headerlink" title="可视化累加器"></a>可视化累加器</h2><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200711224928831.png" alt="image-20200711224928831" title="">                </div>                <div class="image-caption">image-20200711224928831</div>            </figure><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw</span><br><span class="line"><span class="keyword">import</span> kotlin.math.sqrt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisualAccumulator</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> xMax: <span class="built_in">Int</span> = <span class="number">100</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> yMax: <span class="built_in">Double</span> = <span class="number">100.0</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> times: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> total: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mean: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> s: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        StdDraw.setXscale(<span class="number">0.0</span>, xMax.toDouble())</span><br><span class="line">        StdDraw.setYscale(<span class="number">0.0</span>, yMax)</span><br><span class="line">        StdDraw.setPenRadius(.<span class="number">01</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">addDataValue</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> dv = value.toDouble()</span><br><span class="line">        total += dv</span><br><span class="line"></span><br><span class="line">        mean += (dv - mean) / times</span><br><span class="line">        s += <span class="number">1.0</span> * (times - <span class="number">1</span>) / times * (dv - mean) * (dv - mean)</span><br><span class="line"></span><br><span class="line">        StdDraw.setPenColor(StdDraw.DARK_GRAY)</span><br><span class="line">        StdDraw.point(times.toDouble(), value.toDouble())</span><br><span class="line">        StdDraw.setPenColor(StdDraw.RED)</span><br><span class="line">        StdDraw.point(times.toDouble(), mean())</span><br><span class="line">        StdDraw.setPenColor(StdDraw.BLUE)</span><br><span class="line">        StdDraw.point(times.toDouble(), stddev())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mean</span><span class="params">()</span></span>: <span class="built_in">Double</span> = mean</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">variance</span><span class="params">()</span></span>: <span class="built_in">Double</span> = <span class="keyword">if</span> (times &lt;= <span class="number">1</span>) <span class="number">0.0</span> <span class="keyword">else</span> s / (times - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stddev</span><span class="params">()</span></span>: <span class="built_in">Double</span> = sqrt(variance())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">total</span><span class="params">()</span></span>: <span class="built_in">Double</span> = total</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mean (<span class="variable">$times</span> times, <span class="subst">$&#123;String.format(<span class="string">"%.2f"</span>, total)&#125;</span> values): "</span> +</span><br><span class="line">                <span class="string">"<span class="subst">$&#123;String.format(<span class="string">"%7.5f"</span>, mean())&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200711225013771.png" alt="image-20200711225013771" title="">                </div>                <div class="image-caption">image-20200711225013771</div>            </figure><h2 id="有理数"><a href="#有理数" class="headerlink" title="有理数"></a>有理数</h2><h3 id="API-2"><a href="#API-2" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200711225149973.png" alt="image-20200711225149973" title="">                </div>                <div class="image-caption">image-20200711225149973</div>            </figure><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.qgcd</span><br><span class="line"><span class="keyword">import</span> kotlin.reflect.typeOf</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> numerator: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> denominator: <span class="built_in">Long</span> = <span class="number">1L</span></span><br><span class="line">) : Comparable&lt;Rational&gt; &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (denominator == <span class="number">0L</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalAccessError(<span class="string">"分母不能为0!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        simplify()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">numerator</span><span class="params">()</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numerator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">denominator</span><span class="params">()</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> denominator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simplify</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> g = qgcd(numerator, denominator)</span><br><span class="line">        numerator /= g</span><br><span class="line">        denominator /= g</span><br><span class="line">        <span class="keyword">if</span> (denominator &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            denominator = -denominator</span><br><span class="line">            numerator = -numerator</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.numerator == <span class="number">0L</span>) <span class="keyword">return</span> other</span><br><span class="line">        <span class="keyword">if</span> (other.numerator == <span class="number">0L</span>) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">val</span> g = qgcd(<span class="keyword">this</span>.denominator, other.denominator)</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * (other.denominator / g) + other.numerator * (<span class="keyword">this</span>.denominator / g),</span><br><span class="line">            <span class="keyword">this</span>.denominator * (other.denominator / g)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">minus</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.numerator == <span class="number">0L</span>) <span class="keyword">return</span> other</span><br><span class="line">        <span class="keyword">if</span> (other.numerator == <span class="number">0L</span>) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> g = qgcd(<span class="keyword">this</span>.denominator, other.denominator)</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * (other.denominator / g) - other.numerator * (<span class="keyword">this</span>.denominator / g),</span><br><span class="line">            <span class="keyword">this</span>.denominator * (other.denominator / g)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">times</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * other.numerator,</span><br><span class="line">            <span class="keyword">this</span>.denominator * other.denominator</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">div</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * other.denominator,</span><br><span class="line">            <span class="keyword">this</span>.denominator * other.numerator</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(other: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (other == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>::<span class="class"><span class="keyword">class</span> != <span class="title">other</span>:<span class="type">:class) return false</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.compareTo(other <span class="keyword">as</span> Rational) == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (denominator == <span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="variable">$numerator</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="variable">$numerator</span>/<span class="variable">$denominator</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 除法判断大小于</span></span><br><span class="line">        <span class="keyword">val</span> num = <span class="keyword">this</span>.numerator * other.denominator</span><br><span class="line">        <span class="keyword">val</span> den = <span class="keyword">this</span>.denominator * other.numerator</span><br><span class="line">        <span class="keyword">if</span> (num &gt; den)</span><br><span class="line">        <span class="comment">// 说明分子大 当前数大</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (num &lt; den)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> : <span class="type">Comparable</span>&lt;<span class="type">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> year: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> month: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> day: <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        y: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        m: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        d: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDateValid(d, m, y))</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入日期错误!"</span>)</span><br><span class="line">        year = y</span><br><span class="line">        month = m</span><br><span class="line">        day = d</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        parseString: String</span><br><span class="line">    ) &#123;</span><br><span class="line">        parseString.split(<span class="string">"/"</span>).run &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入日期错误！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            year = <span class="keyword">get</span>(<span class="number">0</span>).toInt()</span><br><span class="line">            month = <span class="keyword">get</span>(<span class="number">1</span>).toInt()</span><br><span class="line">            day = <span class="keyword">get</span>(<span class="number">2</span>).toInt()</span><br><span class="line">            <span class="keyword">if</span> (!isDateValid(day, month, year))</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入日期错误！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> monthDayList = listOf(<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isDateValid</span><span class="params">(d: <span class="type">Int</span>, m: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">12</span> || m &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d &gt; monthDayList[m] || d &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">2</span> &amp;&amp; d == <span class="number">29</span> &amp;&amp; !isLeapYear(y)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is y a leap year?</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isLeapYear</span><span class="params">(y: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y % <span class="number">400</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> (y % <span class="number">100</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> y % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">year</span><span class="params">()</span></span> = year</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">month</span><span class="params">()</span></span> = month</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">day</span><span class="params">()</span></span> = day</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">Date</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.year &lt; other.year)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.year &gt; other.year)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.month &lt; other.month)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.month &gt; other.month)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.day &lt; other.day)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.day &gt; other.day)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="variable">$year</span>/<span class="variable">$month</span>/<span class="variable">$day</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hashCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day + <span class="number">31</span> * month + <span class="number">31</span> * <span class="number">12</span> * year</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="账单"><a href="#账单" class="headerlink" title="账单"></a>账单</h2><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> : <span class="type">Comparable</span>&lt;<span class="type">Transaction</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> who: String</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> time: Date</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> amount: <span class="built_in">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        w: String,</span><br><span class="line">        t: Date,</span><br><span class="line">        a: <span class="built_in">Double</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAmountValid(a))</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入金额格式错误!"</span>)</span><br><span class="line">        who = w</span><br><span class="line">        time = t</span><br><span class="line">        amount = a</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        parseString: String</span><br><span class="line">    ) &#123;</span><br><span class="line">        parseString.split(<span class="string">" "</span>).run &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入格式错误！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            who = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line">            time = Date(<span class="keyword">get</span>(<span class="number">1</span>))</span><br><span class="line">            amount = <span class="keyword">get</span>(<span class="number">2</span>).toDouble()</span><br><span class="line">            <span class="keyword">if</span> (!isAmountValid(amount))</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入金额错误！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">who</span><span class="params">()</span></span> = who</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">time</span><span class="params">()</span></span> = time</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">amount</span><span class="params">()</span></span> = amount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isAmountValid</span><span class="params">(amount: <span class="type">Double</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="built_in">Double</span>.NaN == amount ||</span><br><span class="line">            <span class="built_in">Double</span>.NEGATIVE_INFINITY == amount ||</span><br><span class="line">            <span class="built_in">Double</span>.POSITIVE_INFINITY == amount</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">Transaction</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareValues(<span class="keyword">this</span>.amount, other.amount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%-10s %10s %8.2f"</span>, who, time, amount)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><h3 id="普通GCD"><a href="#普通GCD" class="headerlink" title="普通GCD"></a>普通GCD</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通gcd模板</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">gcd</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> b.toLong()</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a.toLong()</span><br><span class="line">    <span class="keyword">var</span> ta = abs(a.toLong())</span><br><span class="line">    <span class="keyword">var</span> tb = abs(b.toLong())</span><br><span class="line">    <span class="keyword">while</span> (tb != <span class="number">0L</span>) &#123;</span><br><span class="line">        ta = tb.also &#123;</span><br><span class="line">            tb = ta % tb</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ta</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速GCD"><a href="#快速GCD" class="headerlink" title="快速GCD"></a>快速GCD</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速gcd模板</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">qgcd_</span><span class="params">(a: <span class="type">Long</span>, b: <span class="type">Long</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0L</span>) <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0L</span>) <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((a and <span class="number">1</span>) == <span class="number">0L</span> &amp;&amp; (b and <span class="number">1</span>) == <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> qgcd_(a shr <span class="number">1</span>, b shr <span class="number">1</span>) shl <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((b and <span class="number">1</span>) == <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> qgcd_(a, b shr <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((a and <span class="number">1</span>) == <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> qgcd_(a shr <span class="number">1</span>, b)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> qgcd_(abs(a - b), min(a, b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">qgcd</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> b.toLong()</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a.toLong()</span><br><span class="line">    <span class="keyword">var</span> ta = a.toLong()</span><br><span class="line">    <span class="keyword">var</span> tb = b.toLong()</span><br><span class="line">    <span class="keyword">return</span> qgcd_(abs(ta), abs(tb))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h3 id="API-3"><a href="#API-3" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200711225738407.png" alt="image-20200711225738407" title="">                </div>                <div class="image-caption">image-20200711225738407</div>            </figure><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.NoSuchElementException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span>&lt;<span class="type">T</span>&gt; : <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> n: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = first == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span> = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> oi = first</span><br><span class="line">        first = Node(</span><br><span class="line">            item,</span><br><span class="line">            oi</span><br><span class="line">        )</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator&lt;T&gt;(first)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">val</span> item: T,</span><br><span class="line">        <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;?</span><br><span class="line">    ) : Iterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> UnsupportedOperationException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> item = current?.item</span><br><span class="line">            current = current?.next</span><br><span class="line">            <span class="keyword">return</span> item!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="API-4"><a href="#API-4" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200711225952602.png" alt="image-20200711225952602" title="">                </div>                <div class="image-caption">image-20200711225952602</div>            </figure><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="type">T</span>&gt; : <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> n: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = first == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span> = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> oi = first</span><br><span class="line">        first = Node(</span><br><span class="line">            item,</span><br><span class="line">            oi</span><br><span class="line">        )</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item.also &#123;</span><br><span class="line">            first = first?.next</span><br><span class="line">            n--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder().also &#123;</span><br><span class="line">            <span class="keyword">this</span>.forEach &#123; item -&gt; it.append(<span class="string">"<span class="variable">$item</span> "</span>) &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator(first)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">val</span> item: T,</span><br><span class="line">        <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;?</span><br><span class="line">    ) : Iterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> UnsupportedOperationException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> item = current?.item</span><br><span class="line">            current = current?.next</span><br><span class="line">            <span class="keyword">return</span> item!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="API-5"><a href="#API-5" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200711230035937.png" alt="image-20200711230035937" title="">                </div>                <div class="image-caption">image-20200711230035937</div>            </figure><h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="type">T</span>&gt; : <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> last: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> n: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = first == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span> = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> ol = last</span><br><span class="line">        last = Node(</span><br><span class="line">            item,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            first = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ol?.next = last</span><br><span class="line">        &#125;</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">dequeue</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item.also &#123;</span><br><span class="line">            first = first?.next</span><br><span class="line">            n--</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                last = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder().also &#123;</span><br><span class="line">            <span class="keyword">this</span>.forEach &#123; item -&gt; it.append(<span class="string">"<span class="variable">$item</span> "</span>) &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator(first)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">val</span> item: T,</span><br><span class="line">        <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;?</span><br><span class="line">    ) : Iterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> UnsupportedOperationException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> item = current?.item</span><br><span class="line">            current = current?.next</span><br><span class="line">            <span class="keyword">return</span> item!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h2><h3 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 括号是否匹配</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isBanlanced</span><span class="params">(expr: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> s = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line"></span><br><span class="line">    expr.forEach &#123; c: <span class="built_in">Char</span> -&gt;</span><br><span class="line">        <span class="keyword">when</span> (c) &#123;</span><br><span class="line">            <span class="string">'('</span>, <span class="string">'&#123;'</span>, <span class="string">'['</span> -&gt; s.push(c)</span><br><span class="line">            <span class="string">')'</span> -&gt; <span class="keyword">if</span> (s.isEmpty() || s.pop() != <span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="string">']'</span> -&gt; <span class="keyword">if</span> (s.isEmpty() || s.pop() != <span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="string">'&#125;'</span> -&gt; <span class="keyword">if</span> (s.isEmpty() || s.pop() != <span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thEditionKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法第四版第一章节
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>线性动画/非线性动画</title>
    <link href="http://blog.fivezha.cn/2020/05/01/linear-anime/"/>
    <id>http://blog.fivezha.cn/2020/05/01/linear-anime/</id>
    <published>2020-05-01T13:34:56.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>起因是因为今天看到b站上有自媒体评测 <code>MIUI12</code> , 说到了动画流畅度那方面弹幕都说线性动画非线性动画什么的, 其实很早之前 <code>MUI</code> 就是全线采用非线性动画了, 但这个线性与非线性又是什么, 有什么区别呢, 我今天就稍微来讲一下.<br>其实这个高中就学习过了, 不过因为最近学习了js, 可以更加明确的展示出来了.<a id="more"></a></p><h2 id="什么是线性动画-非线性动画"><a href="#什么是线性动画-非线性动画" class="headerlink" title="什么是线性动画/非线性动画"></a>什么是线性动画/非线性动画</h2><p>要理解这个, 首先需要理解一个问题: *<em>什么是动画? *</em> </p><h3 id="什么是动画"><a href="#什么是动画" class="headerlink" title="什么是动画?"></a>什么是动画?</h3><p>根据 <strong>维基百科</strong> 所叙述的: </p><blockquote><p><strong>动画</strong>是指由许多<a href="https://zh.wikipedia.org/wiki/%E5%B8%A7" target="_blank" rel="noopener">帧</a>静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因<a href="https://zh.wikipedia.org/wiki/%E8%A7%86%E8%A7%89%E6%AE%8B%E8%B1%A1" target="_blank" rel="noopener">视觉残象</a>产生<a href="https://zh.wikipedia.org/wiki/%E9%8C%AF%E8%A6%BA" target="_blank" rel="noopener">错觉</a>，而误以为画面活动的作品。</p></blockquote><p>可以了解到, 动画, 其实就是很多静止的画面利用视觉残留现象做出来的可动的效果, 所以说如果想要模仿动画的效果, 只需要在1s内对一张图片更替一定的量的次数, 人眼就不会看出是否对这张图片进行了更替, 这, 其实就是 <strong>帧</strong> .<br>同时,并不是所有的 <strong>帧</strong> 都是会更改的, 有些帧完全就是不会变化的, 这就引出了 <strong>关键帧</strong> 的概念, 我们只需要着重关注于关键更改了图象的 <strong>帧</strong> 即可, 并不需要关注其他状态的 <strong>静止帧</strong> .<br>本次编程实践也是只针对于关键帧处理的.</p><h3 id="什么是非线性动画"><a href="#什么是非线性动画" class="headerlink" title="什么是非线性动画"></a>什么是非线性动画</h3><p>在 <code>Maya</code> 用户指南上有这么一句话:</p><blockquote><p><em>在 Maya 中，有两种类型的片段：源片段和常规剪辑。Maya 通过将角色的原始动画曲线保存在源片段中，来保留及保存角色原始动画曲线<em>。请勿使用源片段<em>为角色设置动画。但是，您可以使用源片段（称为_常规片段_）的副本或_实例_以非线性方式为角色设置动画。请参见<a href="https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2015/CHS/Maya/files/GUID-D462A79C-A766-43DD-BB43-5BCDAEC5D8BD-htm.html#GUID-D462A79C-A766-43DD-BB43-5BCDAEC5D8BD__WS17956D7ADBC6E736B6BA507117AE308213-7FF6" target="_blank" rel="noopener">动画片段</a>。</em></em></em></p><p>__非线性动画的基础是，移动、操纵和混合常规片段，从而为角色生成一系列平滑的动作<em>。<br>_</em>&gt; </p></blockquote><p>看上去很高级, 说白了其实就是动画的关键帧停留位置(时段), 也就是说, 非线性的关键帧所停留的并不是处于常见规律中的, 他可能是遵循二次函数, 遵循震荡函数, 总之, 其规律一定不是线性规律(一次函数).</p><h3 id="什么是线性动画"><a href="#什么是线性动画" class="headerlink" title="什么是线性动画"></a>什么是线性动画</h3><p>所以, 线性动画就很容易理解了, 所有关键帧停留位置其实都是处在一条线中的, 其导数永远是常数.</p><h2 id="线性动画-非线性动画有什么用"><a href="#线性动画-非线性动画有什么用" class="headerlink" title="线性动画/非线性动画有什么用"></a>线性动画/非线性动画有什么用</h2><p>那么, 非线性动画又有着什么样的特殊用途呢?<br>很简单的, 应用在手机上, 这会让你的动画感觉更有动感, 更加精致, 不会像是线性动画那样, 一板一眼.<br>比如 <code>IOS</code> 一直都是非线性动画, 给人的感受就非常的丝滑.<br>而早年间的 <code>Android</code> 动画都是线性动画, 给人的感觉就像是机械一般的精密但刻板. </p><h2 id="简单的线性动画-点击图片看动画"><a href="#简单的线性动画-点击图片看动画" class="headerlink" title="简单的线性动画(点击图片看动画):"></a>简单的线性动画(点击图片看动画):</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588320557603-83ac95ee-be22-4c90-8b6d-67819c6439bc.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="ExVwZpd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="线性动画">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/ExVwZpd" target="_blank" rel="noopener">  线性动画</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="简单的非线性-点击图片看动画"><a href="#简单的非线性-点击图片看动画" class="headerlink" title="简单的非线性(点击图片看动画):"></a>简单的非线性(点击图片看动画):</h2><h3 id="圆弧非线性"><a href="#圆弧非线性" class="headerlink" title="圆弧非线性"></a>圆弧非线性</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588320756761-3d5a0233-e333-4fdb-a2a2-38aabfc5d443.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="gOaGmpg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="加速非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/gOaGmpg" target="_blank" rel="noopener">  加速非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="加减速非线性"><a href="#加减速非线性" class="headerlink" title="加减速非线性"></a>加减速非线性</h3><p>先加速再减速, 二次函数</p><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="eYpGvYP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="二次非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/eYpGvYP" target="_blank" rel="noopener">  二次非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="碰撞反弹"><a href="#碰撞反弹" class="headerlink" title="碰撞反弹"></a>碰撞反弹</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588320853246-0a0dc7da-a845-4b4d-9280-6ada3d2c2370.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>如果在开始时有动画效果，比如弹跳 —— 那么它将在最后显示。<br>上图中常规弹跳为红色，easeOut 弹跳为蓝色。</p><ul><li>常规弹跳 —— 物体在底部弹跳，然后突然跳到顶部。</li><li><code>easeOut</code> 变换之后 —— 物体跳到顶部之后，在那里弹跳。</li></ul><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="RwWZdeW" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="碰撞非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/RwWZdeW" target="_blank" rel="noopener">  碰撞非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果理论看不懂, 那大概看例子也能领会了, 有些东西,  不知道是不是我语文太差的缘故, 理论实在是难以形容, 但是当实际例子展示出来了之后, 就会发现, 其实这个还是很容易理解/看出来的嘛.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因是因为今天看到b站上有自媒体评测 &lt;code&gt;MIUI12&lt;/code&gt; , 说到了动画流畅度那方面弹幕都说线性动画非线性动画什么的, 其实很早之前 &lt;code&gt;MUI&lt;/code&gt; 就是全线采用非线性动画了, 但这个线性与非线性又是什么, 有什么区别呢, 我今天就稍微来讲一下.&lt;br&gt;其实这个高中就学习过了, 不过因为最近学习了js, 可以更加明确的展示出来了.
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="animation" scheme="http://blog.fivezha.cn/tags/animation/"/>
    
      <category term="javascript" scheme="http://blog.fivezha.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>网络编程笔记(2)---UDP与分包协议</title>
    <link href="http://blog.fivezha.cn/2020/04/29/socket-program-2/"/>
    <id>http://blog.fivezha.cn/2020/04/29/socket-program-2/</id>
    <published>2020-04-29T12:39:32.000Z</published>
    <updated>2021-01-15T01:00:54.297Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是在<code>Linux</code>环境下编写<code>socket</code>程序，本次实现简单UDP<code>echo server</code>和<code>echo client</code>，包含简单分包操作和协议设计<a id="more"></a></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>用户数据报协议, 不会存在ACK应答消息, 类似于广播的无连接传输层协议.<br>就是说UDP仅需要一个套接字便可以与多台主机通信.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588175417340-add4bff5-70e3-487a-a985-a785d128e7c2.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h3 id="基于UDP的I-O函数"><a href="#基于UDP的I-O函数" class="headerlink" title="基于UDP的I/O函数"></a>基于UDP的I/O函数</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588175460188-704393eb-505a-46e0-9693-ab613526a06a.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588175608463-c92bd247-7809-410b-a810-295798fcfd22.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h3 id="实现基于UDP的Echo服务器"><a href="#实现基于UDP的Echo服务器" class="headerlink" title="实现基于UDP的Echo服务器"></a>实现基于UDP的Echo服务器</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588254306045-87a9f7ec-9523-4eb3-afe2-5ca4deba9b2f.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//constexpr int BUF_SIZE = 256;</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;port&gt; \n"</span>, argv[ <span class="number">0</span> ]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    sockaddr_in sockAddr&#123;&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;sockAddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(sockAddr));</span><br><span class="line">    sockAddr.sin_family      = AF_INET;</span><br><span class="line">    sockAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    sockAddr.sin_port        = htons(atoi(argv[ <span class="number">1</span> ]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == bind(sock, (struct sockaddr *) &amp;sockAddr, <span class="keyword">sizeof</span>(sockAddr))) &#123;</span><br><span class="line">        error_handler(<span class="string">"bind() error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sockaddr_in clntAddr&#123;&#125;;</span><br><span class="line">    <span class="keyword">socklen_t</span>   clntAddrLen = <span class="keyword">sizeof</span>(clntAddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[ <span class="number">512</span> ];</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> recv_len = recvfrom(sock, buf, BUF_SIZE, <span class="number">0</span>, (struct sockaddr *) &amp;clntAddr, &amp;clntAddrLen);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"recv len = %d\n"</span>, recv_len);</span><br><span class="line">        sendto(sock, buf, recv_len, <span class="number">0</span>, (struct sockaddr *) &amp;clntAddr, <span class="keyword">sizeof</span>(clntAddr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//constexpr int BUF_SIZE = 256;</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InetAddress</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">InetAddress</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> port, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> ip = <span class="string">""</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;addr_, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr_));</span><br><span class="line">        addr_.sin_family = AF_INET;</span><br><span class="line">        addr_.sin_port   = htons(atoi(port.c_str()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="string">""</span>)</span><br><span class="line">            addr_.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            addr_.sin_addr.s_addr = inet_addr(ip.c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~InetAddress() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">sockaddr_in &amp;<span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr_</span> &#123;</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Socket</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Socket</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        fd_ = socket(PF_INET, type, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Socket() &#123;</span><br><span class="line">        close(fd_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">ssize_t</span> <span class="title">sendto</span><span class="params">(InetAddress &amp;addr, <span class="keyword">void</span> *pData, <span class="keyword">size_t</span> nBytes)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        sockaddr *toAddr  = (sockaddr *) &amp;(addr.getAddr());</span><br><span class="line">        <span class="keyword">socklen_t</span> addrLen = <span class="keyword">sizeof</span>(addr.getAddr());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ::sendto(fd_, pData, nBytes, <span class="number">0</span>, toAddr, addrLen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(InetAddress &amp;addr, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nBytes)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ::recvfrom(fd_, buf, nBytes, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> fd_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;ip&gt; &lt;port&gt; \n"</span>, argv[ <span class="number">0</span> ]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Socket <span class="title">sock</span><span class="params">(SOCK_DGRAM)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">InetAddress <span class="title">addr</span><span class="params">(argv[ <span class="number">2</span> ], argv[ <span class="number">1</span> ])</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[ <span class="number">1024</span> ];</span><br><span class="line">    <span class="keyword">int</span>  sl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        fgets(buf + <span class="number">3</span>, <span class="keyword">sizeof</span>(buf) - <span class="number">3</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        sl = <span class="built_in">strlen</span>(buf + <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str len = %d\n"</span>, sl);</span><br><span class="line">        <span class="keyword">if</span> (sl &lt; BUF_SIZE - <span class="number">3</span>) &#123;</span><br><span class="line">            buf[ <span class="number">1</span> ]     = (<span class="keyword">char</span>) <span class="number">1</span>;</span><br><span class="line">            buf[ <span class="number">2</span> ]     = (<span class="keyword">char</span>) sl;</span><br><span class="line">            <span class="keyword">int</span> send_len = sock.sendto(addr, buf + <span class="number">1</span>, sl + <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"send len = %d\n"</span>, send_len);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pack_num = <span class="built_in">ceil</span>((<span class="keyword">double</span>) sl / (BUF_SIZE - <span class="number">3</span>));</span><br><span class="line">            buf[ <span class="number">0</span> ] = (<span class="keyword">char</span>) <span class="number">0</span>;</span><br><span class="line">            buf[ <span class="number">1</span> ] = (<span class="keyword">char</span>) pack_num;</span><br><span class="line">            sock.sendto(addr, buf, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pack_num; ++i) &#123;</span><br><span class="line">                st            = i * (BUF_SIZE - <span class="number">3</span>);</span><br><span class="line">                buf[ st ]     = (<span class="keyword">char</span>) <span class="number">2</span>;</span><br><span class="line">                buf[ st + <span class="number">1</span> ] = (<span class="keyword">char</span>) (i + <span class="number">1</span>);</span><br><span class="line">                buf[ st + <span class="number">2</span> ] = i == pack_num - <span class="number">1</span> ? <span class="built_in">strlen</span>(buf + st + <span class="number">3</span>) : BUF_SIZE - <span class="number">3</span>;</span><br><span class="line">                sock.sendto(addr, buf + st, BUF_SIZE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> recv_len = sock.recvfrom(addr, buf, BUF_SIZE);</span><br><span class="line">        buf[ recv_len ] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf[ <span class="number">0</span> ] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Message from server: %s\n"</span>, buf + <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (buf[ <span class="number">0</span> ] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 数据包获取</span></span><br><span class="line">            <span class="keyword">int</span>  pack_num = (<span class="keyword">int</span>) buf[ <span class="number">1</span> ];</span><br><span class="line">            <span class="keyword">int</span>  cnt      = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span> pc_buf[ BUF_SIZE ];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pack_num; ++i) &#123;</span><br><span class="line">                recv_len = sock.recvfrom(addr, pc_buf, BUF_SIZE);</span><br><span class="line">                <span class="built_in">std</span>::copy(pc_buf + <span class="number">3</span>, pc_buf + recv_len, buf + cnt);</span><br><span class="line">                cnt += (<span class="keyword">int</span>) pc_buf[ <span class="number">2</span> ];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Message from server: %s\n"</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>client</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1589817412488-c00d1ea9-1c9b-4a72-8659-90660f28e957.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>server</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1589817429806-44055c2e-235d-4d11-b053-d0d8d0b4c371.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是在&lt;code&gt;Linux&lt;/code&gt;环境下编写&lt;code&gt;socket&lt;/code&gt;程序，本次实现简单UDP&lt;code&gt;echo server&lt;/code&gt;和&lt;code&gt;echo client&lt;/code&gt;，包含简单分包操作和协议设计
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
      <category term="socket" scheme="http://blog.fivezha.cn/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>网络编程笔记(1)---TCP与ECHO服务器</title>
    <link href="http://blog.fivezha.cn/2020/04/28/socket-program-1/"/>
    <id>http://blog.fivezha.cn/2020/04/28/socket-program-1/</id>
    <published>2020-04-28T12:39:26.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是在<code>Linux</code>环境下编写<code>socket</code>程序，本次实现简单TCP<code>server</code>和<code>client</code>以及<code>echo server</code>和<code>echo client</code><a id="more"></a></p><h2 id="什么是Socket"><a href="#什么是Socket" class="headerlink" title="什么是Socket"></a>什么是Socket</h2><p>Socket中文译名套接字, 是一个当时没有在计网中讲到的知识, 但确实是极其重要的一个知识点, 他是基于TCP/IP协议的封装抽象层, 它对于TCP协议进行了封装, 使得其现在已经成为了最为通用的网络通信接口/应用程序接口.<br>关于TCP协议可以看下面这篇文章</p><p><a href="https://tools.ietf.org/html/rfc793" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc793</a></p><h2 id="为什么会有Socket"><a href="#为什么会有Socket" class="headerlink" title="为什么会有Socket"></a>为什么会有Socket</h2><p>我们知道, 服务/服务器其实是有很大可能不存在于一个计算机上的, 这就有了客户端与服务端, 在服务器之间, 也是需要存在连接通信的, 所以需要有一个用于进行通信的通用 <strong>可编程</strong> 接口, 这就是socket, 他对于 <code>server</code> 和 <code>client</code> 之间架起了一道桥, 让 <code>server</code> 与 <code>port</code> 绑定, 让 <code>client</code> 与 <code>ip:port</code> 连接, 这样就相当于 <code>client</code> 进程与 <code>server</code> 进程之间有了像是管道一样的通信, 不过这个通信是全双工的.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588078116060-f05e42c3-f202-4d5b-9710-2db2b576c66d.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>我们回顾TCP状态转换图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588078284676-ab9b2ed5-f0ef-4478-aaa2-9a4c24f8ca26.webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>在这里能够找到许多socket封装的影子, 从客户端来看</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588078349220-34006021-21e7-47be-b4f8-63baed9382b6.webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>则更加明显</p><h2 id="学习Linux-下的网络编程-socket编程"><a href="#学习Linux-下的网络编程-socket编程" class="headerlink" title="学习Linux 下的网络编程(socket编程)"></a>学习Linux 下的网络编程(socket编程)</h2><h4 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h4><blockquote><p>int socket(int domain, int type, int protocol)<br>return : 文件描述符 / or not -1<br>domain: 套接字所使用的协议簇<br>type: 套接字数据传输类型<br>protocol: 套接字所使用的协议</p></blockquote><h5 id="文件描述符-windows下称之为句柄"><a href="#文件描述符-windows下称之为句柄" class="headerlink" title="文件描述符(windows下称之为句柄):"></a>文件描述符(windows下称之为句柄):</h5><p>系统分配给文件或套接字的一个整数:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118202067-721fb73c-2732-4490-9e74-44e63ba46647.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p><a href="https://segmentfault.com/a/1190000009724931" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009724931</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118218855-6ed39004-f673-4193-a505-71db6c9a7026.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h5 id="协议簇"><a href="#协议簇" class="headerlink" title="协议簇:"></a>协议簇:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118218855-6ed39004-f673-4193-a505-71db6c9a7026.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h5 id="套接字类型"><a href="#套接字类型" class="headerlink" title="套接字类型:"></a>套接字类型:</h5><ol><li>SOCK_STREAM(流式)(面向连接)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118553490-5f00c550-3323-4f3f-a659-99c18b66dff7.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure></li><li>SOCK_DGRAM(包式)(面向消息)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118710732-9129da97-e3e2-49bd-a781-58c2fe7e0411.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure></li></ol><h5 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588119669498-7a97fde3-258f-47a8-a7df-b62090f44225.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="sockaddr-in"><a href="#sockaddr-in" class="headerlink" title="sockaddr_in"></a>sockaddr_in</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588124291436-8a2614f1-7e31-4d77-9fde-66cb601dde05.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588124419227-9e3b102c-99dd-4997-a1a9-078da7a3f9b4.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588134607200-d385c7b4-742b-4d3b-a2c8-0c1d39bf9908.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>IntelCPU默认都是小端序, 而网络连接统一都是大端序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2020/png/1337142/1588134657937-d32ccb9f-edae-4abb-8d0c-7add2b93172f.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588134673711-34e815b2-b9fc-4578-9a8c-74887b8b3459.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="TCPserver-client"><a href="#TCPserver-client" class="headerlink" title="TCPserver/client"></a>TCPserver/client</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588134555033-16c67e97-f1d0-4c11-9306-45a335eb7672.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588135167103-c016147f-80ed-40ec-83d1-3723b6d22518.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>所以又回到了最最上面的第一个图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588135244153-85f9620d-3f95-4c35-9c83-d89022984acc.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h5 id="accept"><a href="#accept" class="headerlink" title="accept()"></a>accept()</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588138094808-4c630103-94cb-4688-9c1b-7296217a99ca.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>sock: 利用socket()函数建立的sock<br>addr: 地址变量<br>addlen: 结构体长度</p><h5 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588138363087-01c3e48a-226b-4699-a0d4-649fd7c6a53b.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="实现简单的server-client"><a href="#实现简单的server-client" class="headerlink" title="实现简单的server/client"></a>实现简单的server/client</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::to_string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span> &#123;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clnt_addr</span> &#123;</span>&#125;;</span><br><span class="line">    <span class="keyword">socklen_t</span> clnt_addr_size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));<span class="comment">// 初始化内存</span></span><br><span class="line"></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">// 当前主机ip</span></span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"bind() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"listen() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clnt_addr_size = <span class="keyword">sizeof</span>(clnt_addr);</span><br><span class="line">    clnt_sock = accept(serv_sock, (struct sockaddr *) &amp;clnt_addr, &amp;clnt_addr_size);</span><br><span class="line">    <span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"accept() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        sleep(rand() % <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">string</span> tmp = message + to_string(i);</span><br><span class="line">        write(clnt_sock, tmp.c_str(), tmp.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write(clnt_sock, message.c_str(), message.size());// 连接之后直接向client写入数据</span></span><br><span class="line">    close(clnt_sock);</span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *messgae)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock;</span><br><span class="line">    sockaddr_in serv_addr&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> str_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, read_len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> message;<span class="comment">// 信息流</span></span><br><span class="line">    message.resize(<span class="number">100</span>, <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 这里会自动将ip字符串转换为uint32_t类型IP数字</span></span><br><span class="line">    serv_addr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"connect() error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> check = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次只读出一个字节</span></span><br><span class="line">    <span class="keyword">while</span> (read_len = read(sock, &amp;message[idx++], <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str_len == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (check)</span><br><span class="line">                error_handler(<span class="string">"read() error!"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str_len += read_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Message from server is : %s \n"</span>, message.c_str());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Function read call count : %d \n"</span>, str_len);</span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>可以看到 <code>client</code> 成功接受到了流字符:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164592478-804b3536-f534-4622-bd7c-40a15e7886bf.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>同时 <code>server</code> 也发送成功结束了程序:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164562852-3e156431-c24a-49c8-b4c0-5b0900c4d368.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="实现echo服务器"><a href="#实现echo服务器" class="headerlink" title="实现echo服务器"></a>实现echo服务器</h2><h3 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::stoi;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::to_string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> size_len = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span> size_buf[size_len];</span><br><span class="line">    sockaddr_in serv_addr&#123;&#125;, clnt_addr&#123;&#125;;</span><br><span class="line">    <span class="keyword">socklen_t</span> clnt_addr_size;</span><br><span class="line">    <span class="keyword">int</span> str_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));<span class="comment">// 初始化内存</span></span><br><span class="line"></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">// 当前主机ip</span></span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"bind() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"listen() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clnt_addr_size = <span class="keyword">sizeof</span>(clnt_addr);<span class="comment">// 算长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">///主体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        clnt_sock = accept(serv_sock, (sockaddr *) &amp;clnt_addr, &amp;clnt_addr_size);</span><br><span class="line">        <span class="keyword">if</span> (clnt_sock == <span class="number">1</span>) &#123;</span><br><span class="line">            error_handler(<span class="string">"accept() error!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Connected client %d \n"</span>, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((str_len = read(clnt_sock, size_buf, size_len)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((str_len = read(clnt_sock, message, stoi(size_buf))) != <span class="number">0</span>) &#123;</span><br><span class="line">                    write(clnt_sock, size_buf, size_len);</span><br><span class="line">                    write(clnt_sock, message, str_len);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(clnt_sock);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///</span></span><br><span class="line"></span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::stoi;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::to_string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *messgae)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock;</span><br><span class="line">    sockaddr_in serv_addr&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> str_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 这里会自动将ip字符串转换为uint32_t类型IP数字</span></span><br><span class="line">    serv_addr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"connect() error!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Connected......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Input message(Q/q to quit): "</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">std</span>::fgets(message, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(message, <span class="string">"q\n"</span>) || !<span class="built_in">strcmp</span>(message, <span class="string">"Q\n"</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">strlen</span>(message);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"len = %d\n"</span>, l);</span><br><span class="line">        <span class="built_in">string</span> s = to_string(l);</span><br><span class="line">        s.resize(<span class="number">4</span>);</span><br><span class="line">        write(sock, s.c_str(), <span class="number">4</span>);</span><br><span class="line">        write(sock, message, <span class="built_in">strlen</span>(message));</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">        str_len = read(sock, buf, <span class="number">4</span>);</span><br><span class="line">        str_len = read(sock, message, stoi(buf));</span><br><span class="line">        message[str_len] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Message from server: %s\n"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>client:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164525052-62e2c390-1840-462d-aee2-2a8c4c7efb34.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>server:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164514314-182083c4-11ca-49cd-aad0-39b7c1c1a2cc.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是在&lt;code&gt;Linux&lt;/code&gt;环境下编写&lt;code&gt;socket&lt;/code&gt;程序，本次实现简单TCP&lt;code&gt;server&lt;/code&gt;和&lt;code&gt;client&lt;/code&gt;以及&lt;code&gt;echo server&lt;/code&gt;和&lt;code&gt;echo client&lt;/code&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
      <category term="socket" scheme="http://blog.fivezha.cn/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>docker笔记</title>
    <link href="http://blog.fivezha.cn/2020/04/24/docker-note/"/>
    <id>http://blog.fivezha.cn/2020/04/24/docker-note/</id>
    <published>2020-04-24T13:31:13.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>一点点docker笔记<a id="more"></a></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">    "registry-mirrors": [</span><br><span class="line">      "https://hub-mirror.c.163.com",</span><br><span class="line">      "https://mirror.baidubce.com",</span><br><span class="line">      "https://dockerhub.azk8s.cn"</span><br><span class="line">    ],</span><br><span class="line">  "insecure-registries" : [</span><br><span class="line">    "hub-mirror.c.163.com",</span><br><span class="line">    "mirror.baidubce.com",</span><br><span class="line">    "dockerhub.azk8s.cn"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="利用Dockerfile定制镜像"><a href="#利用Dockerfile定制镜像" class="headerlink" title="利用Dockerfile定制镜像"></a>利用Dockerfile定制镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask部署</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; pip install -r /code/requirements.txt</span></span><br><span class="line"><span class="comment"># 如果太慢了再加上这句 不然镜像站有可能同步不全导致包安装失败</span></span><br><span class="line"><span class="comment"># -i https://pypi.tuna.tsinghua.edu.cn/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn app:app -c gunicorn.conf.py --error-logfile /<span class="built_in">log</span>/gunicorn.log</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 'name' .</span><br><span class="line">docker run -it 'name'</span><br><span class="line">docker run -d 'name'</span><br></pre></td></tr></table></figure><table><thead><tr><th>COPY</th><th>复制文件</th></tr></thead><tbody><tr><td>CMD</td><td>容器启动命令</td></tr><tr><td>ENV</td><td>设置环境变量</td></tr><tr><td>WORKDIR</td><td>指定工作目录</td></tr></tbody></table><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>docker image/container ls <strong>列出所有镜像/容器</strong> </li><li>docker rm … <strong>删除镜像</strong> </li><li>docker attach … 进入容器</li><li>docker ps -a <strong>列出所有的container包括没有运行的</strong> </li></ul><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask redis nginx mysql部署</span></span><br><span class="line">version: <span class="string">'3.6'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    container_name: web</span><br><span class="line">    volumes:</span><br><span class="line">      - ../logs:/log</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=mx/<span class="number">58</span>MFuLJ6^%.q</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/mysql:/docker-<span class="keyword">entrypoint</span><span class="bash">-initdb.d</span></span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:<span class="number">1.17</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">    depends_on:</span><br><span class="line">      - web</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8888</span>:<span class="number">80</span></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:<span class="number">5.0</span>.<span class="number">8</span></span><br><span class="line">    volumes:</span><br><span class="line">    - ./config/redis/redis.conf:/etc/redis/redis.conf</span><br><span class="line">    command: redis-server</span><br><span class="line">    privileged: true</span><br></pre></td></tr></table></figure><ul><li>build <strong>利用Dockerfile编译的目录</strong></li><li>image <strong>镜像</strong> </li><li>volumes <strong>目录映射关系</strong> </li><li>depend_on <strong>依赖于 当依赖启动后本service才能启动</strong> </li><li>port <strong>开放的端口映射</strong> </li><li>environment <strong>环境变量</strong> </li><li>privileged <strong>权限</strong> </li><li>command <strong>自带命令行</strong> </li></ul><h2 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>docker-compose start</li><li>docker-compose stop</li><li>docker-compose top</li></ul><h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><h3 id="列出所有的容器-ID"><a href="#列出所有的容器-ID" class="headerlink" title="列出所有的容器 ID"></a>列出所有的容器 ID</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h3 id="停止所有的容器"><a href="#停止所有的容器" class="headerlink" title="停止所有的容器"></a>停止所有的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="删除所有的镜像"><a href="#删除所有的镜像" class="headerlink" title="删除所有的镜像"></a>删除所有的镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="docker1-3之后的资源清理"><a href="#docker1-3之后的资源清理" class="headerlink" title="docker1.3之后的资源清理"></a>docker1.3之后的资源清理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image prune --force --all # 删除所有不使用的镜像</span><br><span class="line">docker container prune -f # 删除所有停止的容器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一点点docker笔记
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="docker" scheme="http://blog.fivezha.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>页面置换算法之LRU算法(C++实现)</title>
    <link href="http://blog.fivezha.cn/2019/12/10/page-LRU/"/>
    <id>http://blog.fivezha.cn/2019/12/10/page-LRU/</id>
    <published>2019-12-10T01:55:45.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>因为操作系统实验要写 所以写了</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p><strong>LRU(Least Recently Used)</strong>置换算法的描述</p><p>选择<strong>最后一次访问时间距离当前时间最长**</strong>的一页并淘汰之。</p><p>即淘汰没有使用的时间最长的页。实现代价很高(时间戳或硬件方法)</p><h2 id="-1"><a href="#-1" class="headerlink" title="!"></a>!</h2><p>详见: <a href="https://github.com/xmmmmmovo/ZhaOS/blob/master/OperatorSystem/exp5/LRUMain.cpp" target="_blank" rel="noopener">GIthub</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/Q0XctI.png" alt="Q0XctI.png" title="">                </div>                <div class="image-caption">Q0XctI.png</div>            </figure><p>下面是测试数据, 根据的是上课的ppt:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/Q0jAgK.jpg" alt="Q0jAgK.jpg" title="">                </div>                <div class="image-caption">Q0jAgK.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/Q0Xr0H.png" alt="Q0Xr0H.png" title="">                </div>                <div class="image-caption">Q0Xr0H.png</div>            </figure><p>可以看到, 9次页面置换跟缺页率都是正确的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为操作系统实验要写 所以写了&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="os" scheme="http://blog.fivezha.cn/tags/os/"/>
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>页面置换算法之FIFO算法(C++实现)</title>
    <link href="http://blog.fivezha.cn/2019/12/09/page-fifo/"/>
    <id>http://blog.fivezha.cn/2019/12/09/page-fifo/</id>
    <published>2019-12-09T14:09:16.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>因为操作系统实验要写 所以写了</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p><strong>先进先出(FIFO)</strong>页面置换算法</p><p>选择在内存中<strong>驻留时间最长</strong>的页并淘汰之</p><h2 id="-1"><a href="#-1" class="headerlink" title="!"></a>!</h2><p>详见: <a href="https://github.com/xmmmmmovo/ZhaOS/blob/master/OperatorSystem/exp5/PageFIFOMain.cpp" target="_blank" rel="noopener">GIthub</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/09/Q0tuB6.png" alt="Q0tuB6.png" title="">                </div>                <div class="image-caption">Q0tuB6.png</div>            </figure><p>下面是测试数据, 根据的是上课的ppt:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/09/Q0Yv1s.jpg" alt="testdata.jpg" title="">                </div>                <div class="image-caption">testdata.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/09/Q0tKHK.png" alt="Q0tKHK.png" title="">                </div>                <div class="image-caption">Q0tKHK.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为操作系统实验要写 所以写了&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="os" scheme="http://blog.fivezha.cn/tags/os/"/>
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>银行家算法的C++实现</title>
    <link href="http://blog.fivezha.cn/2019/12/05/bank-algorithm/"/>
    <id>http://blog.fivezha.cn/2019/12/05/bank-algorithm/</id>
    <published>2019-12-05T12:12:48.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>因为操作系统实验要写 所以写了</p><a id="more"></a><h3 id="银行家算法是一种避免死锁的方法"><a href="#银行家算法是一种避免死锁的方法" class="headerlink" title="银行家算法是一种避免死锁的方法"></a>银行家算法是一种避免死锁的方法</h3><p>在避免死锁的方法中，允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次资源分配的安全性。若此次分配不会导致系统进入不安全状态，则将资源分配给进程；否则，令进程等待。<br>虽然并非所有的不安全状态都必然会转为死锁状态，但当系统进入不安全状态后，便有可能进而进入死锁状态；反之，只要系统处于安全状态，系统便可避免进入死锁状态。<br>因此，避免死锁的实质在于：系统在进行资源分配时，如何使系统不进入不安全状态。</p><h3 id="银行家算法思想很简单"><a href="#银行家算法思想很简单" class="headerlink" title="银行家算法思想很简单"></a>银行家算法思想很简单</h3><p>这个算法中,  主要是维护其中的</p><blockquote><p><code>available</code>向量</p><p><code>max</code>矩阵</p><p><code>allocation</code>矩阵</p></blockquote><p>每一次分配, 都会轮询一遍可分配矩阵, 寻求可以分配的process,  如果没有可以分配的process, 则跳出循环进行是否进入死锁的判断.</p><p>具体<a href="https://zh.wikipedia.org/wiki/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">维基百科</a>讲的其实比我好</p><h3 id="银行家算法代码好写"><a href="#银行家算法代码好写" class="headerlink" title="银行家算法代码好写"></a>银行家算法代码好写</h3><p>下面两张图一张是源码 一张是结果</p><p>其中数据来源于文件 可以方便自定义</p><p>具体可以见我的<a href="https://github.com/xmmmmmovo/ZhaOS/blob/master/OperatorSystem/exp4/BankAlgorithmMain.cpp" target="_blank" rel="noopener">GitHub仓库</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/05/QGeZM8.png" alt="代码内容" title="">                </div>                <div class="image-caption">代码内容</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/05/QGeExf.png" alt="内容" title="">                </div>                <div class="image-caption">内容</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为操作系统实验要写 所以写了&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="os" scheme="http://blog.fivezha.cn/tags/os/"/>
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>playframework初涉-2.配置MySQL并测试</title>
    <link href="http://blog.fivezha.cn/2019/10/11/play-study-s/"/>
    <id>http://blog.fivezha.cn/2019/10/11/play-study-s/</id>
    <published>2019-10-10T16:14:27.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>悲伤的play framework + MySQL配置过程</p><a id="more"></a><h3 id="因为playframework版本太低卸载mysql8"><a href="#因为playframework版本太低卸载mysql8" class="headerlink" title="因为playframework版本太低卸载mysql8"></a>因为playframework版本太低卸载mysql8</h3><p>首先有一件很悲伤的消息，下面这个版本</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/mysql8.jpg" alt="mysql8" title="">                </div>                <div class="image-caption">mysql8</div>            </figure><p>，因为play版本过低，无法完全兼容，需要降级到mysql5的版本，如果已经安装，那么可以以<strong>管理员启动</strong>命令行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/cmdmaster.jpg" alt="cmd" title="">                </div>                <div class="image-caption">cmd</div>            </figure><p><strong>然后先输入(前提是已经配置过mysql到环境变量 否则请到mysql文件夹中再执行)</strong></p><p><strong><code>net stop mysql</code></strong></p><p><strong><code>mysqld --remove</code></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/realremove.jpg" alt="real remove" title="">                </div>                <div class="image-caption">real remove</div>            </figure><p> 之后整个删除整个<code>mysql-8.0.12-winx64</code>版本</p><h3 id="然后安装MySQL5-7版本-地下群群文件里有"><a href="#然后安装MySQL5-7版本-地下群群文件里有" class="headerlink" title="然后安装MySQL5.7版本(地下群群文件里有)"></a>然后安装MySQL5.7版本(地下群群文件里有)</h3><p><strong>基本是一路next就可以了</strong></p><p><a href="https://blog.csdn.net/s_x123456/article/details/86754486?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener"><strong>这里也给个安装的教程</strong></a></p><p>下面几项注意下</p><p>这里选custom安装</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/complete.jpg" alt="complete" title="">                </div>                <div class="image-caption">complete</div>            </figure><p>这里选添加到环境变量</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/main.jpg" alt="main" title="">                </div>                <div class="image-caption">main</div>            </figure><p>设定登录密码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/login.jpg" alt="login" title="">                </div>                <div class="image-caption">login</div>            </figure><p>这里务必选择utf8编码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/utf8.jpg" alt="utf-8" title="">                </div>                <div class="image-caption">utf-8</div>            </figure><p>大概就是这些，最后一路next到底就行了，经过漫长的等待，可能会让你重启，重启就可以了</p><p><strong>注：如果无响应，那就直接关了然后再打开安装文件，选择repair选项，完成之后重启</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/repair.jpg" alt="repair" title="">                </div>                <div class="image-caption">repair</div>            </figure><p>重启之后再以<strong>管理员打开</strong>命令提示行，执行下面两行语句</p><p><code>mysqld -install</code></p><p><code>net start mysql</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/start.jpg" alt="start" title="">                </div>                <div class="image-caption">start</div>            </figure><p>此时，便可以输入<code>mysql -u root</code>进入数据库了</p><p>不过这个开始时没有密码的，你需要输入以下两行更新密码</p><p><strong><code>set password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;123456&#39;);</code>注：password()里面的就是你设定的密码</strong></p><p><strong><code>flush privileges;</code>这一步是更新权限</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/password.jpg" alt="change password" title="">                </div>                <div class="image-caption">change password</div>            </figure><p>好了 这样你的数据库便配置完成了</p><p>然后新建一个database(mysql里的database等同于于scheme)</p><p><strong><code>create database test;</code>(test是你新建数据库的名字 随便写)</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/database.jpg" alt="database" title="">                </div>                <div class="image-caption">database</div>            </figure><p>此时回到play你新建的app中在application.conf中设置mysql</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/setting.jpg" alt="setting" title="">                </div>                <div class="image-caption">setting</div>            </figure><p>如果你跟我做的一样，那么应该是下面这样:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/setting2.jpg" alt="setting2" title="">                </div>                <div class="image-caption">setting2</div>            </figure><p>随后编写测试程序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/user.jpg" alt="user" title="">                </div>                <div class="image-caption">user</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/test.jpg" alt="test" title="">                </div>                <div class="image-caption">test</div>            </figure><p>运行app，访问网址后，看到有正常输出</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/succ.jpg" alt="success" title="">                </div>                <div class="image-caption">success</div>            </figure><p>且数据库中有东西</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/sqlin.jpg" alt="sql" title="">                </div>                <div class="image-caption">sql</div>            </figure><p>那么则说明配置成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;悲伤的play framework + MySQL配置过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="play" scheme="http://blog.fivezha.cn/tags/play/"/>
    
      <category term="java" scheme="http://blog.fivezha.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>水题五道</title>
    <link href="http://blog.fivezha.cn/2019/09/12/lab-summer-question/"/>
    <id>http://blog.fivezha.cn/2019/09/12/lab-summer-question/</id>
    <published>2019-09-12T12:10:14.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>实验室暑假考核题目</p><p>随便写写解题思路来着</p><a id="more"></a><h3 id="824-山羊拉丁文"><a href="#824-山羊拉丁文" class="headerlink" title="824.山羊拉丁文"></a>824.山羊拉丁文</h3><blockquote><p>给定一个由空格分割单词的句子 S。每个单词只包含大写或小写字母。</p><p>我们要将句子转换为 “Goat Latin”（一种类似于 猪拉丁文 - Pig Latin 的虚构语言）。</p><p>山羊拉丁文的规则如下：</p><p>如果单词以元音开头（a, e, i, o, u），在单词后添加”ma”。<br>例如，单词”apple”变为”applema”。</p><p>如果单词以辅音字母开头（即非元音字母），移除第一个字符并将它放到末尾，之后再添加”ma”。<br>例如，单词”goat”变为”oatgma”。</p><p>根据单词在句子中的索引，在单词最后添加与索引相同数量的字母’a’，索引从1开始。<br>例如，在第一个单词后添加”a”，在第二个单词后添加”aa”，以此类推。<br>返回将 S 转换为山羊拉丁文后的句子。</p><p>来源：</p><p>leetcode 824</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toGoatLatin</span><span class="params">(self, S: str)</span> -&gt; str:</span></span><br><span class="line">        vowel = <span class="string">"aeiouAEIOU"</span></span><br><span class="line"></span><br><span class="line">        spllit_str = S.split(<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">for</span> k, s <span class="keyword">in</span> enumerate(spllit_str):</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> vowel:</span><br><span class="line">                s = s[<span class="number">1</span>:] + s[<span class="number">0</span>]</span><br><span class="line">            s += <span class="string">"ma"</span> + <span class="string">"a"</span> * (k + <span class="number">1</span>)</span><br><span class="line">            spllit_str[k] = s</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(spllit_str)</span><br></pre></td></tr></table></figure><p>很简单得暴力题目 直接搞定</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1.png" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><h3 id="1078-Bigram-分词"><a href="#1078-Bigram-分词" class="headerlink" title="1078.Bigram 分词"></a>1078.Bigram 分词</h3><blockquote><p>给出第一个词 first 和第二个词 second，考虑在某些文本 text 中可能以 “first second third” 形式出现的情况，其中 second 紧随 first 出现，third 紧随 second 出现。</p><p>对于每种这样的情况，将第三个词 “third” 添加到答案中，并返回答案。</p><p>示例 1：</p><p>输入：text = “alice is a good girl she is a good student”, first = “a”, second = “good”<br>输出：[“girl”,”student”]<br>示例 2：</p><p>输入：text = “we will we will rock you”, first = “we”, second = “will”<br>输出：[“we”,”rock”]</p><p>提示：</p><p>1 &lt;= text.length &lt;= 1000<br>text 由一些用空格分隔的单词组成，每个单词都由小写英文字母组成<br>1 &lt;= first.length, second.length &lt;= 10<br>first 和 second 由小写英文字母组成</p><p>来源：</p><p>leetcode 1078</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOcurrences</span><span class="params">(self, text: str, first: str, second: str)</span> -&gt; List[str]:</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        split_str = text.split()</span><br><span class="line">        length = len(split_str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, s <span class="keyword">in</span> enumerate(split_str):</span><br><span class="line">            <span class="keyword">if</span> s == first <span class="keyword">and</span> k + <span class="number">1</span> &lt; length <span class="keyword">and</span> k + <span class="number">2</span> &lt; length:</span><br><span class="line">                <span class="keyword">if</span> split_str[k + <span class="number">1</span>] == second:</span><br><span class="line">                    ans.append(split_str[k + <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>暴力完事儿，这里顺便优化一下，可以把60ms提到40ms左右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOcurrences</span><span class="params">(self, text: str, first: str, second: str)</span> -&gt; List[str]:</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        split_str = text.split()</span><br><span class="line">        length = len(split_str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, s <span class="keyword">in</span> enumerate(split_str[:<span class="number">-2</span>]):</span><br><span class="line">            <span class="keyword">if</span> s == first <span class="keyword">and</span> split_str[k + <span class="number">1</span>] == second:</span><br><span class="line">                ans.append(split_str[k + <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>搞定</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/2.png" alt="2" title="">                </div>                <div class="image-caption">2</div>            </figure><h3 id="120-三角形最小路径和"><a href="#120-三角形最小路径和" class="headerlink" title="120. 三角形最小路径和"></a>120. 三角形最小路径和</h3><blockquote><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p><p>例如，给定三角形：</p><p>[<br>     [2],<br>    [3,4],<br>   [6,5,7],<br>  [4,1,8,3]<br>]<br>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p><p>说明：</p><p>如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。</p><p>来源：</p><p>leetcode  120</p></blockquote><p>dp 说是空间复杂度O(N)，但其实这个题目空间复杂度可以到O(1)</p><p>先尝试用DFS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># DFS</span></span><br><span class="line">        floors = len(triangle)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(floor, left, right)</span>:</span></span><br><span class="line">            <span class="comment"># 判断是否最下层也计算过了</span></span><br><span class="line">            <span class="keyword">if</span> floor == floors:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># 最低端再往下权重就是0</span></span><br><span class="line"></span><br><span class="line">            ans = <span class="number">0</span> <span class="comment"># 初始为0</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; floor + <span class="number">1</span>:</span><br><span class="line">                tl = dfs(floor + <span class="number">1</span>, left, left + <span class="number">1</span>) + triangle[floor][left]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> right &lt; floor + <span class="number">1</span>:</span><br><span class="line">                tr = dfs(floor + <span class="number">1</span>, right, right + <span class="number">1</span>) + triangle[floor][right]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ans + min(tl, tr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>) + triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>结果果然华丽丽的超时了，打眼一看过了42个，卡在了最后一个，可能改改就能过了吧(可能性比较小，因为用C++试了下也超时，应该是卡的时间)，不过也是很极限了，所以改用dp写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp</span></span><br><span class="line">        floors = len(triangle)</span><br><span class="line">        <span class="keyword">if</span> floors == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(floors - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>):</span><br><span class="line">                triangle[i][j] += min(triangle[i + <span class="number">1</span>][j + <span class="number">1</span>], triangle[i + <span class="number">1</span>][j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>这里可以不用开新的dp数组(无论是二维还是一维)，因为是从下往上的，只需要最终结果，所以可以直接利用原三角形数组当作dp数组，所以空间就变成了O(1)了。</p><p>不过这个才只打败了50%的人，甚至空间只打败了5%</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/3.png" alt="3" title="">                </div>                <div class="image-caption">3</div>            </figure><p>下面这个是最快用时的答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> triangle:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        res = triangle[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(triangle) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(triangle[i])):</span><br><span class="line">                res[j] = min(res[j], res[j + <span class="number">1</span>]) + triangle[i][j]</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>从中，可以看到：</p><ol><li>其实定义过多变量会减缓速度并且增加空间用量，编译器会给优化的。</li><li>尽量用一维list索引，速度会快很多</li><li>尽量使用相同的list进行索引，编译器会优化</li></ol><h3 id="872-叶子相似的树"><a href="#872-叶子相似的树" class="headerlink" title="872. 叶子相似的树"></a>872. 叶子相似的树</h3><blockquote><p>请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。</p><p>举个例子，如上图所示，给定一颗叶值序列为 (6, 7, 4, 9, 8) 的树。</p><p>如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是 叶相似 的。</p><p>如果给定的两个头结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。</p><p>提示：</p><p>给定的两颗树可能会有 1 到 100 个结点。</p><p>来源：</p><p>leetcode 872</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/tree4.png" alt="treepic" title="">                </div>                <div class="image-caption">treepic</div>            </figure><p>直接前序遍历加判断，暴力就完事儿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leafSimilar</span><span class="params">(self, root1: TreeNode, root2: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 前序遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">tree_leaf_sim_calcu</span><span class="params">(root: TreeNode)</span>:</span></span><br><span class="line">            stack, ans = [], []  <span class="comment"># 用list</span></span><br><span class="line">            <span class="keyword">while</span> len(stack) <span class="keyword">or</span> root:</span><br><span class="line">                <span class="keyword">if</span> root:</span><br><span class="line">                    <span class="keyword">if</span> root.left <span class="keyword">is</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        ans.append(root.val)</span><br><span class="line">                    stack.append(root)</span><br><span class="line">                    root = root.left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    root = stack.pop().right</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tree_leaf_sim_calcu(root1) == tree_leaf_sim_calcu(root2)</span><br></pre></td></tr></table></figure><p>但其实这样只击败了44%的用户，看了一下用时快的回答，发现基本上都是用的递归，递归占用资源太大，所以就不改了，思想都是一样的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/4.png" alt="4" title="">                </div>                <div class="image-caption">4</div>            </figure><p>为什么递归用时会短呢，这是因为python里的while循环是用纯python编写的，所以效率远不及简单函数堆栈的效率，所以会出现非递归比递归用时长的现象，如果用别的语言(没错就是C++)是不会出现这种问题的！</p><h3 id="863-二叉树中所有距离为-K-的结点"><a href="#863-二叉树中所有距离为-K-的结点" class="headerlink" title="863. 二叉树中所有距离为 K 的结点"></a>863. 二叉树中所有距离为 K 的结点</h3><blockquote><p>给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。</p><p>返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。</p><p>示例 1：</p><p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2</p><p>输出：[7,4,1]</p><p>解释：<br>所求结点为与目标结点（值为 5）距离为 2 的结点，<br>值分别为 7，4，以及 1</p><p>注意，输入的 “root” 和 “target” 实际上是树上的结点。<br>上面的输入仅仅是对这些对象进行了序列化描述。</p><p>提示：</p><p>给定的树是非空的，且最多有 K 个结点。<br>树上的每个结点都具有唯一的值 0 &lt;= node.val &lt;= 500 。<br>目标结点 target 是树上的结点。<br>0 &lt;= K &lt;= 1000.</p><p>来源：</p><p>leetcode 863</p></blockquote><p>dfs加父节点转成图问题再利用bfs寻找target为中心的节点。这里代码参考了标准答案，想看的去题解看第一个就ok了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distanceK</span><span class="params">(self, root, target, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type target: TreeNode</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否是本身</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> K:</span><br><span class="line">            <span class="keyword">return</span> [target.val]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dfs标记父节点</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node: TreeNode, father_node: TreeNode)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                node.father = father_node</span><br><span class="line">                dfs(node.left, node)</span><br><span class="line">                dfs(node.right, node)</span><br><span class="line"></span><br><span class="line">        dfs(root, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这一步过后其实就变成了图问题，每个都有三个节点的图</span></span><br><span class="line">        <span class="comment"># 下面对于target进行bfs</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">()</span>:</span></span><br><span class="line">            search = &#123;target&#125;</span><br><span class="line">            queue = deque([(target, <span class="number">0</span>)])  <span class="comment"># 存0 即原点</span></span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                <span class="keyword">if</span> queue[<span class="number">0</span>][<span class="number">1</span>] == K:</span><br><span class="line">                    <span class="keyword">return</span> [node.val <span class="keyword">for</span> node, N <span class="keyword">in</span> queue]</span><br><span class="line">                node, N = queue.popleft()</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> (node.left, node.right, node.father):</span><br><span class="line">                    <span class="keyword">if</span> n <span class="keyword">and</span> n <span class="keyword">not</span> <span class="keyword">in</span> search:</span><br><span class="line">                        queue.append((n, N + <span class="number">1</span>))</span><br><span class="line">                        search.add(n)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bfs()</span><br></pre></td></tr></table></figure><p>看了一下速度最快的回答，也是dfs建图+bfs搜索，除了一些骚操作，应该大部分都是优化这个思路的代码实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/5.png" alt="5" title="">                </div>                <div class="image-caption">5</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验室暑假考核题目&lt;/p&gt;
&lt;p&gt;随便写写解题思路来着&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
      <category term="python" scheme="http://blog.fivezha.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>playframework初涉-1.环境配置</title>
    <link href="http://blog.fivezha.cn/2019/09/04/play-study-f/"/>
    <id>http://blog.fivezha.cn/2019/09/04/play-study-f/</id>
    <published>2019-09-04T09:24:50.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>因为Javaee课要用这个框架 所以稍微学了下</p><a id="more"></a><h2 id="1-运行环境配置"><a href="#1-运行环境配置" class="headerlink" title="1.运行环境配置"></a>1.运行环境配置</h2><h3 id="1-1确保拥有Java环境"><a href="#1-1确保拥有Java环境" class="headerlink" title="1.1确保拥有Java环境"></a>1.1确保拥有Java环境</h3><p>检查环境：</p><p>可能之前有人配置过Java环境，所以首先先判断你是否有安装过Java，按下<code>win + R</code>键，出现运行界面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/run.png" alt="run" title="">                </div>                <div class="image-caption">run</div>            </figure></p><p>输入<code>cmd</code>会出现熟悉的命令提示框，此时输入<code>Java</code>然后按回车如果显示下面类似的便可以跳过到1.2去<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/cmd.png" alt="cmd" title="">                </div>                <div class="image-caption">cmd</div>            </figure></p><p>如果是下图情况</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/wrong_env.png" alt="wrong_env" title="">                </div>                <div class="image-caption">wrong_env</div>            </figure><p>请配置环境：</p><ol><li><p>安装Java(请看群文件javaee文件夹或者自己去官网下载)</p></li><li><p>在此电脑右键点属性<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/env2.png" alt="env1](https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/env1.png)![env1" title="">                </div>                <div class="image-caption">env1](https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/env1.png)![env1</div>            </figure></p></li><li><p>双击点进去，如下配置<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/env_3.png" alt="env3" title="">                </div>                <div class="image-caption">env3</div>            </figure></p></li><li><p>一路点确定下去，最后再重复最上面的检查环境操作进行判断。</p></li></ol><h3 id="1-2-配置play-framework环境"><a href="#1-2-配置play-framework环境" class="headerlink" title="1.2 配置play framework环境"></a>1.2 配置play framework环境</h3><p>这里选取的是<code>1.5.1</code>版本，可以在官网或者群文件中下载，然后找到你的<code>play-1.5.1</code>的下载的本地文件夹，解压缩后把<code>play-1.5.1</code>文件夹放到环境变量里<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/env_4.png" alt="env_4" title="">                </div>                <div class="image-caption">env_4</div>            </figure></p><p>此时在命令框中输入play则会出现如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/play_env2.png" alt="play_env2" title="">                </div>                <div class="image-caption">play_env2</div>            </figure></p><p>则说明环境已经配置好了</p><h3 id="1-3-新建web项目"><a href="#1-3-新建web项目" class="headerlink" title="1.3 新建web项目"></a>1.3 新建web项目</h3><p>这里只需要到你想要创建项目的文件夹中，按住<code>shift + 右键</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/right_click.png" alt="rc" title="">                </div>                <div class="image-caption">rc</div>            </figure></p><p>然后输入<code>play new 项目名</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/play_new.png" alt="new" title="">                </div>                <div class="image-caption">new</div>            </figure><p><strong>然后输入<code>cd 项目名</code>，在输入<code>play idealize</code>(用eclipse的话就是<code>play eclipsify</code>)</strong></p><p><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/idea_succ.png" alt="succ" title="">                </div>                <div class="image-caption">succ</div>            </figure></p><h2 id="2-IDE环境配置"><a href="#2-IDE环境配置" class="headerlink" title="2. IDE环境配置"></a>2. IDE环境配置</h2><p>配置好了运行环境，那么就应该开始配置我们使用的IDE环境了，这里有两个选择</p><ol><li>IDEA</li><li>eclipse</li></ol><p>这这两个ide个人推荐使用IDEA，但是eclipse配置简单，这个只能说是见仁见智了。</p><h3 id="2-1-配置IDEA"><a href="#2-1-配置IDEA" class="headerlink" title="2.1 配置IDEA"></a>2.1 配置IDEA</h3><p>找到idea安装文件(官网或者QQ群里有)，安装一直next到最后，出现选项选下面这几个<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/ch1.png" alt="ch1" title="">                </div>                <div class="image-caption">ch1</div>            </figure></p><p>然后首次启动IDEA跟着下面的配置来就可以，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/ch2.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/ch3.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><p>这里是选择你的颜色主题 你可以选择暗色或者亮色</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/ch4.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/ch5.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/ch6.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><h3 id="2-2-项目配置流程"><a href="#2-2-项目配置流程" class="headerlink" title="2.2 项目配置流程"></a>2.2 项目配置流程</h3><p>这里如果你按照上面的操作进行了<code>play idealize</code>操作之后，你项目的文件夹里面应该会出现一个<code>项目名.ipr</code>的文件，双击打开便可以直接打开idea并加载项目了。</p><p>首先先把下面的tips关掉(因为太烦人了)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/tipoff.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><p>点开，左面的<code>project</code>出现文件结构，如果不一样请寻找是否有漏掉的步骤，然后打开<code>controllers/Application.java</code>可能会提示你填SDK，选择其中一个<code>jdk</code>就可以了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/jdk1.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/jdk2.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><p>然后我们会发现因为docviewer导包问题会有一堆麻烦，所以我们直接删了就可以。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/delete1.png" alt="delete" title="">                </div>                <div class="image-caption">delete</div>            </figure><p>然后我们配置启动程序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/run1.png" alt="add" title="">                </div>                <div class="image-caption">add</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/run2.png" alt="add2" title="">                </div>                <div class="image-caption">add2</div>            </figure><p>其中VM options是<code>-Dapplication.path=.</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/setting.png" alt="run3" title="">                </div>                <div class="image-caption">run3</div>            </figure><p>然后我们开始运行，如果出现models不存在的bug，这个是因为你models文件夹里面没有存在文件，添加一个就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/wrong_pack.png" alt="file" title="">                </div>                <div class="image-caption">file</div>            </figure><p>然后就可以运行了，当你看到 </p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/run_succ.png" alt="run"></p><p>的时候打开浏览器，输入<code>http://localhost:9000/</code>回车</p><p>如果看见下面这个就说明配置成功了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/succ.png" alt="succ" title="">                </div>                <div class="image-caption">succ</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为Javaee课要用这个框架 所以稍微学了下&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="play" scheme="http://blog.fivezha.cn/tags/play/"/>
    
      <category term="java" scheme="http://blog.fivezha.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>opencv中高斯模糊(滤波器)的源码解析(c++版)</title>
    <link href="http://blog.fivezha.cn/2019/02/25/gaussianbulr-analyze/"/>
    <id>http://blog.fivezha.cn/2019/02/25/gaussianbulr-analyze/</id>
    <published>2019-02-25T11:40:25.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p><strong>因为实验室假期需要写一篇关于opencv的作业 所以顺便看了一下opencv(版本3.2.0)里面关于高斯模糊的源码</strong></p><a id="more"></a><h2 id="分析函数接口"><a href="#分析函数接口" class="headerlink" title="分析函数接口"></a>分析函数接口</h2><p>首先，在下用的是vs版本的opencv，是直接编译好给你静态库(.lib)文件的，所以当我按住<code>ctrl</code>寻找<code>GaussianBlur</code>这个函数时 只发现了其在<code>imgproc.hpp</code>里面提供给你的接口。</p><p>大概是下面这个样子的:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/高斯函数接口2.png" alt="高斯模糊函数接口1" title="">                </div>                <div class="image-caption">高斯模糊函数接口1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/高斯函数.png" alt="高斯模糊函数接口2" title="">                </div>                <div class="image-caption">高斯模糊函数接口2</div>            </figure><blockquote><p>该函数将源图像与指定的卷积核进行卷积。并且支持原图像直接进行滤波操作。</p></blockquote><p>可以看到这个函数接口主要由四个部分组成:</p><ol><li><p><code>CV_EXPORTS_W</code><br>继续往上找 可以发现这是一个宏定义</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/%E5%AE%8F%E5%AE%9A%E4%B9%89.png" alt="宏定义1"></p><p>可以发现 这个宏定义是在<strong>编译阶段</strong>将<code>CV_EXPORTS</code>替换为了<code>CV_EXPORTS_W</code>再向上查找 会发现</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/%E5%AE%8F%E5%AE%9A%E4%B9%892.png" alt="宏定义2"></p><p>这里又是一个宏组成的用以定义<code>CV_EXPORTS</code>的宏组，这一段其实就是类似于<code>if else</code>的结构，主要的作用机理便是<strong>适配各类环境(操作系统)</strong> 。从中，我们这里又分成了三个部分进行解析:</p><ol><li><p><code>#if (defined WIN32 || defined _WIN32 || defined WINCE || defined __CYGWIN__) &amp;&amp; defined CVAPI_EXPORTS</code><br>可以看到，这里判断了两个表达式的逻辑与(<code>(defined WIN32 || defined _WIN32 || defined WINCE || defined __CYGWIN__)</code>和<code>defined CVAPI_EXPORTS</code>)</p><ol><li><p>首先，<code>defined</code>的意义在于寻找后面的字段是否已经被宏定义过。</p></li><li><p>其次，观察第一个表达式，发现<code>_WIN32</code> 在之前已经被定义过了，通过查阅<a href="https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=vs-2017" target="_blank" rel="noopener">微软官方宏定义文档</a>发现这个字段作用是基于编译器一个信号，表明是Windows环境下编译及运行的程序。</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/WIN32.png" alt="WIN"></p><p>再查找前后未定义过的字段，继而发现<code>WIN32</code>是<strong>只要包含了 Windows.h，那么 WIN32 常量是肯定定义了</strong>的设定，不能用于判断平台环境。<br>而<code>WINCE</code>便是判断是否为WINCE环境的程序<br><code>__CYGWIN__</code>如果事先有了解过cygwin这个程序的话，这个应该不难看懂，也是用以判断环境的定义，而cywin则是在Windows环境下用以模拟Unix环境的软件(P.S.还是蛮好用的)</p></li><li><p>再次，观察第二个表达式，也是查找字段是否定义过，这个查了一下，发现这个宏定义是存在于opencv.dll这个文件里面的。也就是判断是否已经链接了动态库。</p></li><li><p>这样这一行便很容易懂了，目的便是判断程序环境<strong>是否为Windows</strong>且已经链接opencv.dll的库用以进行下一步操作。</p></li><li><p>再提一句，关于这个操作系统(环境)的判定其实还有很多，这里放一个<a href="https://github.com/qt/qt/blob/4.8/src/corelib/global/qglobal.h" target="_blank" rel="noopener">Qt里面关于系统判定的头文件(147行开始)(版本比较老了 可自行再自己qt里查看)</a></p></li></ol></li><li><p><code># define CV_EXPORTS __declspec(dllexport)</code><br>这一句涉及到的主要是dll函数导入，需要和下面最后三行联合起来看<br><code>#define CV_EXPORTS</code><br>第二行需要联合上面这句一同分析，首先，这个头文件内部写的都是接口，都是作者自己编写留给别人用以调用的，并且从第一点分析的结果来看，这些接口的<strong>实现</strong>都是放在opencv.dll文件中的，而第一行的判断便是判断你是否在最需要隐式调用，如果有，那么直接可以利用隐式调用的方法进行<a href="https://blog.csdn.net/W_Y2010/article/details/80428067" target="_blank" rel="noopener"><strong>函数导出(具体__declspec也有在微软文档里写)</strong></a><br>反之，如果判断事先未进行链接，那么使用的时候必然是显式调用(没错，就是配置环境的时候配置的lib文件链接，那就是显式调用了<a href="https://wenku.baidu.com/view/f7a24236b52acfc789ebc999.html" target="_blank" rel="noopener">参考此篇文章</a>)，既然是显式调用，自然便不需要进行函数导出操作。所以将<code>CV_EXPORTS</code>字段设置为空。</p></li><li><p><code>elif defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 4</code><br><code>define CV_EXPORTS __attribute__((visibility(&quot;default&quot;)))</code><br>这两句涉及的主要有两个功能: 1. <a href="https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html" target="_blank" rel="noopener">判断是否为GCC编译环境</a> 2. <a href="https://blog.csdn.net/mutourenzhang/article/details/47803803" target="_blank" rel="noopener">为全局动态库函数设置非隐藏声明</a><br>对于第一点，类似于分析第一条，可以知道这句的意思便是检查gcc并测试是否高于4.0.0版本(猜测与c++标准有关)</p></li></ol></li><li><p><code>void</code><br>函数返回值，这里返回值为空</p></li><li><p><code>GaussianBlur</code><br>函数名，这里因为是声明所以是跟源码的函数一样，可以很快找到源码定义。</p></li><li><p><code>()</code><br>括号里面的是函数参数根据上面的说明注释，便可解读出这个函数所有参数意义:</p><ul><li><code>src</code>  这是输入图像，这个图像可以拥有任意数量的通道，这些通道是独立处理的，但深度应该是CV_8U，CV_16U，CV_16S，CV_32F或CV_64F。</li><li><code>dst</code> 这是输出图像，大小与类型与src相同。</li><li><code>ksize</code> 这是卷积核的大小参数(是数字desu)。其中ksize.width和ksize.height可以不同，但是它们必须是一个正奇数(或者零)，并且您不用担心卷积核内部参数问题，卷积核会根据sigma来计算。</li><li><code>sigmaX</code> X方向的卷积核标准偏差。</li><li><code>sigmaY</code> Y方向的高斯核标准偏差; 如果sigmaY为零，则设置为等于sigmaX，如果两个sigma都是零，则它们是从ksize.width和ksize.height计算的（详见cv :: getGaussianKernel）; 这些语义未来均有可能修改，建议指定所有ksize，sigmaX和sigmaY。</li><li><code>borderType</code> 像素外推模式，请参阅cv :: BorderTypes</li><li><code>sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur</code>。这里显示了函数的相关函数，是观察源码的重要提示</li></ul></li></ol><p>这样，对于函数接口的解析就算是完成了，从中我们可以得出以下几个结论：</p><ol><li>直接ctrl寻找到底是不能找到原函数代码的。</li><li>找到原函数的同时也需要sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur这一些列函数辅助理解。</li><li>这个函数在cv命名空间中，名称应该为<code>cv::GaussianBlur</code> 。</li></ol><p>所以接下来第一步便是需要在源码中寻找到真正的函数实现。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="理解高斯模糊函数"><a href="#理解高斯模糊函数" class="headerlink" title="理解高斯模糊函数"></a>理解高斯模糊函数</h3><p>高斯模糊函数本质是利用<strong>高斯滤波器</strong>对于给定图像进行<strong>平滑</strong>操作。平滑操作时什么，是减少噪点。噪点的原因又是什么，是单个像素包含的信息过于独立。如何减少噪点，很简单，只需要让每个像素点包含有周围像素的部分信息就行了呗。选用什么方法，最简单的方法便是——卷积(见下图)。利用一个给定的以某种分布函数构建的二维卷积内核，将中心点对准像素点，进行卷积操作，得到的像素点便包含了周围像素的不完全信息，这样子附近的像素点差异性便会越来越小，当整张图像(或选中部分)卷积完成后，每个像素点便不再过于独立，每个便有了附近像素点的信息，这样字图像便不会看上去那么的“扎眼”，会温润平滑许多，这就是高斯模糊的本质了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/卷积.png" alt="卷积操作" title="">                </div>                <div class="image-caption">卷积操作</div>            </figure><center>[相信看图大概大家就能明白卷积是个啥东西了 再结合上面语句应该就差不多了]</center><h3 id="查找函数"><a href="#查找函数" class="headerlink" title="查找函数"></a>查找函数</h3><p>利用grep命令，很容易便能找到这个函数，找到文件并切到这个函数定义，便可以窥见整个函数的全貌了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/关键字查找1.png" alt="查找" title="">                </div>                <div class="image-caption">查找</div>            </figure><p>以下是cv::GaussianBlur函数全貌:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数1.png" alt="func1" title="">                </div>                <div class="image-caption">func1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数2.png" alt="func2" title="">                </div>                <div class="image-caption">func2</div>            </figure><h3 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h3><p>分析这个函数之前，首先先要从内部关联的函数看起。</p><h4 id="CV-INSTRUMENT-REGION"><a href="#CV-INSTRUMENT-REGION" class="headerlink" title="CV_INSTRUMENT_REGION()"></a>CV_INSTRUMENT_REGION()</h4><p>这一行末尾没有分号，这样的类似函数的字符段有很大可能是一个宏定义变量，经查找，在private.hpp文件中有以下定义：</p><blockquote><p> ///// General instrumentation<br> // General OpenCV region instrumentation macro<br> #define CV_INSTRUMENT_REGION() CV_INSTRUMENT_REGION_META(cv::instr::TYPE_GENERAL, cv::instr::IMPL_PLAIN) </p></blockquote><p>经查找，这个字段主要是关于初始化以及边界类型的判断。</p><h4 id="if-borderType-BORDER-CONSTANT-amp-amp-borderType-amp-BORDER-ISOLATED-0"><a href="#if-borderType-BORDER-CONSTANT-amp-amp-borderType-amp-BORDER-ISOLATED-0" class="headerlink" title="if( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != 0 )"></a>if( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != 0 )</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> type = _src.type();</span><br><span class="line">Size <span class="built_in">size</span> = _src.<span class="built_in">size</span>();</span><br><span class="line">_dst.create( <span class="built_in">size</span>, type );</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    根据说明文档中所写的</span></span><br><span class="line"><span class="comment">    BORDER_CONSTANT    = 0, //!&lt; `iiiiii|abcdefgh|iiiiiii`with some specified `i`</span></span><br><span class="line"><span class="comment">    BORDER_REPLICATE   = 1, //!&lt; `aaaaaa|abcdefgh|hhhhhhh`</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT     = 2, //!&lt; `fedcba|abcdefgh|hgfedcb`</span></span><br><span class="line"><span class="comment">    BORDER_WRAP        = 3, //!&lt; `cdefgh|abcdefgh|abcdefg`</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT_101 = 4, //!&lt; `gfedcb|abcdefgh|gfedcba`</span></span><br><span class="line"><span class="comment">    BORDER_TRANSPARENT = 5, //!&lt; `uvwxyz|absdefgh|ijklmno`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    BORDER_REFLECT101  = BORDER_REFLECT_101, //!&lt; same as BORDER_REFLECT_101</span></span><br><span class="line"><span class="comment">    BORDER_DEFAULT     = BORDER_REFLECT_101, //!&lt; same as BORDER_REFLECT_101</span></span><br><span class="line"><span class="comment">    BORDER_ISOLATED    = 16 //!&lt; do not look outside of ROI</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    BORDER_CONSTANT 需要设置borderValue 指定 ' i ' 值（常数）</span></span><br><span class="line"><span class="comment">    BORDER_REPLICATE ，复制边界像素</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT  ，反射复制边界像素   </span></span><br><span class="line"><span class="comment">    BORDER_REFLECT_101，以边界为对称轴反射复制像素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里是说如果边缘扩展不是常数扩展，且在规定图像范围内部，便执行下列操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果输入矩阵是一个行向量，则滤波核的高强制为1</span></span><br><span class="line">    <span class="comment">// 下面同理</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">size</span>.<span class="built_in">height</span> == <span class="number">1</span> )</span><br><span class="line">        ksize.<span class="built_in">height</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">size</span>.<span class="built_in">width</span> == <span class="number">1</span> )</span><br><span class="line">        ksize.<span class="built_in">width</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果核宽跟核高都是一直接复制输出</span></span><br><span class="line"><span class="keyword">if</span>( ksize.<span class="built_in">width</span> == <span class="number">1</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    _src.copyTo(_dst);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CV-OVX-RUN-true-openvx-gaussianBlur-src-dst-ksize-sigma1-sigma2-borderType"><a href="#CV-OVX-RUN-true-openvx-gaussianBlur-src-dst-ksize-sigma1-sigma2-borderType" class="headerlink" title="CV_OVX_RUN(true, openvx_gaussianBlur(_src, _dst, ksize, sigma1, sigma2, borderType))"></a>CV_OVX_RUN(true, openvx_gaussianBlur(_src, _dst, ksize, sigma1, sigma2, borderType))</h4><p>这里很明显是一个被宏定义的字段，通过查找，我们能够找到其定位在<code>modules/core/include/opencv2/core/openvx/ovx_defs.hpp</code>当中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数3.png" alt="func3" title="">                </div>                <div class="image-caption">func3</div>            </figure><p>按每行解析的话就是如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于检测基于OpenVX的实现的实用程序宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_OPENVX</span></span><br><span class="line"><span class="comment">// 如果检测到OPENVX便执行下列语句</span></span><br><span class="line"><span class="comment">// 下面这两句主要作用也是标识</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IVX_HIDE_INFO_WARNINGS <span class="comment">// 隐藏警告信息</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IVX_USE_OPENCV <span class="comment">// 使用opencv的标识</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ivx.hpp"</span> <span class="comment">// 将hpp文件包含进来</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CV_OVX_RUN(condition, func, ...)          \ <span class="comment">// ...会被替换</span></span></span><br><span class="line">    <span class="comment">// 这里为了给外界提供OpenVX使用表示 利用宏定义做成了一个接口</span></span><br><span class="line"><span class="comment">// 而这个接口则是主要为了提供硬件层面加速用的(主要面向对象是嵌入式设计)</span></span><br><span class="line">        <span class="keyword">if</span> (cv::useOpenVX() &amp;&amp; (condition) &amp;&amp; func)   \</span><br><span class="line">        &#123;                                             \</span><br><span class="line">        <span class="comment">// __VA_ARGS__是可变参数宏定义 用以替换上面...的内容</span></span><br><span class="line">            <span class="keyword">return</span> __VA_ARGS__;                       \</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// 否则便执行下面这条</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CV_OVX_RUN(condition, func, ...)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HAVE_OPENVX</span></span></span><br></pre></td></tr></table></figure><p>其中<code>useOpenVX()</code>函数主要是返回一个bool类型的变量用以判断是否使用openVX用以计算。</p><p>所以<code>CV_OVX_RUN()</code>这句话便是对于嵌入式设计进行尝试性的优化操作。</p><h4 id="ifdef至endif部分"><a href="#ifdef至endif部分" class="headerlink" title="ifdef至endif部分"></a>ifdef至endif部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若之前有过HAVE_TEGRA_OPTIMIZATION优化选项的定义，则执行宏体中的tegra优化版函数并返回</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_TEGRA_OPTIMIZATION</span></span><br><span class="line"><span class="comment">// 拷贝到临时变量(暂不知为什么要拷贝到一个临时变量里面去)</span></span><br><span class="line">    Mat src = _src.getMat();</span><br><span class="line">    Mat dst = _dst.getMat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sigma1 == <span class="number">0</span> &amp;&amp; sigma2 == <span class="number">0</span> &amp;&amp; tegra::useTegra() &amp;&amp; tegra::gaussian(src, dst, ksize, borderType))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里也显而易见是尝试tegra优化。</p><p>但是为什么拷贝到临时变量里也可以改变原值，这里需要进一步到Mat变量的运算符重载里面进行参考。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line">Mat&amp; Mat::<span class="keyword">operator</span> = (<span class="keyword">const</span> Mat&amp; m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span> != &amp;m )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m.u )</span><br><span class="line">            CV_XADD(&amp;m.u-&gt;refcount, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">release</span>(); <span class="comment">// 归零初始化</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        归零后进行基本数据共享</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        flags = m.flags;</span><br><span class="line">        <span class="keyword">if</span>( dims &lt;= <span class="number">2</span> &amp;&amp; m.dims &lt;= <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            dims = m.dims;</span><br><span class="line">            rows = m.rows;</span><br><span class="line">            cols = m.cols;</span><br><span class="line">            <span class="built_in">step</span>[<span class="number">0</span>] = m.<span class="built_in">step</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">step</span>[<span class="number">1</span>] = m.<span class="built_in">step</span>[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            copySize(m);</span><br><span class="line">        data = m.data;</span><br><span class="line">        datastart = m.datastart; <span class="comment">// 共享数据头</span></span><br><span class="line">        dataend = m.dataend; <span class="comment">// 共享数据尾</span></span><br><span class="line">        datalimit = m.datalimit;</span><br><span class="line">        allocator = m.allocator; <span class="comment">// 内存共享</span></span><br><span class="line">        u = m.u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 返回当前对象的引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现在<code>=</code>重载的时候仅是进行的浅拷贝操作，意思是只将数据头数据尾进行复制，而所有数据的内存数据都是相通共享的。固仅需要一方变量更改便会联动所有对其进行过浅拷贝的变量变化。</p><h4 id="剩下部分"><a href="#剩下部分" class="headerlink" title="剩下部分"></a>剩下部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里主要是针对opencl(GPU加速)无法使用的情况进行CPU版本计算</span></span><br><span class="line"><span class="comment">这个IPP是一个Intel提供的开源的计算机视觉加速库，可以提供很多算法的Intel专属的多线程优化方案API，这也是为什么下面在opencl的gpu优化代码之后还又添加了利用CPU版本的filter2D的计算方案(因为有部分Intel专属的优化函数，针对APU和老式的Intel CPU(09年之前)无法进行计算，所以只能选取最普通的filter2D计算方案执行)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">官网FAQ(有兴趣可以了解一下): https://software.intel.com/en-us/articles/intel-integrated-performance-primitives-intel-ipp-open-source-computer-vision-library-opencv-faq/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">CV_IPP_RUN(!(ocl::useOpenCL() &amp;&amp; _dst.isUMat()), ipp_GaussianBlur( _src,  _dst,  ksize, sigma1,  sigma2, borderType));</span><br><span class="line"></span><br><span class="line">Mat kx, ky;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里是新建一个高斯卷积内核(后面讲)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">createGaussianKernels(kx, ky, type, ksize, sigma1, sigma2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里是针对ksize = 3 or 5的情况做了opencl优化(A卡N卡均可享受opencl优化qwq)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">CV_OCL_RUN(_dst.isUMat() &amp;&amp; _src.dims() &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">           ((ksize.<span class="built_in">width</span> == <span class="number">3</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">3</span>) ||</span><br><span class="line">            (ksize.<span class="built_in">width</span> == <span class="number">5</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">5</span>)) &amp;&amp;</span><br><span class="line">           (<span class="keyword">size_t</span>)_src.rows() &gt; ky.total() &amp;&amp; (<span class="keyword">size_t</span>)_src.cols() &gt; kx.total(),</span><br><span class="line">           ocl_GaussianBlur_8UC1(_src, _dst, ksize, CV_MAT_DEPTH(type), kx, ky, borderType));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里便是利用filter2D进行操作了</span></span><br><span class="line"><span class="comment">传入Point(-1, -1) 是指内核中的锚点(就是后面的anchor)位置。默认值（-1，-1）表示锚点位于内核中心。</span></span><br><span class="line"><span class="comment">0 则是存储单位 默认是0 后面会通过计算改变并存储</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sepFilter2D(_src, _dst, CV_MAT_DEPTH(type), kx, ky, Point(<span class="number">-1</span>,<span class="number">-1</span>), <span class="number">0</span>, borderType);</span><br></pre></td></tr></table></figure><p>这里在下主要解析<code>createGaussianKernels</code>与<code>sepFilter2D</code>这两个函数，主要是因为无论是<code>openvx_gaussianBlur</code>还是<code>ipp_GaussianBlur</code>以及<code>ocl_GaussianBlur_8UC1</code>都有着大量未知的API，要读懂这些API还需要大量文档查阅，在下在此就先不解析了。</p><p>所以首先先来看一下<code>createGaussianKernels</code>这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个函数仅是用于是创建高斯卷积核</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createGaussianKernels</span><span class="params">( Mat &amp; kx, Mat &amp; ky, <span class="keyword">int</span> type, Size ksize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">double</span> sigma1, <span class="keyword">double</span> sigma2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = CV_MAT_DEPTH(type); <span class="comment">// 根据输入图像类型获得位深度</span></span><br><span class="line">    <span class="keyword">if</span>( sigma2 &lt;= <span class="number">0</span> )</span><br><span class="line">        sigma2 = sigma1; <span class="comment">// 非正则与sigma1相同</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从sigma自动检测内核大小(如果用户没有设置ksize的话)</span></span><br><span class="line">    <span class="comment">// 根据CV_8U来计算 大致接近7*sigma 或者 9*sigma</span></span><br><span class="line">    <span class="comment">// cvRound函数还内联了汇编 在下看不懂了</span></span><br><span class="line">    <span class="comment">// |1 的原因是使宽高为奇数</span></span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">width</span> &lt;= <span class="number">0</span> &amp;&amp; sigma1 &gt; <span class="number">0</span> )</span><br><span class="line">        ksize.<span class="built_in">width</span> = cvRound(sigma1*(depth == CV_8U ? <span class="number">3</span> : <span class="number">4</span>)*<span class="number">2</span> + <span class="number">1</span>)|<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">height</span> &lt;= <span class="number">0</span> &amp;&amp; sigma2 &gt; <span class="number">0</span> )</span><br><span class="line">        ksize.<span class="built_in">height</span> = cvRound(sigma2*(depth == CV_8U ? <span class="number">3</span> : <span class="number">4</span>)*<span class="number">2</span> + <span class="number">1</span>)|<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这句只是为了保证卷积核的宽跟高是正奇数</span></span><br><span class="line">    CV_Assert( ksize.<span class="built_in">width</span> &gt; <span class="number">0</span> &amp;&amp; ksize.<span class="built_in">width</span> % <span class="number">2</span> == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        ksize.<span class="built_in">height</span> &gt; <span class="number">0</span> &amp;&amp; ksize.<span class="built_in">height</span> % <span class="number">2</span> == <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取最大</span></span><br><span class="line">    sigma1 = <span class="built_in">std</span>::<span class="built_in">max</span>( sigma1, <span class="number">0.</span> );</span><br><span class="line">    sigma2 = <span class="built_in">std</span>::<span class="built_in">max</span>( sigma2, <span class="number">0.</span> );</span><br><span class="line"></span><br><span class="line">    kx = getGaussianKernel( ksize.<span class="built_in">width</span>, sigma1, <span class="built_in">std</span>::<span class="built_in">max</span>(depth, CV_32F) );</span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">height</span> == ksize.<span class="built_in">width</span> &amp;&amp; <span class="built_in">std</span>::<span class="built_in">abs</span>(sigma1 - sigma2) &lt; DBL_EPSILON )</span><br><span class="line">        <span class="comment">// 这里 如果判断核高与核宽相等，且sigma相差很小的情况下</span></span><br><span class="line">        <span class="comment">// 便可以直接进行赋值操作，减少了计算量</span></span><br><span class="line">        ky = kx;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ky = getGaussianKernel( ksize.<span class="built_in">height</span>, sigma2, <span class="built_in">std</span>::<span class="built_in">max</span>(depth, CV_32F) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中我们还需要解析<code>getGaussianKernel</code>这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">cv::getGaussianKernel</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> sigma, <span class="keyword">int</span> ktype )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里定义了一个常量用以规定大小</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SMALL_GAUSSIAN_SIZE = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">// 一个4 * 7的矩阵，用于对奇数长度小内核进行优化计算</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> small_gaussian_tab[][SMALL_GAUSSIAN_SIZE] =</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1.f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.25f</span>, <span class="number">0.5f</span>, <span class="number">0.25f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.0625f</span>, <span class="number">0.25f</span>, <span class="number">0.375f</span>, <span class="number">0.25f</span>, <span class="number">0.0625f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.03125f</span>, <span class="number">0.109375f</span>, <span class="number">0.21875f</span>, <span class="number">0.28125f</span>, <span class="number">0.21875f</span>, <span class="number">0.109375f</span>, <span class="number">0.03125f</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里计算滤波系数（数组）</span></span><br><span class="line"><span class="comment">    如果 内核尺寸为奇数 且小于7</span></span><br><span class="line"><span class="comment">    并且sigma小于等于0</span></span><br><span class="line"><span class="comment">    那么滤波系数便是根据上面的small_gaussian_tab决定的</span></span><br><span class="line"><span class="comment">    否则便是0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* fixed_kernel = n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; n &lt;= SMALL_GAUSSIAN_SIZE &amp;&amp; sigma &lt;= <span class="number">0</span> ? small_gaussian_tab[n&gt;&gt;<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    检测数据类型是否为float和double</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    CV_Assert( ktype == CV_32F || ktype == CV_64F );</span><br><span class="line">    <span class="function">Mat <span class="title">kernel</span><span class="params">(n, <span class="number">1</span>, ktype)</span></span>; <span class="comment">// 建立一维向量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义指针指向数据</span></span><br><span class="line">    <span class="keyword">float</span>* cf = kernel.ptr&lt;<span class="keyword">float</span>&gt;();</span><br><span class="line">    <span class="keyword">double</span>* cd = kernel.ptr&lt;<span class="keyword">double</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当sigma小于0时，采用公式得到sigma(只与n有关)，大于0就可以直接使用了。</span></span><br><span class="line">    <span class="keyword">double</span> sigmaX = sigma &gt; <span class="number">0</span> ? sigma : ((n<span class="number">-1</span>)*<span class="number">0.5</span> - <span class="number">1</span>)*<span class="number">0.3</span> + <span class="number">0.8</span>;</span><br><span class="line">    <span class="comment">// 表达式中e指数要用到</span></span><br><span class="line">    <span class="keyword">double</span> scale2X = <span class="number">-0.5</span>/(sigmaX*sigmaX);</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x = i - (n<span class="number">-1</span>)*<span class="number">0.5</span>;</span><br><span class="line">        <span class="comment">// 根据上面计算出来的系数来决定是否重新计算值</span></span><br><span class="line">        <span class="keyword">double</span> t = fixed_kernel ? (<span class="keyword">double</span>)fixed_kernel[i]:<span class="built_in">std</span>::<span class="built_in">exp</span>(scale2X*x*x);</span><br><span class="line">        <span class="comment">//根据精度选择变量</span></span><br><span class="line">        <span class="keyword">if</span>( ktype == CV_32F )</span><br><span class="line">        &#123;</span><br><span class="line">            cf[i] = (<span class="keyword">float</span>)t;</span><br><span class="line">            sum += cf[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cd[i] = t;</span><br><span class="line">            sum += cd[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum = <span class="number">1.</span>/sum; <span class="comment">// 归一化操作，计算需要除的数值</span></span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( ktype == CV_32F )</span><br><span class="line">            cf[i] = (<span class="keyword">float</span>)(cf[i]*sum);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cd[i] *= sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kernel; <span class="comment">// 返回建立好的一维内核</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数的主要目的就是计算出高斯卷积核，这里选用分离计算，就是先计算水平（x）方向的一维卷积核，再根据sigma判断是否重新计算垂直（y）方向的一维卷积内核，这样子分离计算再针对尺寸较大的滤波器也可以有很高的效率，并且分离计算结合多线程也是很好的选择。</p><p>看完高斯内核的建立，我们知道高斯模糊主要利用了分离计算，那最后<code>sepFilter2D</code>函数也很容易看懂了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cv::sepFilter2D</span><span class="params">( InputArray _src, OutputArray _dst, <span class="keyword">int</span> ddepth,</span></span></span><br><span class="line"><span class="function"><span class="params">                      InputArray _kernelX, InputArray _kernelY, Point anchor,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_INSTRUMENT_REGION()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里考虑如果输入函数是UMat形式且维度小于等于2的情况下</span></span><br><span class="line"><span class="comment">优先考虑使用opencl优化过的filter2D计算</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    CV_OCL_RUN(_dst.isUMat() &amp;&amp; _src.dims() &lt;= <span class="number">2</span> </span><br><span class="line">               &amp;&amp; (<span class="keyword">size_t</span>)_src.rows() &gt; _kernelY.total() </span><br><span class="line">               &amp;&amp; (<span class="keyword">size_t</span>)_src.cols() &gt; _kernelX.total(),</span><br><span class="line">               ocl_sepFilter2D(_src, _dst, ddepth, _kernelX, _kernelY, anchor, delta, borderType))</span><br><span class="line"></span><br><span class="line">    Mat src = _src.getMat(), </span><br><span class="line">    kernelX = _kernelX.getMat(), </span><br><span class="line">    kernelY = _kernelY.getMat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ddepth &lt; <span class="number">0</span> )</span><br><span class="line">        ddepth = src.depth();</span><br><span class="line"></span><br><span class="line">    _dst.create( src.<span class="built_in">size</span>(), CV_MAKETYPE(ddepth, src.channels()) );</span><br><span class="line">    Mat dst = _dst.getMat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    找到src的矩阵的矩阵头存入wsz当中，并且将偏移量存入ofs变量中</span></span><br><span class="line"><span class="comment">    这两个变量用于快速读取全部图像</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Point ofs;</span><br><span class="line">    <span class="function">Size <span class="title">wsz</span><span class="params">(src.cols, src.rows)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>( (borderType &amp; BORDER_ISOLATED) == <span class="number">0</span> )</span><br><span class="line">        src.locateROI( wsz, ofs );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    进行预先检测内核是否有误</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    CV_Assert( kernelX.type() == kernelY.type() &amp;&amp;</span><br><span class="line">               (kernelX.cols == <span class="number">1</span> || kernelX.rows == <span class="number">1</span>) &amp;&amp;</span><br><span class="line">               (kernelY.cols == <span class="number">1</span> || kernelY.rows == <span class="number">1</span>) );</span><br><span class="line"></span><br><span class="line">    Mat contKernelX = kernelX.isContinuous() ? kernelX : kernelX.clone();</span><br><span class="line">    Mat contKernelY = kernelY.isContinuous() ? kernelY : kernelY.clone();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    生成一个二维滤波(filter2D)引擎</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Ptr&lt;hal::SepFilter2D&gt; c = hal::SepFilter2D::create(</span><br><span class="line">        src.type(), dst.type(), kernelX.type(),</span><br><span class="line">        contKernelX.data, </span><br><span class="line">        kernelX.cols + kernelX.rows - <span class="number">1</span>,</span><br><span class="line">        contKernelY.data, </span><br><span class="line">        kernelY.cols + kernelY.rows - <span class="number">1</span>,</span><br><span class="line">        anchor.x, </span><br><span class="line">        anchor.y, </span><br><span class="line">        delta, </span><br><span class="line">        borderType &amp; ~BORDER_ISOLATED);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    调用这个引擎</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    c-&gt;apply(src.data, src.<span class="built_in">step</span>, dst.data, dst.<span class="built_in">step</span>, dst.cols, dst.rows, wsz.<span class="built_in">width</span>, wsz.<span class="built_in">height</span>, ofs.x, ofs.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的便是寻找到这个引擎跟调用函数的实现了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Ptr类似于boost::shared_ptr，它是Boost库的一部分</span></span><br><span class="line"><span class="comment">(http://www.boost.org/doc/libs/release/libs/smart_ptr/shared_ptr.htm)</span></span><br><span class="line"><span class="comment">和 std::shared_ptr[C ++ 11标准]（http://en.wikipedia.org/wiki/C++11）</span></span><br><span class="line"><span class="comment">P.S.其实大部分c++11标准都是boost库里面抄过来的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Ptr&lt;SepFilter2D&gt; <span class="title">SepFilter2D::create</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        ReplacementSepFilter * impl = <span class="keyword">new</span> ReplacementSepFilter();</span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;init(stype, dtype, ktype,</span><br><span class="line">                       kernelx_data, kernelx_len,</span><br><span class="line">                       kernely_data, kernely_len,</span><br><span class="line">                       anchor_x, anchor_y, delta, borderType))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Ptr&lt;hal::SepFilter2D&gt;(impl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> impl;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        OcvSepFilter * impl = <span class="keyword">new</span> OcvSepFilter();</span><br><span class="line">        impl-&gt;init(stype, dtype, ktype,</span><br><span class="line">                   kernelx_data, kernelx_len,</span><br><span class="line">                   kernely_data, kernely_len,</span><br><span class="line">                   anchor_x, anchor_y, delta, borderType);</span><br><span class="line">        <span class="keyword">return</span> Ptr&lt;hal::SepFilter2D&gt;(impl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经查找，<code>SepFilter2D</code>是一个结构体，内含有上面的create函数以及两个虚函数(apply与析构函数)，这就说明对于不同的impl有着不同的apply跟init。</p><p>然后，从<code>ReplacementSepFilter</code>的函数开始看起:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个结构体继承自SepFilter2D</span></span><br><span class="line"><span class="comment">具体作用便是使用hal api进行优化加速计算</span></span><br><span class="line"><span class="comment">是一个关于移动和嵌入式设计的库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReplacementSepFilter</span> :</span> <span class="keyword">public</span> hal::SepFilter2D</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里的cvhalFilter2D是一个结构体</span></span><br><span class="line"><span class="comment">其目的就是作为context变量使用(ctx 便是context简写)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    cvhalFilter2D *ctx;</span><br><span class="line">    <span class="keyword">bool</span> isInitialized;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    委托构造函数 委托了两个构造函数进行构造</span></span><br><span class="line"><span class="comment">    一个是定义了context为0，另一个则是定义了isInitialized为否</span></span><br><span class="line"><span class="comment">    关于context(上下文)这个概念可以百度一下</span></span><br><span class="line"><span class="comment">    在下是看的这篇:</span></span><br><span class="line"><span class="comment">    https://wanderinghorse.net/computing/papers/context_types.html</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ReplacementSepFilter() : ctx(<span class="number">0</span>), isInitialized(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    初始化函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这里返回的值根据是否初始化成功赋值的</span></span><br><span class="line">        <span class="keyword">int</span> res = cv_hal_sepFilterInit(&amp;ctx, stype, dtype, ktype,</span><br><span class="line">                                       kernelx_data, kernelx_len,</span><br><span class="line">                                       kernely_data, kernely_len,</span><br><span class="line">                                       anchor_x, anchor_y, delta, borderType);</span><br><span class="line">        <span class="comment">// 这里首先判断res是否与CV_HAL_ERROR_OK(0)相等</span></span><br><span class="line">        <span class="comment">// 如果不相等便将0赋值给isInitialized</span></span><br><span class="line">        <span class="comment">// 否则便是将1赋值</span></span><br><span class="line">        isInitialized = (res == CV_HAL_ERROR_OK);</span><br><span class="line">        <span class="keyword">return</span> isInitialized;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这个是ReplacementSepFilter的执行函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(uchar* src_data, <span class="keyword">size_t</span> src_step, uchar* dst_data, <span class="keyword">size_t</span></span></span></span><br><span class="line"><span class="function"><span class="params">    dst_step, <span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> full_width, <span class="keyword">int</span> full_height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> offset_x, <span class="keyword">int</span> offset_y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isInitialized)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 这里是调用并返回是否成功的结果</span></span><br><span class="line">            <span class="keyword">int</span> res = cv_hal_sepFilter(ctx, src_data, src_step, dst_data,</span><br><span class="line">            dst_step, <span class="built_in">width</span>, <span class="built_in">height</span>, full_width,</span><br><span class="line">            full_height, offset_x, offset_y);</span><br><span class="line">            <span class="comment">// 判断res是否与CV_HAL_ERROR_OK(0)不等</span></span><br><span class="line">            <span class="comment">// 如果不等便无法调用</span></span><br><span class="line">            <span class="comment">// 进入错误选项跳出滤波器</span></span><br><span class="line">            <span class="keyword">if</span> (res != CV_HAL_ERROR_OK)</span><br><span class="line">                CV_Error(Error::StsNotImplemented, <span class="string">"Failed to run HAL sepFilter implementation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里的析构函数在本篇不解析</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ~ReplacementSepFilter()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInitialized)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> res = cv_hal_sepFilterFree(ctx);</span><br><span class="line">            <span class="keyword">if</span> (res != CV_HAL_ERROR_OK)</span><br><span class="line">                CV_Error(Error::StsNotImplemented, <span class="string">"Failed to run HAL sepFilter implementation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在接下来便是<code>OcvSepFilter</code>函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OcvSepFilter</span> :</span> <span class="keyword">public</span> hal::SepFilter2D</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">建立一个滤波引擎 f</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    Ptr&lt;FilterEngine&gt; f;</span><br><span class="line">    <span class="keyword">int</span> src_type;</span><br><span class="line">    <span class="keyword">int</span> dst_type;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        src_type = stype;</span><br><span class="line">        dst_type = dtype;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        分离卷积所以建立了X与Y的卷积内核</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function">Mat <span class="title">kernelX</span><span class="params">(Size(kernelx_len, <span class="number">1</span>), ktype, kernelx_data)</span></span>;</span><br><span class="line">        <span class="function">Mat <span class="title">kernelY</span><span class="params">(Size(kernely_len, <span class="number">1</span>), ktype, kernely_data)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        创建一个创建可分离的线性滤波器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        f = createSeparableLinearFilter( stype, dtype, kernelX, kernelY,</span><br><span class="line">                                         Point(anchor_x, anchor_y),</span><br><span class="line">                                         delta, borderType &amp; ~BORDER_ISOLATED );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(uchar* src_data, <span class="keyword">size_t</span> src_step, uchar* dst_data, <span class="keyword">size_t</span> </span></span></span><br><span class="line"><span class="function"><span class="params">    dst_step, nt <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> full_width, <span class="keyword">int</span> full_height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> offset_x, <span class="keyword">int</span> offset_y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Mat <span class="title">src</span><span class="params">(Size(<span class="built_in">width</span>, <span class="built_in">height</span>), src_type, src_data, src_step)</span></span>;</span><br><span class="line">        <span class="function">Mat <span class="title">dst</span><span class="params">(Size(<span class="built_in">width</span>, <span class="built_in">height</span>), dst_type, dst_data, dst_step)</span></span>;</span><br><span class="line">        <span class="comment">// 因为Ptr将模板设置为了FilterEngine，所以这里apply调用的是FilterEngine的启动函数</span></span><br><span class="line">        f-&gt;apply(src, dst, Size(full_width, full_height), Point(offset_x,</span><br><span class="line">        offset_y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后便是分析<code>createSeparableLinearFilter</code> 这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">可以看到其返回的是是一个引擎，</span></span><br><span class="line"><span class="comment">所以里面肯定是有横向与纵向线性滤波器了(所以才使用可分离的qwq)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">cv::Ptr&lt;cv::FilterEngine&gt; <span class="title">cv::createSeparableLinearFilter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType,</span></span></span><br><span class="line"><span class="function"><span class="params">    InputArray __rowKernel, InputArray __columnKernel,</span></span></span><br><span class="line"><span class="function"><span class="params">    Point _anchor, <span class="keyword">double</span> _delta,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Scalar&amp; _borderValue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    Mat _rowKernel = __rowKernel.getMat(), </span><br><span class="line">    _columnKernel = __columnKernel.getMat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求矩阵的数组类型，数据类型包过通道数，深度，和据类型3种</span></span><br><span class="line">    _srcType = CV_MAT_TYPE(_srcType); </span><br><span class="line">    _dstType = CV_MAT_TYPE(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求深度(输入输出都求)</span></span><br><span class="line">    <span class="keyword">int</span> sdepth = CV_MAT_DEPTH(_srcType),</span><br><span class="line">    ddepth = CV_MAT_DEPTH(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求输入矩阵的通道数并判断输入矩阵是否与输出矩阵通道数相等</span></span><br><span class="line">    <span class="keyword">int</span> cn = CV_MAT_CN(_srcType);</span><br><span class="line">    CV_Assert( cn == CV_MAT_CN(_dstType) );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// rowsize</span></span><br><span class="line">    <span class="keyword">int</span> rsize = _rowKernel.rows + _rowKernel.cols - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// columnsize</span></span><br><span class="line">    <span class="keyword">int</span> csize = _columnKernel.rows + _columnKernel.cols - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果内核锚点是负数，则从中心点开始进行</span></span><br><span class="line">    <span class="keyword">if</span>( _anchor.x &lt; <span class="number">0</span> )</span><br><span class="line">        _anchor.x = rsize/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>( _anchor.y &lt; <span class="number">0</span> )</span><br><span class="line">        _anchor.y = csize/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    获得内核的类型</span></span><br><span class="line"><span class="comment">    大致分为五种：</span></span><br><span class="line"><span class="comment">    KERNEL_GENERAL 通用内核 无任何对称性或其他属性</span></span><br><span class="line"><span class="comment">    KERNEL_SYMMETRICAL kernel[i] == kernel[ksize-i-1] (系数对称)，且锚点位于中心</span></span><br><span class="line"><span class="comment">    KERNEL_ASYMMETRICAL kernel[i] == -kernel[ksize-i-1] (系数相反对称)，锚点同上</span></span><br><span class="line"><span class="comment">    KERNEL_SMOOTH  所有内核元素都是非负的并且总和为1</span></span><br><span class="line"><span class="comment">    KERNEL_INTEGER 所有内核系数都是整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> rtype = getKernelType(_rowKernel,</span><br><span class="line">        _rowKernel.rows == <span class="number">1</span> ? Point(_anchor.x, <span class="number">0</span>) : Point(<span class="number">0</span>, _anchor.x));</span><br><span class="line">    <span class="keyword">int</span> ctype = getKernelType(_columnKernel,</span><br><span class="line">        _columnKernel.rows == <span class="number">1</span> ? Point(_anchor.y, <span class="number">0</span>) : Point(<span class="number">0</span>, _anchor.y));</span><br><span class="line">    Mat rowKernel, columnKernel;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    在CV_32F, sdepth, ddepth中找到最大值并赋值给bdepth</span></span><br><span class="line"><span class="comment">    bdepth: 位深度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> bdepth = <span class="built_in">std</span>::<span class="built_in">max</span>(CV_32F,<span class="built_in">std</span>::<span class="built_in">max</span>(sdepth, ddepth));</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    判断如果</span></span><br><span class="line"><span class="comment">    输入输出图像都是8位无符号型且内核使用平滑对称核</span></span><br><span class="line"><span class="comment">    或者</span></span><br><span class="line"><span class="comment">    输出图像为16位有符号型且使用整形对称或反对称核</span></span><br><span class="line"><span class="comment">    那么就不需要进行任何转换便可以直接使用，</span></span><br><span class="line"><span class="comment">    否则便需要转换，因为输入前后的图像格式是完全相等的</span></span><br><span class="line"><span class="comment">    所以delta就默认是0了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>( sdepth == CV_8U &amp;&amp;</span><br><span class="line">        (</span><br><span class="line">             (rtype == KERNEL_SMOOTH+KERNEL_SYMMETRICAL &amp;&amp;</span><br><span class="line">              ctype == KERNEL_SMOOTH+KERNEL_SYMMETRICAL &amp;&amp;</span><br><span class="line">              ddepth == CV_8U) </span><br><span class="line">             ||</span><br><span class="line">             (</span><br><span class="line">                  (rtype &amp; (KERNEL_SYMMETRICAL+KERNEL_ASYMMETRICAL)) &amp;&amp;</span><br><span class="line">                  (ctype &amp; (KERNEL_SYMMETRICAL+KERNEL_ASYMMETRICAL)) &amp;&amp;</span><br><span class="line">                  (rtype &amp; ctype &amp; KERNEL_INTEGER) &amp;&amp;</span><br><span class="line">                  ddepth == CV_16S</span><br><span class="line">             )</span><br><span class="line">        ) </span><br><span class="line">      )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 重新给bdepth赋值</span></span><br><span class="line">        bdepth = CV_32S;</span><br><span class="line">        <span class="comment">// 此时bits(单位字节)将根据位深度进行计算，如果是8位无符号型则直接赋值为8位</span></span><br><span class="line">        bits = ddepth == CV_8U ? <span class="number">8</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 此时将row内核转换为CV_32S，即32位整数型，并且根据单位字节转换比例因子</span></span><br><span class="line">        <span class="comment">// 如果不加比例因子那么图像会变得很白</span></span><br><span class="line">        <span class="comment">// (可参见这篇提问https://bbs.csdn.net/topics/392411554)</span></span><br><span class="line">        <span class="comment">// 比例因子：将原矩阵的所有元素乘以alpha</span></span><br><span class="line">        _rowKernel.convertTo( rowKernel, CV_32S, <span class="number">1</span> &lt;&lt; bits );</span><br><span class="line">        _columnKernel.convertTo( columnKernel, CV_32S, <span class="number">1</span> &lt;&lt; bits );</span><br><span class="line">        <span class="comment">// 在这里是将单位字节*2</span></span><br><span class="line">        bits *= <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 根据单位字节计算出了存储单位(偏移量)</span></span><br><span class="line">        _delta *= (<span class="number">1</span> &lt;&lt; bits);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        如果不属于上面if里的任何一种情况，那么需要进行转换，用以使数据类型统一</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>( _rowKernel.type() != bdepth )</span><br><span class="line">            _rowKernel.convertTo( rowKernel, bdepth );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rowKernel = _rowKernel;</span><br><span class="line">        <span class="keyword">if</span>( _columnKernel.type() != bdepth )</span><br><span class="line">            _columnKernel.convertTo( columnKernel, bdepth );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            columnKernel = _columnKernel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区存储，用于写入单个色所有素信息(包括多通道与深度信息)</span></span><br><span class="line">    <span class="keyword">int</span> _bufType = CV_MAKETYPE(bdepth, cn);</span><br><span class="line">    <span class="comment">// getLinearRowFilter是根据不同的输入图像类型，输出图像返回不同的线性滤波器</span></span><br><span class="line">    Ptr&lt;BaseRowFilter&gt; _rowFilter = getLinearRowFilter(</span><br><span class="line">        _srcType, _bufType, rowKernel, _anchor.x, rtype);</span><br><span class="line">    Ptr&lt;BaseColumnFilter&gt; _columnFilter = getLinearColumnFilter(</span><br><span class="line">        _bufType, _dstType, columnKernel, _anchor.y, ctype, _delta, bits );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用这两个线性滤波器建立滤波引擎</span></span><br><span class="line">    <span class="keyword">return</span> Ptr&lt;FilterEngine&gt;( <span class="keyword">new</span> FilterEngine(Ptr&lt;BaseFilter&gt;(), _rowFilter,</span><br><span class="line">                                               _columnFilter,_srcType, _dstType,</span><br><span class="line">                                               _bufType, _rowBorderType,</span><br><span class="line">                                               _columnBorderType, _borderValue ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">建立滤波引擎函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">FilterEngine::FilterEngine( <span class="keyword">const</span> Ptr&lt;BaseFilter&gt;&amp; _filter2D,</span><br><span class="line">                            <span class="keyword">const</span> Ptr&lt;BaseRowFilter&gt;&amp; _rowFilter,</span><br><span class="line">                            <span class="keyword">const</span> Ptr&lt;BaseColumnFilter&gt;&amp; _columnFilter,</span><br><span class="line">                            <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType, <span class="keyword">int</span> _bufType,</span><br><span class="line">                            <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span><br><span class="line">                            <span class="keyword">const</span> Scalar&amp; _borderValue )</span><br><span class="line">&#123;</span><br><span class="line">    init(_filter2D, _rowFilter, _columnFilter, _srcType, _dstType, _bufType,</span><br><span class="line">         _rowBorderType, _columnBorderType, _borderValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilterEngine::init</span><span class="params">( <span class="keyword">const</span> Ptr&lt;BaseFilter&gt;&amp; _filter2D,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Ptr&lt;BaseRowFilter&gt;&amp; _rowFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Ptr&lt;BaseColumnFilter&gt;&amp; _columnFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType, <span class="keyword">int</span> _bufType,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Scalar&amp; _borderValue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 依旧是获取类型</span></span><br><span class="line">    _srcType = CV_MAT_TYPE(_srcType);</span><br><span class="line">    _bufType = CV_MAT_TYPE(_bufType);</span><br><span class="line">    _dstType = CV_MAT_TYPE(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 临时变量</span></span><br><span class="line">    srcType = _srcType;</span><br><span class="line">    <span class="comment">// 计算单个像素大小</span></span><br><span class="line">    <span class="comment">// 下面会降解</span></span><br><span class="line">    <span class="keyword">int</span> srcElemSize = (<span class="keyword">int</span>)getElemSize(srcType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面这些全是建立临时变量的</span></span><br><span class="line">    dstType = _dstType;</span><br><span class="line">    bufType = _bufType;</span><br><span class="line"></span><br><span class="line">    filter2D = _filter2D;</span><br><span class="line">    rowFilter = _rowFilter;</span><br><span class="line">    columnFilter = _columnFilter;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里是判断行列边缘类型是否出问题</span></span><br><span class="line">    <span class="keyword">if</span>( _columnBorderType &lt; <span class="number">0</span> )</span><br><span class="line">        _columnBorderType = _rowBorderType;</span><br><span class="line"></span><br><span class="line">    rowBorderType = _rowBorderType;</span><br><span class="line">    columnBorderType = _columnBorderType;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测边界填充类型是否不是wrap(复制元素填充)类型</span></span><br><span class="line">    CV_Assert( columnBorderType != BORDER_WRAP );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测是否为可分离滤波器(因为这个是通用滤波引擎 并不知道是否为可分离滤波器)</span></span><br><span class="line">    <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检测横纵滤波器类型是否相等</span></span><br><span class="line">        CV_Assert( rowFilter &amp;&amp; columnFilter );</span><br><span class="line">        <span class="comment">// 并以横纵滤波器定义内核大小</span></span><br><span class="line">        ksize = Size(rowFilter-&gt;ksize, columnFilter-&gt;ksize);</span><br><span class="line">        <span class="comment">// 锚点也根据滤波器锚点定义</span></span><br><span class="line">        anchor = Point(rowFilter-&gt;anchor, columnFilter-&gt;anchor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果不是  检测缓冲图像类型是否与输入图像类型相等</span></span><br><span class="line">        CV_Assert( bufType == srcType );</span><br><span class="line">        <span class="comment">// 这里跟上面定义差不多，不过是非分离滤波器所以是只有一个(filter2D二维滤波器)</span></span><br><span class="line">        ksize = filter2D-&gt;ksize;</span><br><span class="line">        anchor = filter2D-&gt;anchor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个一看就懂了</span></span><br><span class="line">    CV_Assert( m <span class="number">0</span> &lt;= anchor.x &amp;&amp; anchor.x &lt; ksize.<span class="built_in">width</span> &amp;&amp;</span><br><span class="line">               <span class="number">0</span> &lt;= anchor.y &amp;&amp; anchor.y &lt; ksize.<span class="built_in">height</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据边缘填充类型进行像素计算</span></span><br><span class="line">    borderElemSize = srcElemSize/(CV_MAT_DEPTH(srcType) &gt;= CV_32S ?</span><br><span class="line">                                  <span class="keyword">sizeof</span>(<span class="keyword">int</span>) : <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 这里也很好懂</span></span><br><span class="line">    <span class="keyword">int</span> borderLength = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">width</span> - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 重定义边缘向量大小(这里是所占空间大小)</span></span><br><span class="line">    borderTab.resize(borderLength*borderElemSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    maxWidth = bufStep = <span class="number">0</span>;</span><br><span class="line">    constBorderRow.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果行列边界是常数填充的</span></span><br><span class="line">    <span class="keyword">if</span>( rowBorderType == BORDER_CONSTANT || columnBorderType == BORDER_CONSTANT )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 则计算图像边长</span></span><br><span class="line">        constBorderValue.resize(srcElemSize*borderLength);</span><br><span class="line">        <span class="keyword">int</span> srcType1 = CV_MAKETYPE(CV_MAT_DEPTH(srcType), </span><br><span class="line">                                   MIN(CV_MAT_CN(srcType),</span><br><span class="line">                                   <span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 根据位深度将边界像素值转换成可直接使用的vector变量</span></span><br><span class="line">        scalarToRawData(_borderValue, &amp;constBorderValue[<span class="number">0</span>], srcType1,</span><br><span class="line">                        borderLength*CV_MAT_CN(srcType));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化size</span></span><br><span class="line">    wholeSize = Size(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这时候来看上面提到的<code>getElemSize</code>:</p><blockquote><p>最终这个其实是个宏定义，返回的就是这个宏定义计算的结果：</p><p><strong>(CV_MAT_CN(type) &lt;&lt; ((((sizeof(size_t)/4+1)*16384|0x3a50) &gt;&gt; CV_MAT_DEPTH(type)*2) &amp; 3))</strong></p><p>首先，针对<code>0x3a50</code>这个奇怪的数值，我们先转换为2进制查看规律，通过查找比对，发现其数值与变量类型有着一一对应的关系，然后16384则是1 &lt;&lt; 14的结果(刚好每个对应两位二进制数值)，这个换成二进制则是</p><p>​    16384   = 10 00 00 00 00 00 00</p><p>​    0x3a50 = 11 10 10 01 01 00 00</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/bin.png" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><p>稍微先理解一下，在下先说一下剩下的函数然后一起解析。</p><p>这里先计算无符号整型的长度(在64位系统下是4 desu)然后除以4 再加上1 ，</p><p>就是说这是2 * 16384 | 0x3a50</p><p>就是</p><p>01 00 00 00 00 00 00 00</p><p>00 11 10 10 01 01 00 00</p><hr><p>01 11 10 10 01 01 00 00</p><p>的结果右移2 * 深度，观察上面便会发现最终右移之后便使得最后两位二进制数对应的刚好便是对应变量类型所占的二进制数。</p><p>这样，在跟3(二进制为11)进行 ‘与‘ 操作，便能得到各个变量的对应所占字节数的对数了。</p><p>又因为这里是 通道数 * 2 ^ (所占字节对数)</p><p>所以这样就能够计算的出单个像素点所占用的大小(size)了</p></blockquote><p>因为滤波引擎是一个通用引擎，还可用以驱动其他的滤波器(中值滤波或者其他什么的)所以主要的就只不过是根据一些信息初始化用以后面的操作(就是init函数的意思)。</p><p>返回了滤波引擎之后便是调用了，这个是<code>apply</code>函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilterEngine::apply</span><span class="params">(<span class="keyword">const</span> Mat&amp; src, Mat&amp; dst, <span class="keyword">const</span> Size &amp; wsz, <span class="keyword">const</span> Point &amp; ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_INSTRUMENT_REGION()</span><br><span class="line"></span><br><span class="line">    CV_Assert( src.type() == srcType &amp;&amp; dst.type() == dstType );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回变化y值</span></span><br><span class="line">    <span class="keyword">int</span> y = start(src, wsz, ofs);</span><br><span class="line">    <span class="comment">// 传参的时候切除第一行与最后一列</span></span><br><span class="line">    proceed(src.ptr() + y*src.<span class="built_in">step</span>,</span><br><span class="line">            (<span class="keyword">int</span>)src.<span class="built_in">step</span>,</span><br><span class="line">            endY - startY,</span><br><span class="line">            dst.ptr(),</span><br><span class="line">            (<span class="keyword">int</span>)dst.<span class="built_in">step</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>start</code>便是开始函数后面的<code>proceed</code>则是持续卷积到整个图像的关键，<code>start</code>函数最终返回了起始的Y值，一句一句写太累了，我就不解释了，只贴出<code>start</code>与<code>proceed</code>函数：</p><p>*<em>这两块其实在下分析的很差，很多函数都没看懂，有很大可能错误，建议先跳过，在下以后c++学透了还会回来改的。 *</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">滤波引擎</span></span><br><span class="line"><span class="comment">发动！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::start</span><span class="params">(<span class="keyword">const</span> Mat&amp; src, <span class="keyword">const</span> Size &amp;wsz, <span class="keyword">const</span> Point &amp;ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    start( wsz, src.<span class="built_in">size</span>(), ofs);</span><br><span class="line">    <span class="keyword">return</span> startY - ofs.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::start</span><span class="params">(<span class="keyword">const</span> Size &amp;_wholeSize, <span class="keyword">const</span> Size &amp;sz, <span class="keyword">const</span> Point &amp;ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    wholeSize = _wholeSize;</span><br><span class="line">    <span class="comment">// 根据偏移量与矩阵头设置范围</span></span><br><span class="line">    roi = Rect(ofs, sz);</span><br><span class="line">    <span class="comment">// 依旧是错误检测，很好懂</span></span><br><span class="line">    CV_Assert( roi.x &gt;= <span class="number">0</span> &amp;&amp; roi.y &gt;= <span class="number">0</span> &amp;&amp; roi.<span class="built_in">width</span> &gt;= <span class="number">0</span> &amp;&amp; roi.<span class="built_in">height</span> &gt;= <span class="number">0</span> &amp;&amp; roi.x + roi.<span class="built_in">width</span> &lt;= wholeSize.<span class="built_in">width</span> &amp;&amp; roi.y + roi.<span class="built_in">height</span> &lt;= wholeSize.<span class="built_in">height</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面这些依旧是初始化</span></span><br><span class="line">    <span class="keyword">int</span> esz = (<span class="keyword">int</span>)getElemSize(srcType);</span><br><span class="line">    <span class="keyword">int</span> bufElemSize = (<span class="keyword">int</span>)getElemSize(bufType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定值检查</span></span><br><span class="line">    <span class="keyword">const</span> uchar* constVal = !constBorderValue.empty() ? &amp;constBorderValue[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _maxBufRows = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">height</span> + <span class="number">3</span>, <span class="built_in">std</span>::<span class="built_in">max</span>(anchor.y, ksize.<span class="built_in">height</span>-anchor.y<span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( maxWidth &lt; roi.<span class="built_in">width</span> || _maxBufRows != (<span class="keyword">int</span>)rows.<span class="built_in">size</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">        rows.resize(_maxBufRows);</span><br><span class="line">        maxWidth = <span class="built_in">std</span>::<span class="built_in">max</span>(maxWidth, roi.<span class="built_in">width</span>);</span><br><span class="line">        <span class="keyword">int</span> cn = CV_MAT_CN(srcType);</span><br><span class="line">        srcRow.resize(esz*(maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>( columnBorderType == BORDER_CONSTANT )</span><br><span class="line">        &#123;</span><br><span class="line">            constBorderRow.resize(getElemSize(bufType)</span><br><span class="line">                                  *(maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span> + VEC_ALIGN));</span><br><span class="line">            uchar *dst = alignPtr(&amp;constBorderRow[<span class="number">0</span>], VEC_ALIGN), *tdst;</span><br><span class="line">            <span class="keyword">int</span> n = (<span class="keyword">int</span>)constBorderValue.<span class="built_in">size</span>(), N;</span><br><span class="line">            N = (maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span>)*esz;</span><br><span class="line">            tdst = isSeparable() ? &amp;srcRow[<span class="number">0</span>] : dst;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; N; i += n )</span><br><span class="line">            &#123;</span><br><span class="line">                n = <span class="built_in">std</span>::<span class="built_in">min</span>( n, N - i );</span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    tdst[i+j] = constVal[j];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">                (*rowFilter)(&amp;srcRow[<span class="number">0</span>], dst, maxWidth, cn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxBufStep = bufElemSize*(<span class="keyword">int</span>)alignSize(maxWidth + (!isSeparable() ? ksize.<span class="built_in">width</span> - <span class="number">1</span> : <span class="number">0</span>),VEC_ALIGN);</span><br><span class="line">        ringBuf.resize(maxBufStep*rows.<span class="built_in">size</span>()+VEC_ALIGN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整bufstep，使环形缓冲区的已使用部分在内存中保持紧凑</span></span><br><span class="line">    bufStep = bufElemSize*(<span class="keyword">int</span>)alignSize(roi.<span class="built_in">width</span> + (!isSeparable() ? ksize.<span class="built_in">width</span> - <span class="number">1</span> : <span class="number">0</span>),<span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dx1是检测锚点位置是否与范围边界检测</span></span><br><span class="line">    dx1 = <span class="built_in">std</span>::<span class="built_in">max</span>(anchor.x - roi.x, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 检测内核是否存在偏差</span></span><br><span class="line">    dx2 = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">width</span> - anchor.x - <span class="number">1</span> + roi.x + roi.<span class="built_in">width</span> - wholeSize.<span class="built_in">width</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在偏差则重新计算边界表</span></span><br><span class="line">    <span class="keyword">if</span>( dx1 &gt; <span class="number">0</span> || dx2 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( rowBorderType == BORDER_CONSTANT )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nr = isSeparable() ? <span class="number">1</span> : (<span class="keyword">int</span>)rows.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; nr; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                uchar* dst = isSeparable() ? &amp;srcRow[<span class="number">0</span>] : alignPtr(&amp;ringBuf[<span class="number">0</span>],VEC_ALIGN) + bufStep*i;</span><br><span class="line">                <span class="comment">// 在内存中用后者填充前者，最后一个参数是大小</span></span><br><span class="line">                <span class="built_in">memcpy</span>( dst, constVal, dx1*esz );</span><br><span class="line">                <span class="built_in">memcpy</span>( dst + (roi.<span class="built_in">width</span> + ksize.<span class="built_in">width</span> - <span class="number">1</span> - dx2)*esz, constVal, dx2*esz );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> xofs1 = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.x, anchor.x) - roi.x;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> btab_esz = borderElemSize, wholeWidth = wholeSize.<span class="built_in">width</span>;</span><br><span class="line">            <span class="keyword">int</span>* btab = (<span class="keyword">int</span>*)&amp;borderTab[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; dx1; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p0 = (borderInterpolate(i-dx1, wholeWidth, rowBorderType) +  xofs1)*btab_esz;</span><br><span class="line">                <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; btab_esz; j++ )</span><br><span class="line">                    btab[i*btab_esz + j] = p0 + j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; dx2; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p0 = (borderInterpolate(wholeWidth + i, wholeWidth,  rowBorderType) + xofs1)*btab_esz;</span><br><span class="line">                <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; btab_esz; j++ )</span><br><span class="line">                    btab[(i + dx1)*btab_esz + j] = p0 + j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rowCount = dstY = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这整个函数其实最重要的就是这个</span></span><br><span class="line"><span class="comment">    上面这些都是防止错误进行的调整</span></span><br><span class="line"><span class="comment">    并用以计算下面这个值的</span></span><br><span class="line"><span class="comment">    这个startY是另一方向的偏离值，就是说一个像素到另一个像素的偏离量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    startY = startY0 = <span class="built_in">std</span>::<span class="built_in">max</span>(roi.y - anchor.y, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    endY = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.y + roi.<span class="built_in">height</span> + ksize.<span class="built_in">height</span> - anchor.y - <span class="number">1</span>, wholeSize.<span class="built_in">height</span>);</span><br><span class="line">    <span class="keyword">if</span>( columnFilter )</span><br><span class="line">        columnFilter-&gt;reset();</span><br><span class="line">    <span class="keyword">if</span>( filter2D )</span><br><span class="line">        filter2D-&gt;reset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> startY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::proceed</span><span class="params">( <span class="keyword">const</span> uchar* src, <span class="keyword">int</span> srcstep, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                           uchar* dst, <span class="keyword">int</span> dststep )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_Assert( wholeSize.<span class="built_in">width</span> &gt; <span class="number">0</span> &amp;&amp; wholeSize.<span class="built_in">height</span> &gt; <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *btab = &amp;borderTab[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> esz = (<span class="keyword">int</span>)getElemSize(srcType), btab_esz = borderElemSize;</span><br><span class="line">    uchar** brows = &amp;rows[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> bufRows = (<span class="keyword">int</span>)rows.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> cn = CV_MAT_CN(bufType);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span> = roi.<span class="built_in">width</span>, kwidth = ksize.<span class="built_in">width</span>;</span><br><span class="line">    <span class="keyword">int</span> kheight = ksize.<span class="built_in">height</span>, ay = anchor.y;</span><br><span class="line">    <span class="keyword">int</span> _dx1 = dx1, _dx2 = dx2;</span><br><span class="line">    <span class="keyword">int</span> width1 = roi.<span class="built_in">width</span> + kwidth - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> xofs1 = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.x, anchor.x);</span><br><span class="line">    <span class="keyword">bool</span> isSep = isSeparable();</span><br><span class="line">    <span class="keyword">bool</span> makeBorder = (_dx1 &gt; <span class="number">0</span> || _dx2 &gt; <span class="number">0</span>) &amp;&amp; rowBorderType != BORDER_CONSTANT;</span><br><span class="line">    <span class="keyword">int</span> dy = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    src -= xofs1*esz;</span><br><span class="line">    count = <span class="built_in">std</span>::<span class="built_in">min</span>(count, remainingInputRows());</span><br><span class="line"></span><br><span class="line">    CV_Assert( src &amp;&amp; dst &amp;&amp; count &gt; <span class="number">0</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里就是卷积的主函数了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(;; dst += dststep*i, dy += i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> dcount = bufRows - ay - startY - rowCount + roi.y;</span><br><span class="line">        dcount = dcount &gt; <span class="number">0</span> ? dcount : bufRows - kheight + <span class="number">1</span>;</span><br><span class="line">        dcount = <span class="built_in">std</span>::<span class="built_in">min</span>(dcount, count);</span><br><span class="line">        count -= dcount;</span><br><span class="line">        <span class="keyword">for</span>( ; dcount-- &gt; <span class="number">0</span>; src += srcstep )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> bi = (startY - startY0 + rowCount) % bufRows;</span><br><span class="line">            uchar* brow = alignPtr(&amp;ringBuf[<span class="number">0</span>], VEC_ALIGN) + bi*bufStep;</span><br><span class="line">            uchar* row = isSep ? &amp;srcRow[<span class="number">0</span>] : brow;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( ++rowCount &gt; bufRows )</span><br><span class="line">            &#123;</span><br><span class="line">                --rowCount;</span><br><span class="line">                ++startY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>( row + _dx1*esz, src, (width1 - _dx2 - _dx1)*esz );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( makeBorder )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( btab_esz*(<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int</span>) == esz )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">const</span> <span class="keyword">int</span>* isrc = (<span class="keyword">const</span> <span class="keyword">int</span>*)src;</span><br><span class="line">                    <span class="keyword">int</span>* irow = (<span class="keyword">int</span>*)row;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx1*btab_esz; i++ )</span><br><span class="line">                        irow[i] = isrc[btab[i]];</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx2*btab_esz; i++ )</span><br><span class="line">                        irow[i + (width1 - _dx2)*btab_esz] =  isrc[btab[i+_dx1*btab_esz]];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx1*esz; i++ )</span><br><span class="line">                        row[i] = src[btab[i]];</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx2*esz; i++ )</span><br><span class="line">                        row[i + (width1 - _dx2)*esz] = src[btab[i+_dx1*esz]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( isSep )</span><br><span class="line">                (*rowFilter)(row, brow, <span class="built_in">width</span>, CV_MAT_CN(srcType));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max_i = <span class="built_in">std</span>::<span class="built_in">min</span>(bufRows, roi.<span class="built_in">height</span> - (dstY + dy) + (kheight - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; max_i; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> srcY = borderInterpolate(dstY + dy + i + roi.y - ay, wholeSize.<span class="built_in">height</span>, columnBorderType);</span><br><span class="line">            <span class="keyword">if</span>( srcY &lt; <span class="number">0</span> ) <span class="comment">// can happen only with constant border type</span></span><br><span class="line">                brows[i] = alignPtr(&amp;constBorderRow[<span class="number">0</span>], VEC_ALIGN);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                CV_Assert( srcY &gt;= startY );</span><br><span class="line">                <span class="keyword">if</span>( srcY &gt;= startY + rowCount )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> bi = (srcY - startY0) % bufRows;</span><br><span class="line">                brows[i] = alignPtr(&amp;ringBuf[<span class="number">0</span>], VEC_ALIGN) + bi*bufStep;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( i &lt; kheight )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i -= kheight - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">            (*columnFilter)((<span class="keyword">const</span> uchar**)brows, dst, dststep, i, roi.<span class="built_in">width</span>*cn);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            (*filter2D)((<span class="keyword">const</span> uchar**)brows, dst, dststep, i, roi.<span class="built_in">width</span>, cn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dstY += dy;</span><br><span class="line">    CV_Assert( dstY &lt;= roi.<span class="built_in">height</span> );</span><br><span class="line">    <span class="keyword">return</span> dy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>C++语法复杂度感觉世界上排的了前十</li><li>复杂但却也是少有的可以直接操作内存的语言之一，内联汇编效率不要太高</li><li>用轮子很简单，但是造轮子很难，造出普适性的轮子更难，自己用感觉有些算法还是很容易写的，但是要照顾到大量的其他语法或者平台那就很困难了</li><li>优化不一定是自己算法的优化，还有使用平台的优化，用别人的轮子真的很爽</li><li>大型项目里面代码风格各异，变量命名方案比较混乱，并且简写的比较多，看起来真的头大。。。。</li><li>在下的代码逻辑思维还是太低了，希望能够在毕业的时候看上20000行代码用以提升自己</li><li>相比之下python源码看起来真的舒服死了55555</li></ul><h2 id="借物表"><a href="#借物表" class="headerlink" title="借物表"></a>借物表</h2><ul><li><a href="https://www.cnblogs.com/marvin-notes/p/4482805.html" target="_blank" rel="noopener"><strong>attribute</strong> 机制详解(一)</a></li><li><a href="https://stackoverflow.com/questions/19908922/what-is-this-ifdef-gnuc-about" target="_blank" rel="noopener">What is this #ifdef <strong>GNUC</strong> about?</a></li><li><a href="https://www.cnblogs.com/testlife007/p/8134702.html" target="_blank" rel="noopener">关于VC预定义常量_WIN32，WIN32，_WIN64等预定义宏的介绍（整理、转载）</a></li><li><a href="http://www.voidcn.com/article/p-uolrpafg-bcx.html" target="_blank" rel="noopener">opencv的CV_EXPORT</a></li><li><a href="https://www.cnblogs.com/wangguchangqing/p/6407717.html" target="_blank" rel="noopener">图像处理基础(4)：高斯滤波器详解</a></li><li><a href="https://blog.csdn.net/u012707739/article/details/80170671" target="_blank" rel="noopener">C/C++ 可变参数宏与<strong>VA_ARGS</strong> 宏</a></li><li><a href="https://blog.csdn.net/q2519008/article/details/80934815" target="_blank" rel="noopener">#、##、<strong>VA_ARGS</strong>和##<strong>VA_ARGS</strong>的作用</a></li><li><a href="https://blog.csdn.net/sx1503198/article/details/51764367" target="_blank" rel="noopener">OpenVX嵌入式图像处理（一）硬件平台及软件介绍</a></li><li><a href="https://blog.csdn.net/jia20003/article/details/69802932" target="_blank" rel="noopener">OpenCV3.x中UMat对象介绍与使用</a></li><li><a href="https://blog.csdn.net/qq_26460507/article/details/60154061" target="_blank" rel="noopener">opencv学习之GaussianBlur()源码解析</a></li><li><a href="https://blog.csdn.net/u011028771/article/details/80556457" target="_blank" rel="noopener">手撕OpenCV源码之GaussianBlur</a></li><li><a href="https://www.xuebuyuan.com/1054789.html" target="_blank" rel="noopener">OpenCV的一些宏</a></li></ul><p><strong>感谢以上各位大佬给在下提供的各类知识</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;因为实验室假期需要写一篇关于opencv的作业 所以顺便看了一下opencv(版本3.2.0)里面关于高斯模糊的源码&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
      <category term="cv" scheme="http://blog.fivezha.cn/tags/cv/"/>
    
  </entry>
  
  <entry>
    <title>nazo.io攻略(完)</title>
    <link href="http://blog.fivezha.cn/2018/10/15/nazo-io-answer/"/>
    <id>http://blog.fivezha.cn/2018/10/15/nazo-io-answer/</id>
    <published>2018-10-15T11:22:26.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>有点像小学玩过的某个解密游戏的游戏  偶然又发现了这种类型的游戏 鄙人玩了2个小时 写了点攻略 希望能够帮到你</p><a id="more"></a><h3 id="顺便附上网址-其实就是nazo-io"><a href="#顺便附上网址-其实就是nazo-io" class="headerlink" title="顺便附上网址(其实就是nazo.io)"></a><a href="https://nazo.io/" target="_blank" rel="noopener">顺便附上网址(其实就是nazo.io)</a></h3><h3 id="1-欢迎"><a href="#1-欢迎" class="headerlink" title="1.欢迎"></a>1.欢迎</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/006ZO6XQgy1fw949qhqf5j30ih0dk0sv.png" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><p>直接输入:<strong>welcome</strong>即可</p><h3 id="2-规则"><a href="#2-规则" class="headerlink" title="2.规则"></a>2.规则</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015182729.png" alt="2" title="">                </div>                <div class="image-caption">2</div>            </figure><p>点击：key即可出现答案——<strong>gotcha</strong></p><h3 id="3-从右往左念"><a href="#3-从右往左念" class="headerlink" title="3.从右往左念"></a>3.从右往左念</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM%E6%88%AA%E5%9B%BE20181015182822.png" alt="3" title="">                </div>                <div class="image-caption">3</div>            </figure><p>顾名思义，从右往左念：key is where</p><p>答案便是：<strong>where</strong></p><h3 id="4-完形填空"><a href="#4-完形填空" class="headerlink" title="4.完形填空"></a>4.完形填空</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM%E6%88%AA%E5%9B%BE20181015182944.png" alt="4" title="">                </div>                <div class="image-caption">4</div>            </figure><p><strong>这关便是教你使用搜索引擎搜索答案（其实大多数时间搜不到。。。。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM%E6%88%AA%E5%9B%BE20181015183037.png" alt="百度" title="">                </div>                <div class="image-caption">百度</div>            </figure><p>答案便是：<strong>survival</strong></p><h3 id="5-Morse"><a href="#5-Morse" class="headerlink" title="5.Morse"></a>5.Morse</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183131.png" alt="5" title="">                </div>                <div class="image-caption">5</div>            </figure><p>摩尔斯电码，没什么好说的</p><p>答案：<strong>sos</strong></p><h3 id="6-Base64"><a href="#6-Base64" class="headerlink" title="6.Base64"></a>6.Base64</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183202.png" alt="6" title="">                </div>                <div class="image-caption">6</div>            </figure><p>就是base64解码 随便找个网站就行了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183234.png" alt="解密" title="">                </div>                <div class="image-caption">解密</div>            </figure><p>答案：<strong>1029174037</strong></p><h3 id="6-Base64-新"><a href="#6-Base64-新" class="headerlink" title="6.Base64(新)"></a>6.Base64(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712000900198.png" alt="image-20200712000900198" title="">                </div>                <div class="image-caption">image-20200712000900198</div>            </figure><p>答案：<strong>bytealigned</strong></p><h3 id="7-OICQ"><a href="#7-OICQ" class="headerlink" title="7.OICQ"></a>7.OICQ</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183500.png" alt="7" title="">                </div>                <div class="image-caption">7</div>            </figure><p>这个标题是qq的前身名称</p><p>这里有个提示：你<a href="https://nazo.io/6" target="_blank" rel="noopener">刚</a>输入了什么？/以及联系作者</p><p>很清楚 ，上一题的答案就是作者的QQ号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015183441.png" alt="qq搜索" title="">                </div>                <div class="image-caption">qq搜索</div>            </figure><p>看 果不其然</p><p>答案：<strong>macintosh</strong></p><h3 id="7-RCNB-app-新"><a href="#7-RCNB-app-新" class="headerlink" title="7.RCNB.app(新)"></a>7.RCNB.app(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001003985.png" alt="image-20200712001003985" title="">                </div>                <div class="image-caption">image-20200712001003985</div>            </figure><p>编码随便百度一下就出来了</p><p>答案：<strong>unprintable</strong></p><h3 id="8-IDNs"><a href="#8-IDNs" class="headerlink" title="8.IDNs"></a>8.IDNs</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184152.png" alt="8" title="">                </div>                <div class="image-caption">8</div>            </figure><p>这个题也是那种没有知识前提就不会的那种</p><p>正巧前两天刚买域名的时候看见了中文域名，所以这题小case😄</p><p>直接访问：错的是.世界便可知道答案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184141.png" alt="直接访问" title="">                </div>                <div class="image-caption">直接访问</div>            </figure><p>答案：<strong>saionjisekai</strong></p><h3 id="9-角度"><a href="#9-角度" class="headerlink" title="9.角度"></a>9.角度</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184329.png" alt="9" title="">                </div>                <div class="image-caption">9</div>            </figure><p>这张图片是斜角图片，就是字都向内偏向了45°</p><p>用画图打开拉长一下就知道答案了：<strong>pineapple</strong></p><h3 id="10-回到上世纪"><a href="#10-回到上世纪" class="headerlink" title="10.回到上世纪"></a>10.回到上世纪</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184420.png" alt="10" title="">                </div>                <div class="image-caption">10</div>            </figure><p>典型的百度搜图题目</p><p>答案：<strong>mouse</strong></p><h3 id="11-Unicode"><a href="#11-Unicode" class="headerlink" title="11.Unicode"></a>11.Unicode</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184457.png" alt="11" title="">                </div>                <div class="image-caption">11</div>            </figure><p>可能部分手机字库支持不全看不了</p><p>答案：<strong>neweroslesstofu</strong></p><h3 id="11-Unicode-新"><a href="#11-Unicode-新" class="headerlink" title="11.Unicode(新)"></a>11.Unicode(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001517859.png" alt="image-20200712001517859" title="">                </div>                <div class="image-caption">image-20200712001517859</div>            </figure><p>答案：<strong>oopscode</strong></p><h3 id="12-1A2B"><a href="#12-1A2B" class="headerlink" title="12.1A2B"></a>12.1A2B</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015184548.png" alt="12" title="">                </div>                <div class="image-caption">12</div>            </figure><p>小时候的猜数题目</p><p>大意是：有一个未知数需要猜测</p><p>下面0A0B代表不仅数字没猜对位置也没猜对</p><p>0A2B代表数字猜对了两个但是位置没猜对</p><p>3A0B代表着数字跟位置都猜对的有三位有一位数字跟位置都没猜对</p><p>答案：<strong>9506</strong></p><h3 id="13-虚无"><a href="#13-虚无" class="headerlink" title="13.虚无"></a>13.虚无</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185038.png" alt="13" title="">                </div>                <div class="image-caption">13</div>            </figure><p>中间有图片，新窗口打开便可知</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185105.png" alt="新页面打开" title="">                </div>                <div class="image-caption">新页面打开</div>            </figure><p>答案：<strong>thealpha</strong></p><h3 id="14-我爱记歌词"><a href="#14-我爱记歌词" class="headerlink" title="14.我爱记歌词"></a>14.我爱记歌词</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185653.png" alt="14" title="">                </div>                <div class="image-caption">14</div>            </figure><p>hint是里的歌词是种子，歌名又是小苹果，图片名字叫apple</p><p>不用多说了吧 ——图种</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015185635.png" alt="图种" title="">                </div>                <div class="image-caption">图种</div>            </figure><p>答案：<strong>greendam</strong></p><h3 id="15-声音的轨迹"><a href="#15-声音的轨迹" class="headerlink" title="15.声音的轨迹"></a>15.声音的轨迹</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015190030.png" alt="15" title="">                </div>                <div class="image-caption">15</div>            </figure><p>音波解析 随便找个能看音波的软件就行了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015190012.png" alt="妹子挺好看" title="">                </div>                <div class="image-caption">妹子挺好看</div>            </figure><p>答案：<strong>koenokiseki</strong></p><h3 id="16-虚掩"><a href="#16-虚掩" class="headerlink" title="16.虚掩"></a>16.虚掩</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015204059.png" alt="16" title="">                </div>                <div class="image-caption">16</div>            </figure><p>打开隐藏图片之后发现是多层结构</p><p>直接将遮罩层大小改为0</p><p>key显现</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015204038.png" alt="key" title="">                </div>                <div class="image-caption">key</div>            </figure><p>密码：<strong>secretvg</strong></p><h3 id="17-虚空"><a href="#17-虚空" class="headerlink" title="17.虚空"></a>17.虚空</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015212322.png" alt="17" title="">                </div>                <div class="image-caption">17</div>            </figure><p>空格切换 这里的字符由全角跟半角的空格组成 替换任意一种便可知道答案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM图片20181015213335.png" alt="答案" title="">                </div>                <div class="image-caption">答案</div>            </figure><p>答案：<strong>entropy</strong></p><h3 id="18-Twitter"><a href="#18-Twitter" class="headerlink" title="18.Twitter"></a>18.Twitter</h3><p>科学上网</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015212402.png" alt="18" title="">                </div>                <div class="image-caption">18</div>            </figure><p>打开发现居然作者是位打ctf的大佬</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015212619.png" alt="作者推特" title="">                </div>                <div class="image-caption">作者推特</div>            </figure><p>答案：<strong>th4nky0u</strong></p><h3 id="18-Twitter-新"><a href="#18-Twitter-新" class="headerlink" title="18.Twitter(新)"></a>18.Twitter(新)</h3><p>访问一下url就可以知道了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001718333.png" alt="image-20200712001718333" title="">                </div>                <div class="image-caption">image-20200712001718333</div>            </figure><p>答案：<strong>shortweet</strong></p><h3 id="19-最后"><a href="#19-最后" class="headerlink" title="19.最后"></a>19.最后</h3><p>感谢语</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/TIM截图20181015213733.png" alt="hit3" title="">                </div>                <div class="image-caption">hit3</div>            </figure><p>我是<strong>20</strong>位通关的(正儿八经的第20位 ←.hit1)，<strong>你呢？</strong></p><h3 id="20-强迫症与总结"><a href="#20-强迫症与总结" class="headerlink" title="20.强迫症与总结"></a>20.强迫症与总结</h3><p>(↑.hit2)</p><p>花了我2个多小时的游戏终于完美落下了帷幕</p><p>期初我只是想分享一下在群里，没想到大家兴致如此之高，以至于最后都为找到一个个key而兴致高涨😄</p><p>这种游戏果然需要跟大家一起玩才有意思嘛</p><p>总之，游戏体验良好，5⭐️ 好评！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有点像小学玩过的某个解密游戏的游戏  偶然又发现了这种类型的游戏 鄙人玩了2个小时 写了点攻略 希望能够帮到你&lt;/p&gt;
    
    </summary>
    
    
      <category term="games" scheme="http://blog.fivezha.cn/categories/games/"/>
    
    
      <category term="game" scheme="http://blog.fivezha.cn/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX数学符号</title>
    <link href="http://blog.fivezha.cn/2018/09/08/LaTeX-math-symbols/"/>
    <id>http://blog.fivezha.cn/2018/09/08/LaTeX-math-symbols/</id>
    <published>2018-09-08T14:02:03.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p>自己的LaTeX笔记</p><a id="more"></a><h2 id="先贴教程总览！！"><a href="#先贴教程总览！！" class="headerlink" title="先贴教程总览！！"></a><a href="https://blog.csdn.net/garfielder007/article/details/51646604#t2" target="_blank" rel="noopener">先贴教程总览！！</a></h2><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h3><ul><li>$$ + enter便可进入LaTeX编辑模式</li><li>^ 上标</li><li>_ 下标</li><li>{} 块/分组</li></ul><h3 id="常用环境"><a href="#常用环境" class="headerlink" title="常用环境"></a>常用环境</h3><blockquote><p>\begin{equation}</p><p><strong>自动编号</strong> \label(eq: ```)<strong>标签</strong></p><p>\end{equation}</p><p>\ref{eq:} <strong>引用</strong></p></blockquote><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><ul><li>\alpha</li><li>\beta</li><li>\gamma</li><li>\epsilon</li><li>\pi</li><li>\omerga</li></ul><ul><li>\Gamma</li><li>\Delta</li><li>\Theta</li><li>\Pi</li><li>\Omega</li></ul><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li>\log</li><li>\sin</li><li>\cos</li><li>\arcsin</li><li>\arccos</li><li>\ln</li><li>\sqrt[]{} <strong>根式</strong></li><li>\frac{}{} <strong>分式</strong></li></ul><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><blockquote><p>\begin{matrix}</p><pre><code>1 &amp; 1 \\\1 &amp; 1</code></pre><p>\end{matrix}</p><p>其中：</p><p>&amp; 分割<strong>列</strong></p><p>\   分割<strong>行</strong></p><p>p小括号</p><p>b中括号</p><p>B大括号</p><p>v单竖线</p><p>V双竖线</p></blockquote><ul><li>\dots <strong>横向省略号</strong></li><li>\vdots <strong>竖向省略号</strong></li><li>\ddots <strong>斜向省略号</strong></li><li>{n \times n} <strong>n x n</strong></li></ul><h3 id="分块矩阵-矩阵嵌套"><a href="#分块矩阵-矩阵嵌套" class="headerlink" title="分块矩阵(矩阵嵌套)"></a>分块矩阵(矩阵嵌套)</h3><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>\multicolumn{}{}{} <strong>合并多列</strong></li><li>\raisebox{}[]{} <strong>调整高度</strong></li><li>\hdotsfor{列数} <strong>整列省略号</strong> </li></ul><blockquote><p>\left ( <strong>左括号</strong></p><p>\begin{smallmatrix}</p><p>\end{smallmatrix}</p><p>\right ) <strong>右括号</strong></p><p><strong>行内小矩阵</strong></p></blockquote><blockquote><p>\begin{array}{c|c}</p><p>\hline <strong>分割线</strong></p><p>\end{array}</p></blockquote><h2 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h2><blockquote><p>\begin{gather}</p><p>==== \notag <strong>不自动编号</strong> \ *<em>换行*</em></p><p>==== \ \</p><p>\end{gather}</p></blockquote><ul><li>{align}</li><li>{split}</li><li>{cases} <strong>分段函数</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己的LaTeX笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="latex" scheme="http://blog.fivezha.cn/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>git超简单教程</title>
    <link href="http://blog.fivezha.cn/2018/04/20/git-guide/"/>
    <id>http://blog.fivezha.cn/2018/04/20/git-guide/</id>
    <published>2018-04-20T12:34:09.000Z</published>
    <updated>2021-01-15T01:00:54.293Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>git的超简单用法（以test-repository为例）</em></strong></p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="1-初始化git的email与name"><a href="#1-初始化git的email与name" class="headerlink" title="1.初始化git的email与name"></a>1.初始化git的email与name</h3><p>首先先打开git(这个随便在哪个文件夹都可以)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"这里写你的名字"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"这里写你的邮箱"</span></span></span><br></pre></td></tr></table></figure><h3 id="2-设置ssh连接"><a href="#2-设置ssh连接" class="headerlink" title="2.设置ssh连接"></a>2.设置ssh连接</h3><p>PS：这一步主要是<strong>防止他人盗用你的github账号</strong>所设置的双重保护，仅是为了安全，<strong>不设置</strong>这步<strong>也可运行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"这里是你的邮箱"</span></span></span><br></pre></td></tr></table></figure><p>然后你能在你<code>c://用户//13256(这里是你的用户名)//.ssh</code>里面找到以下三个文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8wkanj30g702k3yf.jpg" alt="文件列表" title="">                </div>                <div class="image-caption">文件列表</div>            </figure><p>然后登陆github网站 在setting里面找到ssh设置 然后新建ssh填入你<code>id_rsa.pub</code>里面的东西就ok了(title随便填)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8xgioj305u09u74a.jpg" alt="setting" title="">                </div>                <div class="image-caption">setting</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8ywkqj30un0hwwff.jpg" alt="add key" title="">                </div>                <div class="image-caption">add key</div>            </figure><p>然后点<code>add key</code>就完事儿了</p><h2 id="连接仓库"><a href="#连接仓库" class="headerlink" title="连接仓库"></a>连接仓库</h2><h3 id="1-获取项目URL"><a href="#1-获取项目URL" class="headerlink" title="1.获取项目URL"></a>1.获取项目URL</h3><h4 id="首先找到你想要clone（类似下载）到本地的项目页面"><a href="#首先找到你想要clone（类似下载）到本地的项目页面" class="headerlink" title="首先找到你想要clone（类似下载）到本地的项目页面"></a>首先找到你想要clone（类似下载）到本地的项目页面</h4><h4 id="按照箭头复制项目地址"><a href="#按照箭头复制项目地址" class="headerlink" title="按照箭头复制项目地址"></a>按照箭头复制项目地址</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/006ZO6XQly1fq7nac5d1vj30su0h7gmy.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="2-在本地clone项目"><a href="#2-在本地clone项目" class="headerlink" title="2.在本地clone项目"></a>2.在本地clone项目</h3><p><strong>首先找到你想要在<em>本地硬盘</em>clone（下载）的地址</strong></p><p><strong><em>右键<em>点击</em>Git Bash Here</em></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7nabiwpzj30o40i4gnm.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><p><strong>然后输入以下指令（就只有第一行）</strong></p><h4 id="git-clone-你刚刚复制的网址"><a href="#git-clone-你刚刚复制的网址" class="headerlink" title="git clone 你刚刚复制的网址"></a>git clone 你刚刚复制的网址</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7naco5yhj30gj0ahglw.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h4 id="完成后关闭这个命令提示框！"><a href="#完成后关闭这个命令提示框！" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><h4 id="完成后关闭这个命令提示框！-1"><a href="#完成后关闭这个命令提示框！-1" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><h4 id="完成后关闭这个命令提示框！-2"><a href="#完成后关闭这个命令提示框！-2" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><p><strong>Then你就会发现在目录下有一个你clone的仓库的名字的文件夹了（如下图）</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7nmlz8mhj30nt0hcgnd.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="3-进入clone后的仓库（文件夹）进行修改和push"><a href="#3-进入clone后的仓库（文件夹）进行修改和push" class="headerlink" title="3.进入clone后的仓库（文件夹）进行修改和push"></a>3.进入clone后的仓库（文件夹）进行修改和push</h3><p>进入刚刚clone的那个文件夹，此时你可以<strong><em>随意修改文件内容 增加内容</em></strong></p><p>修改完成后，在clone的文件夹里 <strong>右键然后点击Git Bash Here</strong></p><p>然后输入下面三行指令</p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h4><h4 id="git-commit-m-‘随便上传点东西’"><a href="#git-commit-m-‘随便上传点东西’" class="headerlink" title="git commit -m ‘随便上传点东西’"></a>git commit -m ‘随便上传点东西’</h4><h4 id="git-push-origin-master（主分支一般为master-如果你没别的分支就写master）"><a href="#git-push-origin-master（主分支一般为master-如果你没别的分支就写master）" class="headerlink" title="git push origin master（主分支一般为master,如果你没别的分支就写master）"></a>git push origin master（主分支一般为master,如果你没别的分支就写master）</h4><h4 id="注：第二行-‘-‘-里面的东西随便写-这里主要写你push的东西主要修改了什么（会在项目上显示）"><a href="#注：第二行-‘-‘-里面的东西随便写-这里主要写你push的东西主要修改了什么（会在项目上显示）" class="headerlink" title="注：第二行 ‘ ‘ 里面的东西随便写 这里主要写你push的东西主要修改了什么（会在项目上显示）"></a>注：第二行 ‘ ‘ 里面的东西随便写 这里主要写你push的东西主要修改了什么（会在项目上显示）</h4><h4 id="push时可能会让你输入邮箱密码-填上就行"><a href="#push时可能会让你输入邮箱密码-填上就行" class="headerlink" title="push时可能会让你输入邮箱密码 填上就行"></a>push时可能会让你输入邮箱密码 填上就行</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7o8kan65j30gc0d5mxu.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h4 id="在项目中显示的修改信息"><a href="#在项目中显示的修改信息" class="headerlink" title="在项目中显示的修改信息"></a>在项目中显示的修改信息</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006ZO6XQly1fq7o8l251ej30rf03x0st.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="4-更新自己修改后的文件"><a href="#4-更新自己修改后的文件" class="headerlink" title="4.更新自己修改后的文件"></a>4.更新自己修改后的文件</h3><p><strong>如果你后来修改了文件想要同步到github上面去的话，那么:</strong></p><h3 id="重复步骤-3中的-三个指令便可以了"><a href="#重复步骤-3中的-三个指令便可以了" class="headerlink" title="重复步骤 3中的 三个指令便可以了"></a>重复<em>步骤 3</em>中的 <em>三个指令</em>便可以了</h3><h3 id="5-分支开发"><a href="#5-分支开发" class="headerlink" title="5. 分支开发"></a>5. 分支开发</h3><h4 id="这个有点大就直接放地址了"><a href="#这个有点大就直接放地址了" class="headerlink" title="这个有点大就直接放地址了"></a>这个有点大就直接放地址了</h4><p><a href="http://www.runoob.com/git/git-branch.html" target="_blank" rel="noopener">菜鸟教程的教程 简单介绍的</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">还有廖雪峰老师的教程 ！推荐！讲的很详细！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;git的超简单用法（以test-repository为例）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="git" scheme="http://blog.fivezha.cn/tags/git/"/>
    
  </entry>
  
</feed>
