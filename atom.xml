<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>异国迷宫的十字路口</title>
  
  <subtitle>一位弱鸡带学生的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.fivezha.cn/"/>
  <updated>2020-07-28T01:28:05.392Z</updated>
  <id>http://blog.fivezha.cn/</id>
  
  <author>
    <name>xmmmmmovo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何利用GitHubAction和gulp部署压缩你的GithubPage+Hexo博客</title>
    <link href="http://blog.fivezha.cn/2020/07/24/github-action-blog/"/>
    <id>http://blog.fivezha.cn/2020/07/24/github-action-blog/</id>
    <published>2020-07-24T13:37:09.000Z</published>
    <updated>2020-07-28T01:28:05.392Z</updated>
    
    <content type="html"><![CDATA[<p>差点翻车<a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>GithubAction</code>作为<code>Github</code>提供的免费的<code>CI/CD</code>服务，让开发者感受到了自动化的爽，相比起<code>Travis CI</code>来说，<code>GitHubAction</code>集成方便，非常适合快速部署的操作，本教程便是一篇如何利用<code>GithubAction</code>对于<code>GithubPage+Hexo</code>博客进行自动化部署，并利用<code>gulp</code>进行压缩。</p><h2 id="配置GithubAction"><a href="#配置GithubAction" class="headerlink" title="配置GithubAction"></a>配置GithubAction</h2><h3 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h3><p>首先依旧是申请key，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724215856700.png" alt="image-20200724215856700" title="">                </div>                <div class="image-caption">image-20200724215856700</div>            </figure><p>此时会生成<strong>.pub的公钥与没有后缀的私钥</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200721154822499.png" alt="成功生成密钥" title="">                </div>                <div class="image-caption">成功生成密钥</div>            </figure><h3 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h3><p>首先新建一个空仓库，用于存放你的博客根目录，新建完成后将<strong>博客根目录</strong>所有文件都上传到这个仓库中，传完项目结构大体如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220337436.png" alt="image-20200724220337436" title="">                </div>                <div class="image-caption">image-20200724220337436</div>            </figure><p>然后开始配置仓库，首先</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220449987.png" alt="image-20200724220449987" title="">                </div>                <div class="image-caption">image-20200724220449987</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220517055.png" alt="image-20200724220517055" title="">                </div>                <div class="image-caption">image-20200724220517055</div>            </figure><p>配置成你的公钥，然后在上传博客的仓库中，上传你的公钥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724220651398.png" alt="image-20200724220651398" title="">                </div>                <div class="image-caption">image-20200724220651398</div>            </figure><p><strong>注意这里的私钥名字一定要跟后面Action里面设置的一样！(不知道就跟我一样)</strong></p><h3 id="配置workflow"><a href="#配置workflow" class="headerlink" title="配置workflow"></a>配置workflow</h3><p>在博客根目录新建<code>.github</code>文件夹，再在<code>.github</code>文件夹里新建<code>workflows</code>文件夹，新建完在<code>workflows</code>文件夹里新建<code>deploy.yml</code>文件，然后按照如下编写：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库就运行</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 切换到master</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装node</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">11.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">"11.x"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 缓存 node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装hexo并生成</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 部署到GitHubPage</span></span><br><span class="line">    <span class="comment"># from https://github.com/peaceiris/actions-gh-pages    </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="comment"># 这里写你自己的仓库名</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">xmmmmmovo/xmmmmmovo.github.io</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>好了，这样就已经配置完成了，你每次提交到此仓库，便会自动帮你运行部署到GithubPage上去。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221510619.png" alt="image-20200724221510619" title="">                </div>                <div class="image-caption">image-20200724221510619</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221450653.png" alt="image-20200724221450653" title="">                </div>                <div class="image-caption">image-20200724221450653</div>            </figure><p>可以看到，已经成功运行了。</p><h2 id="配置gulp"><a href="#配置gulp" class="headerlink" title="配置gulp"></a>配置gulp</h2><p>我们随便点开一个文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724221832348.png" alt="image-20200724221832348" title="">                </div>                <div class="image-caption">image-20200724221832348</div>            </figure><p>可以看到，里面充斥着大量的空格，积少成多，这会占用非常多的时间，让你的博客感觉加载起来很慢，所以既然我们都是全自动化部署了，我们不如直接在进行一遍压缩操作，这样使你博客加载的更加迅速，体验更加良好。</p><h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><p>首先进到博客根目录，然后打开命令行，输入(这里其实你直接在<code>package.json</code>里面写也行(因为node_modules已经没用了)，但是我比较懒)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp@3.9.1 gulp-minify-css gulp-htmlmin gulp-htmlclean --save-dev</span><br></pre></td></tr></table></figure><p>待完成后，改写<code>deploy.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有 push 到仓库就运行</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Public</span> <span class="string">To</span> <span class="string">Pages</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 切换到master</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 安装node</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">11.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">"11.x"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 缓存 node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装hexo并生成</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">gulp</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 部署到GitHubPage</span></span><br><span class="line">    <span class="comment"># from https://github.com/peaceiris/actions-gh-pages    </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="comment"># 这里写你自己的仓库名</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">xmmmmmovo/xmmmmmovo.github.io</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="comment"># 这里我改成了与原格式相似格式的commit message</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">'Site updated: $<span class="template-variable">&#123;&#123; github.event.head_commit.timestamp &#125;&#125;</span>'</span></span><br></pre></td></tr></table></figure><p>然后编写<code>gulpfile.js</code>文件用来加载<code>gulp</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>]);</span><br></pre></td></tr></table></figure><p>此时再次提交，等待<code>GithubAction</code>完成之后，便可以查看效果了~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200724222548668.png" alt="image-20200724222548668" title="">                </div>                <div class="image-caption">image-20200724222548668</div>            </figure><p>可以看到800多行瞬间变为了16行，是不是很爽~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;差点翻车
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(6)---如何利用六个栈使队列所有操作时间复杂度达到O(1)</title>
    <link href="http://blog.fivezha.cn/2020/07/23/algorithm4-1-threestackqueue/"/>
    <id>http://blog.fivezha.cn/2020/07/23/algorithm4-1-threestackqueue/</id>
    <published>2020-07-23T10:11:16.000Z</published>
    <updated>2020-07-28T01:28:05.380Z</updated>
    
    <content type="html"><![CDATA[<p>第一次看见的前面就标有极难的题目<a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>本问题其实是有一篇论文作为参考的:</p><div class="row">    <embed src="https://ecommons.cornell.edu/bitstream/handle/1813/6273/80-433.pdf" width="100%" height="550" type="application/pdf"></div><p>这篇论文是以<code>LISP</code>作为实现语言的，我们本次依旧是使用<code>kotlin</code>进行实现。</p><p>当然，这里需要实现的是<strong>双向队列</strong>的<strong>API</strong>。由于翻译的问题，这里原本的英文版本写的很明确是<strong>Deque</strong>，所以本次三个栈实现的实现的是双向队列。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200725211535026.png" alt="英文版本" title="">                </div>                <div class="image-caption">英文版本</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200725211503964.png" alt="中文版本" title="">                </div>                <div class="image-caption">中文版本</div>            </figure><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>首先，先要说明一个事情——其实栈的实现大多数都是利用<code>顺序表</code>来进行实现的，但是根据算法第四版里面的实现方案，栈其实是利用链表来实现的，虽然不影响后面复杂度分析，但是底层区别首先在这里说清楚。</p><p>然而，队列的实现有着<code>顺序表</code>和<code>链表</code>两种解决方案，用<code>顺序表</code>虽然出队列也依旧是$\mathcal{O}(1)$的效率，但是随着标志位的后移，需要的空间会<strong>线性增长</strong>，但是如果不后移则会变成$\mathcal{O}(N)$的复杂度，所以衍生出了<code>循环队列</code>的中间方案。不过<code>Java</code>源码中，给出了一个非常巧妙的方案，它将<code>Queue</code>和<code>Deque</code>作为一个接口，让其他数据结构实现这个接口，这样无论是<code>链表</code>还是<code>线性表</code>，只要实现了这个接口，就可以作为队列来使用。</p><p>言归正传，回到这个问题，要分析多个栈实现队列，我们首先分析双栈情况，就是左右横跳，用另一个栈作为中间栈，每一次出队列先把所有的元素移动到另一个栈中再出栈，这样出栈时间复杂度$\mathcal{O}(N)$，入栈直接压入原栈，时间复杂度$\mathcal{O}(1)$，但如果我们再利用多个栈进行模拟，就可以把所有操作压缩到$\mathcal{O}(1)$的时间复杂度了。</p><p>根据算法第四版的题目描述，设定的是利用3个栈进行实现，但是这是均摊时间复杂度之后达到的$\mathcal{O}(1)$，不是真$\mathcal{O}(1)$，所以本文章又给出了第二种利用六个栈实现的方案。</p><h2 id="三个栈实现双向队列-虚假的-mathcal-O-1"><a href="#三个栈实现双向队列-虚假的-mathcal-O-1" class="headerlink" title="三个栈实现双向队列(虚假的$\mathcal{O}(1)$)"></a>三个栈实现双向队列(虚假的$\mathcal{O}(1)$)</h2><p>主要实现<code>Deque</code>的几个方法，具体代码解释已经写到注释里面了，所以直接放代码了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用三个栈实现队列</span></span><br><span class="line"><span class="comment"> * 使得所有操作都是O(1)</span></span><br><span class="line"><span class="comment"> *  @Author xmmmmmovo</span></span><br><span class="line"><span class="comment"> *  @Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackDeque</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 左栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tst = Stack&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示存储的栈位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tmpIsRight = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">            lst.isEmpty() &amp;&amp; rst.isEmpty() &amp;&amp; tst.isEmpty()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入左队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushLeft</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        lst.push(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入右队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        rst.push(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出左队列(对应的是入右队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popLeft</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 这里如果左栈有值的话就说明要么左边插入值了</span></span><br><span class="line"><span class="comment">            * 要么右边或者中转栈转移到了左栈，无论哪种情况都是栈顶就是最左</span></span><br><span class="line"><span class="comment">            * 直接出栈就可以</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            lst.isNotEmpty() -&gt; lst.pop()</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里先判断中转栈内容是否是存的右栈的内容</span></span><br><span class="line"><span class="comment">             * 判断如果是右栈的内容，再判断中转栈是否是空的</span></span><br><span class="line"><span class="comment">             * 如果不是就说明右栈已经转移到中转栈中了</span></span><br><span class="line"><span class="comment">             * 相当于移动到了左栈，所以直接弹出中转栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isNotEmpty() &amp;&amp; tmpIsRight -&gt; tst.pop()</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里先判断中转栈内容是否是存的右栈的内容</span></span><br><span class="line"><span class="comment">             * 判断如果不是右栈的内容，再判断中转栈是否是空的</span></span><br><span class="line"><span class="comment">             * 如果不是就说明是左栈移动到了中栈了</span></span><br><span class="line"><span class="comment">             * 相当于移动到了右栈，所以先弹出到左栈再弹出左栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isNotEmpty() &amp;&amp; !tmpIsRight -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (tst.isNotEmpty())</span><br><span class="line">                    lst.push(tst.pop())</span><br><span class="line">                lst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里如果是中转栈是空的并且右栈不为空</span></span><br><span class="line"><span class="comment">             * 就直接转移到中转栈再弹出中转栈</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            tst.isEmpty() &amp;&amp; rst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (rst.isNotEmpty())</span><br><span class="line">                    tst.push(rst.pop())</span><br><span class="line">                tmpIsRight = <span class="literal">true</span> <span class="comment">// 存的是右栈</span></span><br><span class="line">                tst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 所有栈都没有内容，自然就抛出异常</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出右队列(对应的是出左队列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popRight</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            rst.isNotEmpty() -&gt; rst.pop()</span><br><span class="line">            tst.isNotEmpty() &amp;&amp; !tmpIsRight -&gt; tst.pop()</span><br><span class="line">            tst.isNotEmpty() &amp;&amp; tmpIsRight -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (!tst.isEmpty())</span><br><span class="line">                    rst.push(tst.pop())</span><br><span class="line">                rst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            tst.isEmpty() &amp;&amp; lst.isNotEmpty() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (lst.isNotEmpty())</span><br><span class="line">                    tst.push(lst.pop())</span><br><span class="line">                tmpIsRight = <span class="literal">false</span> <span class="comment">// 存的是左栈</span></span><br><span class="line">                tst.pop()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = lst.size + rst.size + tst.size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">asList</span><span class="params">()</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> list = mutableListOf&lt;T&gt;()</span><br><span class="line">        lst.forEach &#123;</span><br><span class="line">            list.add(it)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果非空那就得判断tmp里面存储的是左还是右了</span></span><br><span class="line">        <span class="comment">// 但是右栈一定要翻转</span></span><br><span class="line">        tst.run &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmpIsRight) <span class="keyword">this</span> <span class="keyword">else</span> reversed()</span><br><span class="line">        &#125;.forEach &#123; list.add(it) &#125;</span><br><span class="line">        rst.reversed().forEach &#123;</span><br><span class="line">            list.add(it)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String = asList().toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sq = StackDeque&lt;String&gt;()</span><br><span class="line">sq.pushLeft(<span class="string">"a"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"b"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"c"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"d"</span>)</span><br><span class="line">sq.pushLeft(<span class="string">"e"</span>)</span><br><span class="line">println(sq.popRight())</span><br><span class="line">sq.pushRight(<span class="string">"f"</span>)</span><br><span class="line">sq.pushRight(<span class="string">"g"</span>)</span><br><span class="line">sq.pushRight(<span class="string">"h"</span>)</span><br><span class="line">println(sq.asList())</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200725134752097.png" alt="image-20200725134752097" title="">                </div>                <div class="image-caption">image-20200725134752097</div>            </figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>时间复杂度：</p><p>这里我们主要分析出队列的时间复杂度，因为入队列操作仅是一个入栈操作，时间复杂度：<br>$$<br>\mathcal{O}(1)<br>$$<br>出队列方面，因为两端出队列思想相似，所以仅分析其中一边即可。</p><p>可以看到，首先先说明一下，队列是先进先出的，所以是<code>右进左出</code>，<code>左进右出</code>，选择右进左出分析，可以看到出方向首先尝试从另一边栈进行出栈操作，如果成功就是$\mathcal{O}(1)$，如果失败就继续判断中转栈是否是右栈内容，尝试从中转栈进行出栈，成功依旧是$\mathcal{O}(1)$，当中转栈是左栈或者只有右栈不为空的时候，所需要的时间复杂度才为$\mathcal{O}(N)$，所以考虑N个元素，最差情况是便是<code>左进右出</code>情况，因为此时才会存在移栈，此时仅在第一次出队列时时间复杂度为$\mathcal{O}(N)$。所以均摊时间复杂度下，出队列操作的时间复杂度为：<br>$$<br>\mathcal{O}(N/N)\\<br>= \mathcal{O}(1)<br>$$<br>可以看到是均摊后时间复杂度才达到$\mathcal{O}(1)$，所以是虚假的$\mathcal{O}(1)$。</p><p>空间复杂度：</p><p>虽然这里用到了三个栈，但是所有需求空间加起来是等于添加的总元素的，所以空间是成线性增长的，所以空间复杂度是：<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="六个栈实现单向队列-真正的-mathcal-O-1"><a href="#六个栈实现单向队列-真正的-mathcal-O-1" class="headerlink" title="六个栈实现单向队列(真正的$\mathcal{O}(1)$)"></a>六个栈实现单向队列(真正的$\mathcal{O}(1)$)</h2><p>因为双向会更加绕，所以这里选用单项队列进行讲解，主要方向是<code>右进左出</code>。当然，这里的思想跟上面的有些许不同，三个栈的情况是存在单次操作$\mathcal{O}(N)$的，所以在这里我们将解决这个问题。</p><p>参考博客文章：<a href="https://www.cnblogs.com/ikesnowy/p/7157813.html" target="_blank" rel="noopener">点此跳转</a></p><p>根据上面的思路，我们发现了整个实现的思路就是<strong>均摊</strong>，作为双向队列，如果仅用三个栈的话，中间栈只能存储一个栈，所以我们无论如何都需要有一次进行单个栈所有元素转存的方案，所以无法均摊到单个操作上(如果有四个栈可能可行)，但是本次仅用作单项队列，所以对于出栈来说只是左栈需要转存，所以可以把转存操作均摊到每一个出栈操作上来。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于这个题目也是众说纷纭，有的人说作者已经将题目改成了有限个栈而非三个栈，但是官方网站上却标注着使用三个栈实现，然而因为疫情原因，纸质书依旧在学校里躺着，没法证明，但就从电子版来看，作者有很大可能也没有改题。其实这个题目在<code>stackoverflow</code>上面也有人询问(<a href="https://stackoverflow.com/questions/5538192/how-to-implement-a-queue-with-three-stacks" target="_blank" rel="noopener">链接</a>)，但是大多数人都暗示了使用三个栈是不可能存在真正的$\mathcal{O}(1)$的，当然也有一些抖机灵的解法——比如某些<code>套娃栈</code>的邪道解法，真的是天马行空。不管怎么说，对于一道存在这么个争议的题目，也就仅是能到这里了。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次看见的前面就标有极难的题目
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>解决mathjax公式不换行问题</title>
    <link href="http://blog.fivezha.cn/2020/07/23/mathjax-newline/"/>
    <id>http://blog.fivezha.cn/2020/07/23/mathjax-newline/</id>
    <published>2020-07-23T03:56:03.000Z</published>
    <updated>2020-07-28T01:28:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>如何解决hexo中mathjax公式不换行<a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在<code>hexo</code>中写公式一般是用<code>LaTex</code>写然后利用<code>Mathjax</code>进行翻译来显示，但是当编写多行公式的时候，比如下面的公式的时候</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200723115858343.png" alt="image-20200723115858343" title="">                </div>                <div class="image-caption">image-20200723115858343</div>            </figure><p>本来应该渲染出来如下效果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200723141719914.png" alt="image-20200723141719914" title="">                </div>                <div class="image-caption">image-20200723141719914</div>            </figure><p>然而实际渲染出来确实下面这个样子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200723115846661.png" alt="image-20200723115846661" title="">                </div>                <div class="image-caption">image-20200723115846661</div>            </figure><p>很让人头大，经过多方面排查，最终发现了问题的根源。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查看编译过后的html文件发现，其中的<code>\\</code>都被转义成了<code>\</code>，这样是无法利用<code>mathjax</code>进行显示换行的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200723142052704.png" alt="image-20200723142052704" title="">                </div>                <div class="image-caption">image-20200723142052704</div>            </figure><p>所以我们现在要做的很简单，便是把<code>\\</code>转义掉，不让它再被编译即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200723142327914.png" alt="image-20200723142327914" title="">                </div>                <div class="image-caption">image-20200723142327914</div>            </figure><p>可以看到已经被成功转义</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200723142423810.png" alt="image-20200723142423810" title="">                </div>                <div class="image-caption">image-20200723142423810</div>            </figure><p>现在公式已经会正常显示了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200723142544542.png" alt="image-20200723142544542" title="">                </div>                <div class="image-caption">image-20200723142544542</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何解决hexo中mathjax公式不换行
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="latex" scheme="http://blog.fivezha.cn/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>如何利用GitHubAction和GithubPage部署React应用</title>
    <link href="http://blog.fivezha.cn/2020/07/21/github-action-demo/"/>
    <id>http://blog.fivezha.cn/2020/07/21/github-action-demo/</id>
    <published>2020-07-21T07:03:12.000Z</published>
    <updated>2020-07-28T01:28:05.392Z</updated>
    
    <content type="html"><![CDATA[<p>本文是从物联网工程与技术实践期末文档中抽取出来的，可能格式比较奇怪。<a id="more"></a></p><h2 id="GithubAction"><a href="#GithubAction" class="headerlink" title="GithubAction"></a>GithubAction</h2><p>官网的第一段，便讲明了此功能的用途和作用。</p><blockquote><p>在 GitHub 操作 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</p></blockquote><p>看上去云里雾里，其实就是利用yml进行的自定义脚本操作，用于测试/部署的时候的一些列繁琐重复工作实现全流水线自动化作业的功能。</p><h2 id="GithubPage"><a href="#GithubPage" class="headerlink" title="GithubPage"></a>GithubPage</h2><blockquote><p>您可以为自己、您的组织或项目设置一个基本 GitHub Pages 站点。</p></blockquote><p>白嫖Github服务器用来部署自己的web应用。部署后链接格式：<code>&lt;用户名&gt;.github.io/&lt;仓库名&gt;</code></p><h2 id="开始编写"><a href="#开始编写" class="headerlink" title="开始编写"></a>开始编写</h2><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200724215856700.png" alt="图2.13 成功生成密钥" title="">                </div>                <div class="image-caption">图2.13 成功生成密钥</div>            </figure><p>此时会生成.pub的公钥与没有后缀的私钥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200721154822499.png" alt="图2.14 成功生成密钥" title="">                </div>                <div class="image-caption">图2.14 成功生成密钥</div>            </figure><p>此时再将公钥私钥部署到GitHub：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200721163516689.png" alt="image-20200721163516689" title="">                </div>                <div class="image-caption">image-20200721163516689</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/clip_image002.jpg" alt="图2.15 GitHub部署公钥" title="">                </div>                <div class="image-caption">图2.15 GitHub部署公钥</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200721163738918.png" alt="image-20200721163738918" title="">                </div>                <div class="image-caption">image-20200721163738918</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/clip_image004.jpg" alt="图2.16 GitHub部署私钥" title="">                </div>                <div class="image-caption">图2.16 GitHub部署私钥</div>            </figure><h3 id="编写deploy-yml文件"><a href="#编写deploy-yml文件" class="headerlink" title="编写deploy.yml文件"></a>编写deploy.yml文件</h3><p>首先先在仓库根目录新建<code>.github/workflows</code>文件夹，然后在此文件夹下新建<code>deploy.yml</code>文件</p><p>然后编写此文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">[12.x]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">page</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./build</span></span><br></pre></td></tr></table></figure><p>此时自动化流程部署已完成，每次commit便会自动部署到GitHub服务器中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/clip_image001.png" alt="图2.17 GitHub部署流程" title="">                </div>                <div class="image-caption">图2.17 GitHub部署流程</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/clip_image003.jpg" alt="图2.18 自动化部署" title="">                </div>                <div class="image-caption">图2.18 自动化部署</div>            </figure><h3 id="添加依赖缓存"><a href="#添加依赖缓存" class="headerlink" title="添加依赖缓存"></a>添加依赖缓存</h3><p>上面的流程如果仔细查看的话，会发现一个问题——每一次commit都会进行一次<code>Install Package</code>的操作，这样不仅浪费了性能，还极大的浪费了时间，每一次都会浪费平均50s左右的时间进行依赖下载，占用了我们的开发时间，所以我在这里对于<code>node_modules</code>做了缓存操作，最终<code>deploy.yml</code>文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">[12.x]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">page</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./build</span></span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200721160457703.png" alt="图2.19 未加缓存" title="">                </div>                <div class="image-caption">图2.19 未加缓存</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200721160518125.png" alt="图2.20 添加缓存" title="">                </div>                <div class="image-caption">图2.20 添加缓存</div>            </figure><p>可以看到下载依赖的时间从42s变为了9s，可以说是质的飞跃了~</p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><a href="http://xmmmmmovo.github.io/IOTBP/" target="_blank" rel="noopener">部署成果查看</a></p><p><a href="https://github.com/xmmmmmovo/IOTBP" target="_blank" rel="noopener">Github仓库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是从物联网工程与技术实践期末文档中抽取出来的，可能格式比较奇怪。
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="github" scheme="http://blog.fivezha.cn/tags/github/"/>
    
      <category term="typescript" scheme="http://blog.fivezha.cn/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>谜之github徽章以及存储介质感悟</title>
    <link href="http://blog.fivezha.cn/2020/07/18/github-arctic/"/>
    <id>http://blog.fivezha.cn/2020/07/18/github-arctic/</id>
    <published>2020-07-18T14:51:41.000Z</published>
    <updated>2020-07-28T01:28:05.396Z</updated>
    
    <content type="html"><![CDATA[<p>没想到居然这么快就投入使用了<a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;今天点开了许久未打开的GitHub，还没来得及点进动态查看大佬们star的项目之前，自己便先被一则消息吸引了，本着太长不看的原则，还未仔细查看便条件反射般的点了<code>Got it</code>的圆角矩形按钮。之后我的视线便顺着气泡凸起指向的位置寻去，发现了一枚雪花形状新徽章出现在了自己<code>Profile -&gt; Highlights</code>上，让那枚<code>Pro</code>徽章显得不那么孤单。查看了一下详细信息后，阿这，这不是半年前在油管看到过的<strong>GitHub北极代码库</strong>计划吗？！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200718231856879.png" alt="image-20200718231856879" title="">                </div>                <div class="image-caption">image-20200718231856879</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;当时因为新冠的原因宅在家里实在是太闲了，甚至无聊到了在油管搜索GitHub…….</p><p>&nbsp;&nbsp;&nbsp;&nbsp;然后就看到了下面的这个视频👇(Youtube视频，显示可能需要某些手段)</p><iframe width="890" height="500" src="https://www.youtube.com/embed/fzI9FNjXQ0o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>&nbsp;&nbsp;&nbsp;&nbsp;大致讲的就是把代码存一份到北极去留作备份，用以后来信息断层的人们考古用，用以最容易理解的符号表示解密方案（怎么越听越像自举），然后根据解密方案查找信息。wow，awesome！竟然这么快就上线了，不愧是微软时代的GitHub，有钱就是效率高啊。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;虽然没有被采用，但是我最感兴趣的还是其中提到的存储介质——<strong>磁带</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;说到磁带，应该可以说是很多人的“ 童年 ”了，每天晚上洗脚的时候，每天早晨吃饭的时候，本应该在愉快的动画中度过的时间，被硬生生的安排成英语听力时间，每天听着机械一般的无感情的单词朗读和强挤出来的好似使出了自己毕生实力的浮夸演技对话仅是为了那用于糊弄老师的好似无上的圣旨一般的家长签字。有过类似经历的hxd们估计已经时会心一笑了，然而随着时代发展，磁带这一承载着童年回忆的物件如今却基本上在生活消费市场上销声匿迹了，现代课本也已经基本上全面使用光盘作为附载信息的存储介质了。然而，磁带作为一种经历了半个多世纪的存储介质，却从未消亡，沦为收藏家的玩物，反而在更加高精尖的研究机构/企业存储中继续发光发热。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的言论并非胡思乱想的民科行为，而是实打实的存在有公开数据的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200719125239292.png" alt="image-20200719125239292" title="">                </div>                <div class="image-caption">image-20200719125239292</div>            </figure><p><a href="http://www.radi.cas.cn/gdxx/tzgg/201805/t20180521_5013864.html" target="_blank" rel="noopener"><strong>中国科学院遥感与数字地球研究所LTO磁带采购公告👆</strong></a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200719125412481.png" alt="image-20200719125412481" title="">                </div>                <div class="image-caption">image-20200719125412481</div>            </figure><p><a href="http://big.ac.cn/xwzx/kyjz/201501/t20150128_4306330.html" target="_blank" rel="noopener"><strong>基因组研究所海量磁带库备份系统正式投入运行👆</strong></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，甚至在中国科学院内部，磁带依旧是很重要的存储介质，不仅在国内，国外各大研究机构也是磁带的“大客户”：</p><p><a href="https://www.osti.gov/etdeweb/servlets/purl/20315863" target="_blank" rel="noopener"><strong>国际评价中子核数据库</strong></a>中便多次提到磁带，并且明确提出离线检索中包含磁带数据，可以说，磁带只不过换了一种新的方式存在，并且发展的更加茁壮。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;讲到这里，肯定很多人都会有着大大的疑惑——为什么这些研究机构不使用更加“现代”的存储工具呢？咱们接着往下看。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;猛然提到研究机构有点让人不知所措，不如我们先从一些旧照片中找寻一下线索：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/1960s-woman-data-entry-computer-b-5000-vintage-images.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/56ff99412e0fa0da59ac26059574bc1c.jpg" alt="ibm 1960s | Ibm, Old computers" title="">                </div>                <div class="image-caption">ibm 1960s | Ibm, Old computers</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/d7d48f381d510e9d588ea96121280934.jpg" alt="This room-sized IBM computer from the 1960s was awesome in it's" title="">                </div>                <div class="image-caption">This room-sized IBM computer from the 1960s was awesome in it's</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;上面一组照片拍摄于上世纪60年代，可以看到当时的磁带存放并用于大型机房，由专业的操作员进行专业的操作的，没错，1952年，IBM成功发布了计算机业内的第一款磁带机，拉开了磁带发展第一时期的序幕。这一时期延续了35年，主要特征是圆轴磁带的使用，并且需要人工手动操作(装载、卸载和归档)。如果说当时使用磁带是没有选择，那么为什么现代科研机构也还是继续使用磁带呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;别急，接着往下讲，时间跨越到千禧年往后的2002年，此时磁带跨越了第二个时代——近现时代，此时磁带已经不需要那种大型磁带驱动器，不专用于主机，这让便携和低成本产品得以于平民消费市场面世，自然，廉价的存储介质和便于携带的特性很快便掀起了一股风潮……同年，磁带的容量首次超过了最大磁盘的容量，过去，一个磁盘所能容纳的信息量往往需要多盒磁带才能装得下；但是现在情况完全反过来，一盒磁带就可以容纳多个磁盘的数据。磁盘的失败从此便可见一斑。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/49-131215-9-4.jpg" alt="随身携带的磁带播放器" title="">                </div>                <div class="image-caption">随身携带的磁带播放器</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;后面的事情大家也都经历了，计算机硬盘/软盘的出现，改变了家用电脑的存储境况，单位体积的容量大大提升，全面改善了用户体验，这使得家用电脑短暂的磁带存储介质的时代极其短暂。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/v2-afaea03afc6c7d936cf24933f9081a87_r.jpg" alt="苹果Ⅱ 使用磁带作为存储媒介" title="">                </div>                <div class="image-caption">苹果Ⅱ 使用磁带作为存储媒介</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/v2-a05960f41b5058867fc363c6b737c993_r.jpg" alt="苹果Ⅱ 使用磁带作为存储媒介" title="">                </div>                <div class="image-caption">苹果Ⅱ 使用磁带作为存储媒介</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/v2-b8f4941449f99d7e6cff36972e5eabd2_r.jpg" alt="雅达利5200" title="">                </div>                <div class="image-caption">雅达利5200</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;从这里，其实就可以看出民用设备与科研设备选用上的些许差距了，民用设备主要讲究的就是成本和便利，而科研设备主要考虑的则是稳定性和持久性。好了说了这么多，大概历史也说明了，磁带作为一种历史悠久的存储介质，甚至一直到2002年还在发展，但是其单位体积的存储容量使得其无法在民用大放异彩。总结一下，磁带价格低廉，发展没有落后，但是单位体积存储容量小。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;相信已经有人分析出来结果了，在这里我引用一下<strong>CERN</strong>数据存储主管<strong>Alberto Pace</strong>的分析来说明优点</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;相比硬盘，磁带储存拥有4大优势：虽然，磁带的装卸是落后的，即使在自动化装置协助下，在储存库中找出对应的磁带并装入读取装置中最快也需要40秒。但是一旦就绪后，磁带的读取速度却可以达到硬盘的4倍。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;其次是可靠性。磁带也会遇到损毁的情况，如断裂。但断裂后的磁带仍可以重新接上，而且仅会造成数百MB的损失——这对于动辄上TB的专业储存设备来说，实在小事一桩。但对硬盘来说，物理损坏甚至会导致全部数据丢失。CERN的实际数据是，他们每年储存在磁带上的100PB数据（1PB相当于1000TB），每年会损失数百MB；相对的，储存在硬盘上的50PB 数据，这个数字则达数百TB。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;还有就是，对于磁带来说，突然断电也不会损坏记录下来的资料，但对于硬盘来说，这是一件危险的事情。<br>​&nbsp;&nbsp;&nbsp;&nbsp;最后也是最重要的，是磁盘一定程度上更加安全。比如说如果一间公司的数据中心被黑客劫持，他可以在数分钟内让硬盘上50PB数据从此在世上消失，但如果磁带的话，不好意思，可能需要数年。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;不过，磁带储存并非只与那些每秒就碰撞出几个GB的核子对撞实验室有密切联系。调查表明，磁带储存也同样适合中小型企业。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，磁带储存更便宜也更持久。数据在磁带上往往能存放超过30年；硬盘超过5年的话，如果你是公司的IT主管，你就需要考虑将数据转移了。而且磁带目前仍然是储存成本最低的解决方案，目前大概每GB数据在磁带上的成本为4美分，硬盘的话则为10美分。如果考虑到前面所说的寿命问题，差距将会更大。所以，磁带在展示还并没有出现真正消亡的迹象，我们也看到了这个老一代的产品所寻求的生存潜力。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;好了，讲完了一个传奇的历史，其实最让我惊奇的是一个已经淡出生活的物件竟然在另外一个领域还有这不俗的影响，磁带就如同软件语言的<code>C++</code>一样，“老” ，乃于它的历史。而技术却一直在改良。磁带和其他大部分储存媒介一样，磁带的储存密度也一直在攀升（遵循摩尔定律）。其实这种想当然的事情并不少见，比如常年混迹手机圈子的人，总会说一句：</p><blockquote><p>索尼要凉</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;但其实呢，索尼靠着全世界的音乐版权，hi-res，PS系列，相机，电视······如此之多的产业早就让索尼赚的盆满钵满，说不准手机产业就是拿来试水的，到时候，公开宣布退出的时候，大抵又会有人说道：</p><blockquote><p>索尼果然凉了</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，这其实很正常，因为人类就是这样的生物，在<strong>丹尼尔 · 卡尼曼</strong>所著的<strong>《思考，快与慢》</strong>第五章中便描述了这种现象，下面我提出一个问题，再做出分析：</p><blockquote><p>现在我公司有大量的重要数据集静态资源需要长时间稳定使用，仅是用于读取，请问我选取存储介质的时候是选用SSD还是HDD呢？</p></blockquote><p>请作答。</p><p>。</p><p>。</p><p>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;hummmmm，相信有人很快选了HDD了，因为长时间稳定存储还是大量的存储，听说过SSD损耗的估计都早早排除了SSD这个选项了。事实上呢，这里应该选用SSD，因为仅是用于读取，而SSD的读取是不会有损耗的，仅是写入会有损耗（这里可以去看一下SSD原理就明白了），所以这里建议选取快速的SSD更佳。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，你可能会说：“这SSD读取不损耗我也不知道啊”，那你为什么不去百度呢？其实这里是你的“系统1”——经验系统在作怪，你想当然的把你已知的信息带入了当前环境中来，导致你不能存在客观的逻辑判断。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面是原书中的形容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200719194910451.png" alt="a" title="">                </div>                <div class="image-caption">a</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200719194943595.png" alt="b" title="">                </div>                <div class="image-caption">b</div>            </figure><p>&nbsp;&nbsp;&nbsp;&nbsp;几乎可以说，我们大多数时间都不能离开这个系统，它能帮助我们做出大量的简单的判断，比如闹铃响了需要关闹铃，手机没电了需要充电，这些都是由你的“系统1”来做出判断，但当你被这个系统牵着鼻子走，很少觉得自己会有“系统2”判断的时候，便是你需要警觉的时候，因为，我们独立思考的人格，才是我们作为一个活在这个多面的世界中的最好体现。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这便是小弟的一点点延展思考，仅代表自己的观点，欢迎反驳，但是不喜勿喷，和平讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没想到居然这么快就投入使用了
    
    </summary>
    
    
      <category term="daily" scheme="http://blog.fivezha.cn/categories/daily/"/>
    
    
      <category term="日常瞎写" scheme="http://blog.fivezha.cn/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
      <category term="思考感悟" scheme="http://blog.fivezha.cn/tags/%E6%80%9D%E8%80%83%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(5)---约瑟夫环问题</title>
    <link href="http://blog.fivezha.cn/2020/07/17/algorithm4-Josephus/"/>
    <id>http://blog.fivezha.cn/2020/07/17/algorithm4-Josephus/</id>
    <published>2020-07-17T09:24:23.000Z</published>
    <updated>2020-07-28T01:28:05.380Z</updated>
    
    <content type="html"><![CDATA[<p>约瑟夫环问题（蛮力，数学解法）<a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>约瑟夫问题是一个很著名的<del>杀人</del>问题：</p><p>约瑟夫问题是个著名的问题：N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。<br>例如：只有三个人，把他们叫做A、B、C，他们围成一圈，从A开始报数，假设报2的人被杀掉。</p><ul><li>首先A开始报数，他报1。侥幸逃过一劫。</li><li>然后轮到B报数，他报2。非常惨，他被杀了</li><li>C接着从1开始报数</li><li>接着轮到A报数，他报2。也被杀死了。</li><li>最终胜利者是C</li></ul><p>可怜，真可怜，数学家真是心狠手辣（雾）</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>这里跟算法第四版的输入有点不一样，这里我们有三个参数：</p><ul><li>总人数</li><li>剩余人数</li><li>间隔人数</li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>最后剩余人的编号合集，由逗号分隔</p><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>顾名思义，求，就是嗯求，靠着大量循环做出来的结果。</p><p>循环删除直到剩余人数到需要的人数，每一次循环都删除间隔人数后的那个，最后剩下来的就是活着的人。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200721161113695.png" alt="image-20200721161113695" title="">                </div>                <div class="image-caption">image-20200721161113695</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>这里有两个实现，可以使用双向队列实现，也可以用循环链表实现。</p><h4 id="双向队列实现"><a href="#双向队列实现" class="headerlink" title="双向队列实现"></a>双向队列实现</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向队列暴力求法</span></span><br><span class="line"><span class="comment"> * 就是嗯求</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">queueForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="comment">// 初始化队列</span></span><br><span class="line">    <span class="keyword">val</span> deque = Deque&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">            pushRight(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有到剩余人数就继续循环</span></span><br><span class="line">    <span class="keyword">while</span> (deque.size != remainPeople) &#123;</span><br><span class="line">        <span class="comment">// 跳过间隔人数</span></span><br><span class="line">        <span class="comment">// 这里的跳过为了不影响后面的循环做的是左出右进的方案</span></span><br><span class="line">        <span class="keyword">for</span> (q <span class="keyword">in</span> <span class="number">1</span> until intervalPeople)</span><br><span class="line">            deque.pushRight(deque.popLeft())</span><br><span class="line">        deque.popLeft()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        deque.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">            append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">            <span class="keyword">if</span> (index != deque.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双向队列实现请看<a href="https://blog.fivezha.cn/2020/07/17/algorithm4-1-4/">算法(第四版)笔记(4)—Deque,Buffer,四数之和,三数之和</a></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>时间复杂度：</p><p>这里的<strong>双向队列</strong>采用的是<strong>链表</strong>实现，所以进出队列的时间复杂度都是$\mathcal{O}(1)$，所以仅用计算循环时间复杂度。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R)*I)<br>$$<br>空间复杂度：</p><p>存在中间数据结构双向队列，非常数级空间复杂度。<br>$$<br>\mathcal{O}(N)<br>$$</p><h4 id="循环链表实现"><a href="#循环链表实现" class="headerlink" title="循环链表实现"></a>循环链表实现</h4><p>循环链表循环链表，就是说头尾相连的链表<del>(就像是人体蜈蚣那样)</del></p><p>所以首先来实现循环链表：</p><h5 id="循环链表实现-1"><a href="#循环链表实现-1" class="headerlink" title="循环链表实现"></a>循环链表实现</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环链表</span></span><br><span class="line"><span class="comment"> * 此类仅用于约瑟夫环问题 所以api设计很简单</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableIterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> last: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size</span><br><span class="line">        <span class="keyword">get</span>() = _size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n = first</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = n.next</span><br><span class="line">            <span class="comment">// 快速gc</span></span><br><span class="line">            n.item = <span class="literal">null</span></span><br><span class="line">            n.next = <span class="literal">null</span></span><br><span class="line">            n.prev = <span class="literal">null</span></span><br><span class="line">            n = next</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="literal">null</span></span><br><span class="line">        last = <span class="literal">null</span></span><br><span class="line">        _size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = _size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        linkedLast(element)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> IteratorImpl(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNode</span><span class="params">(index: <span class="type">Int</span>)</span></span>: Node&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> reIndex = index % _size</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (reIndex &lt; (_size shr <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> node = first</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until index) &#123;</span><br><span class="line">                node = node?.next</span><br><span class="line">            &#125;</span><br><span class="line">            node!!</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> node = last</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> _size - <span class="number">2</span> downTo index) &#123;</span><br><span class="line">                node = node?.prev</span><br><span class="line">            &#125;</span><br><span class="line">            node!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedLast</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> l = last</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, l, <span class="literal">null</span>)</span><br><span class="line">        last = nNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l.next = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        first!!.prev = nNode</span><br><span class="line">        nNode.next = first</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlink</span><span class="params">(node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> npre = node.prev</span><br><span class="line">        <span class="keyword">val</span> nnext = node.next</span><br><span class="line">        <span class="keyword">val</span> nitem = node.item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (npre == last &amp;&amp; nnext == first) &#123;</span><br><span class="line">            last = <span class="literal">null</span></span><br><span class="line">            first = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == first)</span><br><span class="line">                first = nnext</span><br><span class="line">            <span class="keyword">if</span> (node == last)</span><br><span class="line">                last = npre</span><br><span class="line">            npre!!.next = nnext</span><br><span class="line">            nnext!!.prev = npre</span><br><span class="line">            node.next = <span class="literal">null</span></span><br><span class="line">            node.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.item = <span class="literal">null</span></span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> nitem!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转字符串方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">when</span> (_size) &#123;</span><br><span class="line">            <span class="number">0</span> -&gt; <span class="keyword">return</span> <span class="string">"[]"</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">                sb.append(<span class="string">"["</span>)</span><br><span class="line">                <span class="keyword">var</span> n = first</span><br><span class="line">                <span class="keyword">while</span> (n != last) &#123;</span><br><span class="line">                    sb.append(<span class="string">"<span class="subst">$&#123;n!!.item&#125;</span>, "</span>)</span><br><span class="line">                    n = n.next</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">"<span class="subst">$&#123;n!!.item&#125;</span>]"</span>).toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">                <span class="keyword">var</span> item: T?,</span><br><span class="line">                <span class="keyword">var</span> prev: Node&lt;T&gt;?,</span><br><span class="line">                <span class="keyword">var</span> next: Node&lt;T&gt;?</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看位置是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkPositionIndex</span><span class="params">(index: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"index: <span class="variable">$index</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorImpl</span></span>(</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> index: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) : MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> lastReturned: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            checkPositionIndex(index, size)</span><br><span class="line">            current = getNode(index)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = current != <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            lastReturned = current</span><br><span class="line">            current = current?.next</span><br><span class="line">            index++</span><br><span class="line">            <span class="keyword">return</span> lastReturned?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            unlink(lastReturned ?: <span class="keyword">throw</span> IllegalStateException())</span><br><span class="line">            index--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主函数实现"><a href="#主函数实现" class="headerlink" title="主函数实现"></a>主函数实现</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">linkedListForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> cl = CircularLinkedList&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">            add(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> iter = cl.iterator()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext() &amp;&amp; cl.size != remainPeople) &#123;</span><br><span class="line">        iter.next()</span><br><span class="line">        cnt++</span><br><span class="line">        <span class="keyword">if</span> (cnt == intervalPeople) &#123;</span><br><span class="line">            iter.remove()</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        cl.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">            append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">            <span class="keyword">if</span> (index != cl.size - <span class="number">1</span>) append(<span class="string">", "</span>) <span class="keyword">else</span> <span class="keyword">return</span><span class="symbol">@apply</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>时间复杂度：</p><p>这里使用的是<strong>循环链表</strong>实现，所以进出队列的时间复杂度都是$\mathcal{O}(1)$，所以仅用计算循环时间复杂度。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R)*I)<br>$$<br>空间复杂度：</p><p>存在中间数据结构循环链表，非常数级空间复杂度。<br>$$<br>\mathcal{O}(N)<br>$$</p><h2 id="数学解法"><a href="#数学解法" class="headerlink" title="数学解法"></a>数学解法</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>其实数学解法也是应用了一种环的思想，但环思想在此解法中仅是辅助作用，主要的思想是<code>倒推</code>和<code>数学归纳法</code>的应用。</p><p>我们先从<code>(T = 2, R = 1, I = 3)</code>开始看起：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/v2-20ec6f3cc6f423abcd3b6ec1cc06eacf_r.jpg" alt="preview" title="">                </div>                <div class="image-caption">preview</div>            </figure><p>可以看到，</p><p>第一轮删除了<strong>2</strong>，所以第二轮就从<strong>2</strong>后面的一位元素开始。</p><p>因为我们假设整个数组也是环形的，所以数组结尾后面的元素也是开始的元素，如此反复，所以第二轮删除了<strong>0</strong></p><p>同理，第三轮删除了<strong>4</strong></p><p>第四轮删除了<strong>1</strong></p><p>这样，完整的过程我们就模拟完成了，这也是我们前两种方法的主要思路，模拟整个过程，完成计算。但其实，我们并不需要观察整个数组变化的过程，我们只需要观察我们所需要的关键元素就可以了，在这里即是<strong>3</strong>，我们从最后一轮选择出的结果倒推，直到推导出此元素最开始在原数组中的位置即可直接输出原数组中的元素。注意：这里我们是先正向推导了一遍才可以直接看出来数字是<strong>3</strong>的，真实情况下我们是不需要正向推导，而是从结果来反推。</p><p>比如上面的例子，第一轮反推，我们首先抛弃数字的概念，设定最后选出来的数字<strong>x</strong>的下标是<strong>0</strong>。</p><p>为反推到第四轮首先先补上间隔数字，得出<strong>[a, x, | a, x]</strong>，此时<strong>x</strong>下标为<strong>1</strong></p><p>再往上反推，得出<strong>[a , x , b, | a, x]</strong>，所以<strong>x</strong>下标为<strong>1</strong></p><p>再往上，<strong>[x, b, c, a, | x, b]</strong>，所以<strong>x</strong>下标为<strong>0</strong></p><p>再往后就是<strong>[c, a , d, x, b, | c, a]</strong>，所以最终<strong>x</strong>的坐标就是<strong>3</strong></p><p>从此，我们可以发现，每一次倒推的数组组成都是<strong>末尾+新数字+开头</strong>的反向三明治结构，这就导致每一次倒推的数字下标是$(index + I) \mod K$，$K$为反推后数组大小。</p><p>根据数学归纳法，可以推出如下公式：</p><p>设函数$f(K, I)$为$K$个报数时，间隔人数为$I$的时候，所求最终胜出的人的编号。<br>$$<br>f(K, I) = (f(K - 1, I) + I) \mod K<br>$$<br>测试一下<br>$$<br>f(1,3) = 0\\<br>f(2,3) = (f(1, 3) + 3) \mod 2 = 1\\<br>f(3,3) = (f(2, 3) + 3) \mod 3 = 1\\<br>f(4,3) = (f(3, 3) + 3) \mod 4 = 0\\<br>f(5,3) = (f(4, 3) + 3) \mod 5 = 3<br>$$<br>结果正确~</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="数学实现"><a href="#数学实现" class="headerlink" title="数学实现"></a>数学实现</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mathFastSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> k = MutableList(remainPeople) &#123; it &#125;</span><br><span class="line">    <span class="keyword">for</span> (idx <span class="keyword">in</span> remainPeople + <span class="number">1</span>..totalPeople) &#123;</span><br><span class="line">        k.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                          k[index] = (i + intervalPeople) % idx</span><br><span class="line">                         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">        k.map &#123; it + <span class="number">1</span> &#125;</span><br><span class="line">        .forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                         append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                         <span class="keyword">if</span> (index != k.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">    &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h6><p>时间复杂度：</p><p>这里使用的是<strong>数学方法</strong>实现。</p><p>设总人数 $T$，间隔人数 $I$，剩余人数 $R$。<br>$$<br>\mathcal{O}((T-R+1)*R)<br>$$<br>空间复杂度：</p><p>不存在中间数据结构，仅是用到了循环变量，所以是常数级空间复杂度。<br>$$<br>\mathcal{O}(1)<br>$$</p><h2 id="类实现"><a href="#类实现" class="headerlink" title="类实现"></a>类实现</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithms</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ds.CircularLinkedList</span><br><span class="line"><span class="keyword">import</span> ds.Deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JosephusSolutions</span></span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> totalPeople: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> intervalPeople: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> remainPeople: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        checkArguments()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkArguments</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">                totalPeople &lt;= <span class="number">0</span> || remainPeople &lt;= <span class="number">0</span> || intervalPeople &lt;= <span class="number">0</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"人数不能小于等于0！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalPeople &lt; remainPeople)</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"总人数不能小于剩余人数！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changePeopleNumbers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            totalPeople: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            intervalPeople: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            remainPeople: <span class="type">Int</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPeople = totalPeople</span><br><span class="line">        <span class="keyword">this</span>.intervalPeople = intervalPeople</span><br><span class="line">        <span class="keyword">this</span>.remainPeople = remainPeople</span><br><span class="line">        checkArguments()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向队列暴力求法</span></span><br><span class="line"><span class="comment">     * 就是嗯求</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queueForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="comment">// 初始化队列</span></span><br><span class="line">        <span class="keyword">val</span> deque = Deque&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">                pushRight(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有到剩余人数就继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (deque.size != remainPeople) &#123;</span><br><span class="line">            <span class="comment">// 跳过间隔人数</span></span><br><span class="line">            <span class="comment">// 这里的跳过为了不影响后面的循环做的是左出右进的方案</span></span><br><span class="line">            <span class="keyword">for</span> (q <span class="keyword">in</span> <span class="number">1</span> until intervalPeople)</span><br><span class="line">                deque.pushRight(deque.popLeft())</span><br><span class="line">            deque.popLeft()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            deque.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != deque.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">linkedListForceSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="keyword">val</span> cl = CircularLinkedList&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..totalPeople)</span><br><span class="line">                add(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> iter = cl.iterator()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext() &amp;&amp; cl.size != remainPeople) &#123;</span><br><span class="line">            iter.next()</span><br><span class="line">            cnt++</span><br><span class="line">            <span class="keyword">if</span> (cnt == intervalPeople) &#123;</span><br><span class="line">                iter.remove()</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            cl.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != cl.size - <span class="number">1</span>) append(<span class="string">", "</span>) <span class="keyword">else</span> <span class="keyword">return</span><span class="symbol">@apply</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mathFastSolution</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">        <span class="keyword">val</span> k = MutableList(remainPeople) &#123; it &#125;</span><br><span class="line">        <span class="keyword">for</span> (idx <span class="keyword">in</span> remainPeople + <span class="number">1</span>..totalPeople) &#123;</span><br><span class="line">            k.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                k[index] = (i + intervalPeople) % idx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.apply &#123;</span><br><span class="line">            k.map &#123; it + <span class="number">1</span> &#125;.forEachIndexed &#123; index, i -&gt;</span><br><span class="line">                append(<span class="string">"<span class="subst">$&#123;i&#125;</span>号"</span>)</span><br><span class="line">                <span class="keyword">if</span> (index != k.size - <span class="number">1</span>) append(<span class="string">", "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;约瑟夫环问题（蛮力，数学解法）
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(4)---Deque,Buffer,四数之和,三数之和</title>
    <link href="http://blog.fivezha.cn/2020/07/17/algorithm4-1-4/"/>
    <id>http://blog.fivezha.cn/2020/07/17/algorithm4-1-4/</id>
    <published>2020-07-17T01:36:36.000Z</published>
    <updated>2020-07-28T01:28:05.380Z</updated>
    
    <content type="html"><![CDATA[<p>双向队列,双栈缓冲区,蛮力法四数之和以及快速三数之和的实现<a id="more"></a></p><h2 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200717093114582.png" alt="image-20200717093114582" title="">                </div>                <div class="image-caption">image-20200717093114582</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Deque</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向队列类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span>&lt;<span class="type">T</span>&gt; : <span class="type">Collection</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> list = LinkedList&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span> = list.size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushLeft</span><span class="params">(element: <span class="type">T</span>)</span></span> = list.addFirst(element)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pushRight</span><span class="params">(element: <span class="type">T</span>)</span></span> = list.addLast(element)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popLeft</span><span class="params">()</span></span>: T = list.removeFirst()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">popRight</span><span class="params">()</span></span>: T = list.removeLast()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = list.size</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含[element]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含所有[elements]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">containsAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (elements.isEmpty())</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            elements.all &#123;</span><br><span class="line">                contains(it)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看[element]的位置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">indexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == element) &#123;</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> list.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> list.iterator()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于双向链表的实现见这篇博客: <a href="https://blog.fivezha.cn/2020/07/13/algorithm4-linkedlist/">算法(第四版)笔记(3)—双向链表(LinkedList)实现</a></p><h2 id="缓冲区Buffer"><a href="#缓冲区Buffer" class="headerlink" title="缓冲区Buffer"></a>缓冲区Buffer</h2><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200717093315081.png" alt="image-20200717093315081" title="">                </div>                <div class="image-caption">image-20200717093315081</div>            </figure><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> ls = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rs = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(c: <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">        ls.push(c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">()</span></span>: <span class="built_in">Char</span> =</span><br><span class="line">        <span class="keyword">if</span> (ls.size() == <span class="number">0</span>) <span class="keyword">throw</span> NoSuchElementException(<span class="string">"无法删除"</span>)</span><br><span class="line">        <span class="keyword">else</span> ls.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">left</span><span class="params">(k: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; ls.size()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"无法到达"</span>)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..k) &#123;</span><br><span class="line">            rs.push(ls.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">right</span><span class="params">(k: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; rs.size()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"无法到达"</span>)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..k) &#123;</span><br><span class="line">            ls.push(rs.pop())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = ls.size() + rs.size()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder().also &#123;</span><br><span class="line">            it.append(ls)</span><br><span class="line">            it.reverse()</span><br><span class="line">            it.append(<span class="string">" | "</span>)</span><br><span class="line">            it.append(rs)</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于栈的实现见这篇博客:<a href="https://blog.fivezha.cn/2020/07/11/algorithm4th-1/#%E6%A0%88">算法(第四版)笔记(1)—简单类的实现</a></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200717095951864.png" alt="image-20200717095951864" title="">                </div>                <div class="image-caption">image-20200717095951864</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200717095958140.png" alt="image-20200717095958140" title="">                </div>                <div class="image-caption">image-20200717095958140</div>            </figure><h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 蛮力法求数字之和</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fourSumForce</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;, num: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (a <span class="keyword">in</span> list.indices)</span><br><span class="line">        <span class="keyword">for</span> (b <span class="keyword">in</span> a until list.size)</span><br><span class="line">            <span class="keyword">for</span> (c <span class="keyword">in</span> b until list.size)</span><br><span class="line">                <span class="keyword">for</span> (d <span class="keyword">in</span> c until list.size)</span><br><span class="line">                    <span class="keyword">if</span> (list[a] + list[b] + list[c] + list[d] == num) &#123;</span><br><span class="line">                        cnt++</span><br><span class="line">                    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度:<br>$$<br>\mathcal{O}(N^4)<br>$$</p><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><h3 id="二分法求三数之和"><a href="#二分法求三数之和" class="headerlink" title="二分法求三数之和"></a>二分法求三数之和</h3><p>先排序，依旧是两重循环找出前两个数字，第三个数值利用二分法从剩余元素中找。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">containsDuplicatesInSorted</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until list.size - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list[i] == list[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分求非重复三数之和</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">threeSumBinaryFast</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">Int</span>&gt;)</span></span>: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> res = LinkedList&lt;List&lt;<span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">    <span class="keyword">val</span> sl = list.sorted().run &#123;</span><br><span class="line">        <span class="keyword">if</span> (containsDuplicatesInSorted(<span class="keyword">this</span>))</span><br><span class="line">            distinct()</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list.size &lt; <span class="number">3</span>) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"数组非重复元素小于3个!"</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> sl.indices) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> i until sl.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> k = binarySearch(sl, -(sl[i] + sl[j]), j + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (k != -<span class="number">1</span>) &#123;</span><br><span class="line">                res.add(listOf(sl[i], sl[j], sl[k]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度方面，排序+循环时间复杂度$\mathcal{O}(N\log_2(N)+N^2\log_2{N})$，化简得：<br>$$<br>\mathcal{O}(N^2)<br>$$<br>空间复杂度:<br>$$<br>\mathcal{O}(N)<br>$$<br>排序产生的中间数组</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;双向队列,双栈缓冲区,蛮力法四数之和以及快速三数之和的实现
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(3)---双向链表(LinkedList)实现</title>
    <link href="http://blog.fivezha.cn/2020/07/13/algorithm4-linkedlist/"/>
    <id>http://blog.fivezha.cn/2020/07/13/algorithm4-linkedlist/</id>
    <published>2020-07-13T11:59:21.000Z</published>
    <updated>2020-07-28T01:28:05.384Z</updated>
    
    <content type="html"><![CDATA[<p>根据算法第四版和源码进行的链表实现，主要实现<code>MutableList&lt;T&gt;</code>接口和<code>MutableListIterator&lt;T&gt;</code>迭代器<a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>主要是实现<code>MutableList&lt;T&gt;</code>接口，迭代器实现<code>MutableListIterator&lt;T&gt;</code>接口。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>链表，就是一个一个节点连接起来的数据结构，这种数据结构优点是<strong>使用过的空间大小和元素数量成正比且增删时间复杂度低</strong>，缺点则是<strong>查找困难，需要通过引用访问任意元素</strong>。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="增删"><a href="#增删" class="headerlink" title="增删"></a>增删</h4><p>在这一部分主要需要特别考虑的几种情况：</p><ul><li>在表头插入节点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200715151744188.png" alt="image-20200715151744188" title="">                </div>                <div class="image-caption">image-20200715151744188</div>            </figure><ul><li>删除表头结点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200715151824396.png" alt="image-20200715151824396" title="">                </div>                <div class="image-caption">image-20200715151824396</div>            </figure><ul><li>在表尾插入节点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200715151838973.png" alt="image-20200715151838973" title="">                </div>                <div class="image-caption">image-20200715151838973</div>            </figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>迭代方面，主要是实现<code>MutableListIterator&lt;T&gt;</code>，当要遍历的时候仅需要</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = LinkedList&lt;String&gt;()</span><br><span class="line"><span class="keyword">for</span> (n <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = LinkedList&lt;String&gt;()</span><br><span class="line"><span class="keyword">val</span> mutableListIterator = numbers.listIterator()</span><br><span class="line"><span class="keyword">while</span> (mutableListIterator.hasNext()) &#123;</span><br><span class="line">    mutableListIterator.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>便可。</p><p>迭代过程的<code>remove()</code>和<code>add()</code>则是实现当前节点的删除和在当前节点之前添加的功能。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.NoSuchElementException</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> last: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _size: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在尾部插入[element]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        linkedLast(element)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 让[element]成为[index]位置的节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        checkPositionIndex(index, size)</span><br><span class="line">        <span class="keyword">if</span> (index == _size) &#123;</span><br><span class="line">            linkedLast(element)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            linkedBefore(element, getNode(index))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 让[index]位置成为[elements]的第一个节点位置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(index: <span class="type">Int</span>, elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        checkPositionIndex(index, size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (elements.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里的两个节点代表着插入节点的前后节点</span></span><br><span class="line">        <span class="keyword">var</span> pred: Node&lt;T&gt;?</span><br><span class="line">        <span class="keyword">var</span> succ: Node&lt;T&gt;?</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否是最尾部插入</span></span><br><span class="line">        <span class="keyword">if</span> (index == _size) &#123;</span><br><span class="line">            succ = <span class="literal">null</span></span><br><span class="line">            pred = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            succ = getNode(index)</span><br><span class="line">            pred = succ.prev</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (e <span class="keyword">in</span> elements) &#123;</span><br><span class="line">            <span class="keyword">val</span> nNode = Node(e, pred, <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明是在首节点插入的</span></span><br><span class="line">                first = nNode</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 一直往后插入</span></span><br><span class="line">                pred.next = nNode</span><br><span class="line">            &#125;</span><br><span class="line">            pred = nNode</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = pred</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pred!!.next = succ</span><br><span class="line">            succ.prev = pred</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _size += elements.size</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在尾部添加[elements]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        addAll(_size, elements)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n = first</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = n.next</span><br><span class="line">            <span class="comment">// 快速gc</span></span><br><span class="line">            n.item = <span class="literal">null</span></span><br><span class="line">            n.next = <span class="literal">null</span></span><br><span class="line">            n.prev = <span class="literal">null</span></span><br><span class="line">            n = next</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="literal">null</span></span><br><span class="line">        last = <span class="literal">null</span></span><br><span class="line">        _size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除为[element]的节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.item == element) &#123;</span><br><span class="line">                unlink(node)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (containsAll(elements)) elements.all &#123;</span><br><span class="line">            remove(it)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除[index]位置的节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">removeAt</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">val</span> node = getNode(index)</span><br><span class="line">        <span class="keyword">val</span> item = node.item</span><br><span class="line">        unlink(node)</span><br><span class="line">        <span class="keyword">return</span> item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">retainAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (containsAll(elements)) &#123;</span><br><span class="line">            clear()</span><br><span class="line">            addAll(elements)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设定[index]为[element]并返回旧值</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(index: <span class="type">Int</span>, element: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">return</span> getNode(index).run &#123;</span><br><span class="line">            item!!.also &#123;</span><br><span class="line">                item = element</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含[element]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含所有[elements]</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">containsAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> =</span><br><span class="line">        <span class="keyword">if</span> (elements.isEmpty())</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            elements.all &#123;</span><br><span class="line">                contains(it)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取[index]节点数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(index: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">return</span> getNode(index).item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">indexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == element) &#123;</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表是否为空</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = _size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以查到的最后一个元素</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">lastIndexOf</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = _size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> node = last</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.item == element) &#123;</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">            &#125;</span><br><span class="line">            index--</span><br><span class="line">            node = node.prev</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回迭代器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回列表迭代器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">()</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedListIterator(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回从某个index开始的迭代器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">listIterator</span><span class="params">(index: <span class="type">Int</span>)</span></span>: MutableListIterator&lt;T&gt; &#123;</span><br><span class="line">        checkElementIndex(index, size)</span><br><span class="line">        <span class="keyword">return</span> LinkedListIterator(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回子列表</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">subList</span><span class="params">(fromIndex: <span class="type">Int</span>, toIndex: <span class="type">Int</span>)</span></span>: MutableList&lt;T&gt; &#123;</span><br><span class="line">        checkRangeIndexes(fromIndex, toIndex, size)</span><br><span class="line">        <span class="keyword">val</span> res = LinkedList&lt;T&gt;()</span><br><span class="line">        <span class="keyword">var</span> i = fromIndex</span><br><span class="line">        <span class="keyword">var</span> n = getNode(fromIndex)</span><br><span class="line">        <span class="keyword">while</span> (i &lt; toIndex) &#123;</span><br><span class="line">            res.add(n.item!!)</span><br><span class="line">            i++</span><br><span class="line">            n = n.next!!</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取链表长度</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = _size</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取首节点数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getFirst</span><span class="params">()</span></span>: T = first?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取尾节点数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getLast</span><span class="params">()</span></span>: T = last?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        first = last.also &#123;</span><br><span class="line">            last = first</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> n = first</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="literal">null</span>) &#123;</span><br><span class="line">            n.prev = n.next.also &#123;</span><br><span class="line">                n!!.next = n!!.prev</span><br><span class="line">            &#125;</span><br><span class="line">            n = n.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加首节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addFirst</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        linkedFirst(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addLast</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        linkedLast(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除首节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeFirst</span><span class="params">()</span></span>: T = unlinkFirst()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">removeLast</span><span class="params">()</span></span>: T = unlinkLast()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个节点</span></span><br><span class="line"><span class="comment">     * 判断1/2的size然后从左往右或者从右往左查找</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNode</span><span class="params">(index: <span class="type">Int</span>)</span></span>: Node&lt;T&gt; = <span class="keyword">if</span> (index &lt; (_size shr <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until index) &#123;</span><br><span class="line">            node = node?.next</span><br><span class="line">        &#125;</span><br><span class="line">        node!!</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = last</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> _size - <span class="number">2</span> downTo index) &#123;</span><br><span class="line">            node = node?.prev</span><br><span class="line">        &#125;</span><br><span class="line">        node!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接首节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedFirst</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> f = first</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, <span class="literal">null</span>, f)</span><br><span class="line">        first = nNode</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = nNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f.prev = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接到[node]节点前面</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedBefore</span><span class="params">(item: <span class="type">T</span>, node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> prev = node.prev</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, prev, node)</span><br><span class="line">        node.prev = nNode</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = nNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接尾节点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">linkedLast</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> l = last</span><br><span class="line">        <span class="keyword">val</span> nNode = Node(item, l, <span class="literal">null</span>)</span><br><span class="line">        last = nNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l.next = nNode</span><br><span class="line">        &#125;</span><br><span class="line">        _size++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解除首部连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlinkFirst</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> f = first ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        <span class="keyword">val</span> item = f.item</span><br><span class="line">        <span class="keyword">val</span> next = f.next</span><br><span class="line">        <span class="comment">// 快速GC</span></span><br><span class="line">        f.next = <span class="literal">null</span></span><br><span class="line">        f.item = <span class="literal">null</span></span><br><span class="line">        first = next</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> item!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解除尾部连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlinkLast</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> l = last ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        <span class="keyword">val</span> item = l.item</span><br><span class="line">        <span class="keyword">val</span> prev = l.prev</span><br><span class="line">        <span class="comment">// 快速GC</span></span><br><span class="line">        l.item = <span class="literal">null</span></span><br><span class="line">        l.prev = <span class="literal">null</span></span><br><span class="line">        last = prev</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> item!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解连接</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">unlink</span><span class="params">(node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">val</span> np = node.prev</span><br><span class="line">        <span class="keyword">val</span> nn = node.next</span><br><span class="line">        <span class="keyword">val</span> ne = node.item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (np == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = nn</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            np.next = nn</span><br><span class="line">            node.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nn == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = np</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nn.prev = np</span><br><span class="line">            node.next = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.item = <span class="literal">null</span></span><br><span class="line">        _size--</span><br><span class="line">        <span class="keyword">return</span> ne!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * " == " 方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(other: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (other === <span class="keyword">this</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> (other !<span class="keyword">is</span> List&lt;*&gt;) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderedEquals(<span class="keyword">this</span>, other)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash计算</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hashCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> = orderedHashCode(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转字符串方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">when</span> (_size) &#123;</span><br><span class="line">            <span class="number">0</span> -&gt; <span class="keyword">return</span> <span class="string">"[]"</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">                sb.append(<span class="string">"["</span>)</span><br><span class="line">                <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">                <span class="keyword">val</span> max = _size - <span class="number">1</span></span><br><span class="line">                <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">                    sb.append(it)</span><br><span class="line">                    <span class="keyword">if</span> (idx == max) <span class="keyword">return</span> sb.append(<span class="string">"]"</span>).toString()</span><br><span class="line">                    sb.append(<span class="string">", "</span>)</span><br><span class="line">                    idx++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">"]"</span>).toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 节点类</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">            <span class="keyword">var</span> item: T?,</span><br><span class="line">            <span class="keyword">var</span> prev: Node&lt;T&gt;? = <span class="literal">null</span>,</span><br><span class="line">            <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看element是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkElementIndex</span><span class="params">(index: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"index: <span class="variable">$index</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看位置是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkPositionIndex</span><span class="params">(index: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"index: <span class="variable">$index</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看范围是否合法</span></span><br><span class="line"><span class="comment">         *  */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkRangeIndexes</span><span class="params">(fromIndex: <span class="type">Int</span>, toIndex: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span> || toIndex &gt; size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"fromIndex: <span class="variable">$fromIndex</span>, toIndex: <span class="variable">$toIndex</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fromIndex &gt; toIndex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"fromIndex: <span class="variable">$fromIndex</span> &gt; toIndex: <span class="variable">$toIndex</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看边界是否合法</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkBoundsIndexes</span><span class="params">(startIndex: <span class="type">Int</span>, endIndex: <span class="type">Int</span>, size: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (startIndex &lt; <span class="number">0</span> || endIndex &gt; size) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IndexOutOfBoundsException(<span class="string">"startIndex: <span class="variable">$startIndex</span>, endIndex: <span class="variable">$endIndex</span>, size: <span class="variable">$size</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (startIndex &gt; endIndex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"startIndex: <span class="variable">$startIndex</span> &gt; endIndex: <span class="variable">$endIndex</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 哈希函数</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">orderedHashCode</span><span class="params">(c: <span class="type">Collection</span>&lt;*&gt;)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> hashCode = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> (e <span class="keyword">in</span> c) &#123;</span><br><span class="line">                hashCode = <span class="number">31</span> * hashCode + (e?.hashCode() ?: <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hashCode</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看是否相等</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">orderedEquals</span><span class="params">(c: <span class="type">Collection</span>&lt;*&gt;, other: <span class="type">Collection</span>&lt;*&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.size != other.size) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> otherIterator = other.iterator()</span><br><span class="line">            <span class="keyword">for</span> (elem <span class="keyword">in</span> c) &#123;</span><br><span class="line">                <span class="keyword">val</span> elemOther = otherIterator.next()</span><br><span class="line">                <span class="keyword">if</span> (elem != elemOther) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器类</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">open</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span></span>(</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">var</span> index: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) : MutableIterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">var</span> lastReturned: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">var</span> current: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            checkPositionIndex(index, _size)</span><br><span class="line">            current = <span class="keyword">if</span> (index == _size) <span class="literal">null</span> <span class="keyword">else</span> getNode(index)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否存在下一个节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = index &lt; _size</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一节点数据</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            lastReturned = current</span><br><span class="line">            current = current?.next</span><br><span class="line">            index++</span><br><span class="line">            <span class="keyword">return</span> lastReturned?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 删除当前节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> lastNext = lastReturned?.next</span><br><span class="line">            unlink(lastReturned ?: <span class="keyword">throw</span> IllegalStateException())</span><br><span class="line">            index--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表迭代器类</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">open</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListIterator</span></span>(</span><br><span class="line">        index: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) : LinkedIterator(</span><br><span class="line">        index</span><br><span class="line">    ), MutableListIterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否有上一节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasPrevious</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = index &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一节点游标</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextIndex</span><span class="params">()</span></span>: <span class="built_in">Int</span> = index</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回上一节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">previous</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasPrevious()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            current = <span class="keyword">if</span> (current == <span class="literal">null</span>) last <span class="keyword">else</span> current!!.prev</span><br><span class="line">            lastReturned = current</span><br><span class="line">            index--</span><br><span class="line">            <span class="keyword">return</span> lastReturned?.item ?: <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一节点游标</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">previousIndex</span><span class="params">()</span></span>: <span class="built_in">Int</span> = index - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">            lastReturned = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                linkedLast(element)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                linkedBefore(element, current!!)</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置节点</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> IllegalStateException()</span><br><span class="line">            current!!.item = element</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> ll = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>)</span><br><span class="line">        ll.add(i)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.reverse()</span><br><span class="line">    println(ll)</span><br><span class="line">    <span class="keyword">val</span> it = ll.listIterator()</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        print(<span class="string">"<span class="subst">$&#123;it.next()&#125;</span> "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    <span class="keyword">while</span> (it.hasPrevious()) &#123;</span><br><span class="line">        print(<span class="string">"<span class="subst">$&#123;it.previous()&#125;</span> "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    ll.addFirst(<span class="number">111</span>)</span><br><span class="line">    ll.addLast(<span class="number">222</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.removeFirst()</span><br><span class="line">    ll.removeLast()</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.removeAt(<span class="number">1</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.add(<span class="number">9</span>, <span class="number">114514</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    println(ll.size)</span><br><span class="line">    ll.clear()</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.addAll(listOf(<span class="number">1111</span>, <span class="number">2222</span>, <span class="number">3333</span>, <span class="number">4444</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.clear()</span><br><span class="line">    ll.addAll(<span class="number">0</span>, listOf(<span class="number">121</span>, <span class="number">222</span>, <span class="number">3445</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">    println(ll.getFirst())</span><br><span class="line">    println(ll.getLast())</span><br><span class="line">    ll.<span class="keyword">set</span>(<span class="number">2</span>, <span class="number">1000000</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.remove(<span class="number">121</span>)</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.removeAll(listOf(<span class="number">222</span>, <span class="number">1000000</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">    ll.addAll(listOf(<span class="number">1123</span>, <span class="number">1122</span>, <span class="number">2234</span>))</span><br><span class="line">    ll.retainAll(listOf(<span class="number">1123</span>))</span><br><span class="line">    println(ll)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200719124417501.png" alt="image-20200719124417501" title="">                </div>                <div class="image-caption">image-20200719124417501</div>            </figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据算法第四版和源码进行的链表实现，主要实现&lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt;接口和&lt;code&gt;MutableListIterator&amp;lt;T&amp;gt;&lt;/code&gt;迭代器
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(2)---简单计算器(加减乘除括号)</title>
    <link href="http://blog.fivezha.cn/2020/07/12/algorithm4-eval-int-arithmetic/"/>
    <id>http://blog.fivezha.cn/2020/07/12/algorithm4-eval-int-arithmetic/</id>
    <published>2020-07-12T07:51:45.000Z</published>
    <updated>2020-07-28T01:28:05.384Z</updated>
    
    <content type="html"><![CDATA[<p>中缀表达式转后缀表达式，计算后缀表达式实现的加减乘除括号计算器。<a id="more"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>中缀表达式转后缀表达式，计算后缀表达式。</p><h4 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h4><ul><li>数字<ul><li>直接添加到结果</li></ul></li><li>非数字<ul><li>” ）“，依次弹栈添加到结果直到“（ ”(左括号也弹栈)</li><li>“（ “直接压栈，不用管</li><li>判断是否低于栈顶符号，大于直接入栈，等于先弹栈再入栈，低于直接弹栈到<strong>字符优先级高于栈顶符号</strong>或者<strong>左括号或空栈</strong></li></ul></li></ul><h4 id="后缀计算"><a href="#后缀计算" class="headerlink" title="后缀计算"></a>后缀计算</h4><ul><li>数字<ul><li>入栈</li></ul></li><li>非数字<ul><li>根据字符进行两次出栈操作然后计算完再入栈</li></ul></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="中缀转后缀-1"><a href="#中缀转后缀-1" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优先级</span></span><br><span class="line"><span class="comment"> * 加减优先级最低</span></span><br><span class="line"><span class="comment"> * 然后就是乘除</span></span><br><span class="line"><span class="comment"> * 括号优先级最高</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">val</span> priority = HashMap&lt;String, <span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">    put(<span class="string">"+"</span>, <span class="number">0</span>)</span><br><span class="line">    put(<span class="string">"-"</span>, <span class="number">0</span>)</span><br><span class="line">    put(<span class="string">"*"</span>, <span class="number">1</span>)</span><br><span class="line">    put(<span class="string">"/"</span>, <span class="number">1</span>)</span><br><span class="line">    put(<span class="string">"("</span>, <span class="number">2</span>)</span><br><span class="line">    put(<span class="string">")"</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中缀转后缀</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">infixToPostfix</span><span class="params">(expr: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">    <span class="keyword">val</span> s = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line"></span><br><span class="line">    expr.forEach &#123; c: <span class="built_in">Char</span> -&gt;</span><br><span class="line">        <span class="keyword">when</span> (c) &#123;</span><br><span class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span> -&gt; sb.append(c)</span><br><span class="line">            <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (!s.isEmpty()</span><br><span class="line">                    &amp;&amp; s.peek() != <span class="string">'('</span></span><br><span class="line">                    &amp;&amp; priority[c.toString()]!! &lt;= priority[s.peek().toString()]!!</span><br><span class="line">                ) &#123;</span><br><span class="line">                    sb.append(s.pop())</span><br><span class="line">                &#125;</span><br><span class="line">                s.push(c)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'('</span> -&gt; s.push(c)</span><br><span class="line">            <span class="string">')'</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (!s.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.peek() == <span class="string">'('</span>) &#123;</span><br><span class="line">                        s.pop()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sb.append(s.pop())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> UnsupportedOperationException(<span class="string">"未知字符!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.isEmpty()) &#123;</span><br><span class="line">        sb.append(s.pop())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算后缀"><a href="#计算后缀" class="headerlink" title="计算后缀"></a>计算后缀</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算后缀表达式</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">evalPostfix</span><span class="params">(expr: <span class="type">String</span>)</span></span>: <span class="built_in">Double</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> s = Stack&lt;<span class="built_in">Double</span>&gt;()</span><br><span class="line">    expr.forEach &#123; c: <span class="built_in">Char</span> -&gt;</span><br><span class="line">        <span class="keyword">when</span> (c) &#123;</span><br><span class="line">            <span class="string">'+'</span> -&gt; s.pop().plus(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="string">'-'</span> -&gt; s.pop().minus(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="string">'*'</span> -&gt; s.pop().times(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="string">'/'</span> -&gt; s.pop().div(s.pop()).let &#123; s.push(it) &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; s.push(Character.getNumericValue(c).toDouble())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (s.isEmpty()) <span class="number">0.0</span> <span class="keyword">else</span> s.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 四则运算(带括号)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">evalIntArithmetic</span><span class="params">(expr: <span class="type">String</span>)</span></span>: <span class="built_in">Double</span> =</span><br><span class="line">    evalPostfix(infixToPostfix(expr.trim().replace(<span class="string">" "</span>, <span class="string">""</span>)))</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fundamentals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.evalIntArithmetic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(evalIntArithmetic(<span class="string">""</span>))</span><br><span class="line">    println(evalIntArithmetic(<span class="string">" 1 + 2"</span>))</span><br><span class="line">    println(evalIntArithmetic(<span class="string">"1+2*3+(4*5+6)*7"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200712185745469.png" alt="image-20200712185745469" title="">                </div>                <div class="image-caption">image-20200712185745469</div>            </figure><p>验算：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/image-20200712185812495.png" alt="image-20200712185812495" title="">                </div>                <div class="image-caption">image-20200712185812495</div>            </figure><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p><a href="https://github.com/xmmmmmovo/Algorithms4thKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中缀表达式转后缀表达式，计算后缀表达式实现的加减乘除括号计算器。
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法(第四版)笔记(1)---简单类的实现</title>
    <link href="http://blog.fivezha.cn/2020/07/11/algorithm4th-1/"/>
    <id>http://blog.fivezha.cn/2020/07/11/algorithm4th-1/</id>
    <published>2020-07-11T14:40:50.000Z</published>
    <updated>2020-07-28T01:28:05.388Z</updated>
    
    <content type="html"><![CDATA[<p>算法第四版第一章节<a id="more"></a></p><h2 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./pics/image-20200711224750298.png" alt="image-20200711224750298" title="">                </div>                <div class="image-caption">image-20200711224750298</div>            </figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.math.sqrt</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 累加器 防抖动版本</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> total: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> times: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mean: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> s: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">addDataValue</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> dv = value.toDouble()</span><br><span class="line">        total += dv</span><br><span class="line"></span><br><span class="line">        s += <span class="number">1.0</span> * (times - <span class="number">1</span>) / times * (dv - mean) * (dv - mean)</span><br><span class="line">        mean += (dv - mean) / times</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mean</span><span class="params">()</span></span>: <span class="built_in">Double</span> = mean</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">variance</span><span class="params">()</span></span>: <span class="built_in">Double</span> = <span class="keyword">if</span> (times &lt;= <span class="number">1</span>) <span class="built_in">Double</span>.NaN <span class="keyword">else</span> s / (times - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stddev</span><span class="params">()</span></span>: <span class="built_in">Double</span> = sqrt(variance())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">total</span><span class="params">()</span></span>: <span class="built_in">Double</span> = total</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mean (<span class="variable">$times</span> times, <span class="subst">$&#123;String.format(<span class="string">"%.2f"</span>, total)&#125;</span> values): "</span> +</span><br><span class="line">                <span class="string">"<span class="subst">$&#123;String.format(<span class="string">"%7.5f"</span>, mean())&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视化累加器"><a href="#可视化累加器" class="headerlink" title="可视化累加器"></a>可视化累加器</h2><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./pics/image-20200711224928831.png" alt="image-20200711224928831" title="">                </div>                <div class="image-caption">image-20200711224928831</div>            </figure><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdDraw</span><br><span class="line"><span class="keyword">import</span> kotlin.math.sqrt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisualAccumulator</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> xMax: <span class="built_in">Int</span> = <span class="number">100</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> yMax: <span class="built_in">Double</span> = <span class="number">100.0</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> times: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> total: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mean: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> s: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        StdDraw.setXscale(<span class="number">0.0</span>, xMax.toDouble())</span><br><span class="line">        StdDraw.setYscale(<span class="number">0.0</span>, yMax)</span><br><span class="line">        StdDraw.setPenRadius(.<span class="number">01</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">addDataValue</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> dv = value.toDouble()</span><br><span class="line">        total += dv</span><br><span class="line"></span><br><span class="line">        mean += (dv - mean) / times</span><br><span class="line">        s += <span class="number">1.0</span> * (times - <span class="number">1</span>) / times * (dv - mean) * (dv - mean)</span><br><span class="line"></span><br><span class="line">        StdDraw.setPenColor(StdDraw.DARK_GRAY)</span><br><span class="line">        StdDraw.point(times.toDouble(), value.toDouble())</span><br><span class="line">        StdDraw.setPenColor(StdDraw.RED)</span><br><span class="line">        StdDraw.point(times.toDouble(), mean())</span><br><span class="line">        StdDraw.setPenColor(StdDraw.BLUE)</span><br><span class="line">        StdDraw.point(times.toDouble(), stddev())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">mean</span><span class="params">()</span></span>: <span class="built_in">Double</span> = mean</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">variance</span><span class="params">()</span></span>: <span class="built_in">Double</span> = <span class="keyword">if</span> (times &lt;= <span class="number">1</span>) <span class="number">0.0</span> <span class="keyword">else</span> s / (times - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stddev</span><span class="params">()</span></span>: <span class="built_in">Double</span> = sqrt(variance())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">total</span><span class="params">()</span></span>: <span class="built_in">Double</span> = total</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mean (<span class="variable">$times</span> times, <span class="subst">$&#123;String.format(<span class="string">"%.2f"</span>, total)&#125;</span> values): "</span> +</span><br><span class="line">                <span class="string">"<span class="subst">$&#123;String.format(<span class="string">"%7.5f"</span>, mean())&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./pics/image-20200711225013771.png" alt="image-20200711225013771" title="">                </div>                <div class="image-caption">image-20200711225013771</div>            </figure><h2 id="有理数"><a href="#有理数" class="headerlink" title="有理数"></a>有理数</h2><h3 id="API-2"><a href="#API-2" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./pics/image-20200711225149973.png" alt="image-20200711225149973" title="">                </div>                <div class="image-caption">image-20200711225149973</div>            </figure><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.qgcd</span><br><span class="line"><span class="keyword">import</span> kotlin.reflect.typeOf</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> numerator: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> denominator: <span class="built_in">Long</span> = <span class="number">1L</span></span><br><span class="line">) : Comparable&lt;Rational&gt; &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (denominator == <span class="number">0L</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalAccessError(<span class="string">"分母不能为0!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        simplify()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">numerator</span><span class="params">()</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numerator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">denominator</span><span class="params">()</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> denominator</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simplify</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> g = qgcd(numerator, denominator)</span><br><span class="line">        numerator /= g</span><br><span class="line">        denominator /= g</span><br><span class="line">        <span class="keyword">if</span> (denominator &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            denominator = -denominator</span><br><span class="line">            numerator = -numerator</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.numerator == <span class="number">0L</span>) <span class="keyword">return</span> other</span><br><span class="line">        <span class="keyword">if</span> (other.numerator == <span class="number">0L</span>) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">val</span> g = qgcd(<span class="keyword">this</span>.denominator, other.denominator)</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * (other.denominator / g) + other.numerator * (<span class="keyword">this</span>.denominator / g),</span><br><span class="line">            <span class="keyword">this</span>.denominator * (other.denominator / g)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">minus</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.numerator == <span class="number">0L</span>) <span class="keyword">return</span> other</span><br><span class="line">        <span class="keyword">if</span> (other.numerator == <span class="number">0L</span>) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> g = qgcd(<span class="keyword">this</span>.denominator, other.denominator)</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * (other.denominator / g) - other.numerator * (<span class="keyword">this</span>.denominator / g),</span><br><span class="line">            <span class="keyword">this</span>.denominator * (other.denominator / g)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">times</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * other.numerator,</span><br><span class="line">            <span class="keyword">this</span>.denominator * other.denominator</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">div</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: Rational &#123;</span><br><span class="line">        <span class="keyword">return</span> Rational(</span><br><span class="line">            <span class="keyword">this</span>.numerator * other.denominator,</span><br><span class="line">            <span class="keyword">this</span>.denominator * other.numerator</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(other: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (other == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>::<span class="class"><span class="keyword">class</span> != <span class="title">other</span>:<span class="type">:class) return false</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.compareTo(other <span class="keyword">as</span> Rational) == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">if</span> (denominator == <span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="variable">$numerator</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="variable">$numerator</span>/<span class="variable">$denominator</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">Rational</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 除法判断大小于</span></span><br><span class="line">        <span class="keyword">val</span> num = <span class="keyword">this</span>.numerator * other.denominator</span><br><span class="line">        <span class="keyword">val</span> den = <span class="keyword">this</span>.denominator * other.numerator</span><br><span class="line">        <span class="keyword">if</span> (num &gt; den)</span><br><span class="line">        <span class="comment">// 说明分子大 当前数大</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (num &lt; den)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> : <span class="type">Comparable</span>&lt;<span class="type">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> year: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> month: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> day: <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        y: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        m: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        d: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDateValid(d, m, y))</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入日期错误!"</span>)</span><br><span class="line">        year = y</span><br><span class="line">        month = m</span><br><span class="line">        day = d</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        parseString: String</span><br><span class="line">    ) &#123;</span><br><span class="line">        parseString.split(<span class="string">"/"</span>).run &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入日期错误！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            year = <span class="keyword">get</span>(<span class="number">0</span>).toInt()</span><br><span class="line">            month = <span class="keyword">get</span>(<span class="number">1</span>).toInt()</span><br><span class="line">            day = <span class="keyword">get</span>(<span class="number">2</span>).toInt()</span><br><span class="line">            <span class="keyword">if</span> (!isDateValid(day, month, year))</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入日期错误！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> monthDayList = listOf(<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isDateValid</span><span class="params">(d: <span class="type">Int</span>, m: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">12</span> || m &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d &gt; monthDayList[m] || d &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">2</span> &amp;&amp; d == <span class="number">29</span> &amp;&amp; !isLeapYear(y)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is y a leap year?</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isLeapYear</span><span class="params">(y: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y % <span class="number">400</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span> (y % <span class="number">100</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> y % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">year</span><span class="params">()</span></span> = year</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">month</span><span class="params">()</span></span> = month</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">day</span><span class="params">()</span></span> = day</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">Date</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.year &lt; other.year)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.year &gt; other.year)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.month &lt; other.month)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.month &gt; other.month)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.day &lt; other.day)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.day &gt; other.day)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="variable">$year</span>/<span class="variable">$month</span>/<span class="variable">$day</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hashCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day + <span class="number">31</span> * month + <span class="number">31</span> * <span class="number">12</span> * year</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="账单"><a href="#账单" class="headerlink" title="账单"></a>账单</h2><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> : <span class="type">Comparable</span>&lt;<span class="type">Transaction</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> who: String</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> time: Date</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> amount: <span class="built_in">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        w: String,</span><br><span class="line">        t: Date,</span><br><span class="line">        a: <span class="built_in">Double</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAmountValid(a))</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入金额格式错误!"</span>)</span><br><span class="line">        who = w</span><br><span class="line">        time = t</span><br><span class="line">        amount = a</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        parseString: String</span><br><span class="line">    ) &#123;</span><br><span class="line">        parseString.split(<span class="string">" "</span>).run &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入格式错误！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            who = <span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line">            time = Date(<span class="keyword">get</span>(<span class="number">1</span>))</span><br><span class="line">            amount = <span class="keyword">get</span>(<span class="number">2</span>).toDouble()</span><br><span class="line">            <span class="keyword">if</span> (!isAmountValid(amount))</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"输入金额错误！"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">who</span><span class="params">()</span></span> = who</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">time</span><span class="params">()</span></span> = time</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">amount</span><span class="params">()</span></span> = amount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isAmountValid</span><span class="params">(amount: <span class="type">Double</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="built_in">Double</span>.NaN == amount ||</span><br><span class="line">            <span class="built_in">Double</span>.NEGATIVE_INFINITY == amount ||</span><br><span class="line">            <span class="built_in">Double</span>.POSITIVE_INFINITY == amount</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">Transaction</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareValues(<span class="keyword">this</span>.amount, other.amount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%-10s %10s %8.2f"</span>, who, time, amount)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">binarySearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, key: <span class="type">T</span>, lo: <span class="type">Int</span> = <span class="number">0</span>, hi: <span class="type">Int</span> = list.size - <span class="number">1</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lo = lo</span><br><span class="line">    <span class="keyword">var</span> hi = hi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">val</span> mid = lo + (hi - lo) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            key &lt; list[mid] -&gt; &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            key &gt; list[mid] -&gt; &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><h3 id="普通GCD"><a href="#普通GCD" class="headerlink" title="普通GCD"></a>普通GCD</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通gcd模板</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">gcd</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> b.toLong()</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a.toLong()</span><br><span class="line">    <span class="keyword">var</span> ta = abs(a.toLong())</span><br><span class="line">    <span class="keyword">var</span> tb = abs(b.toLong())</span><br><span class="line">    <span class="keyword">while</span> (tb != <span class="number">0L</span>) &#123;</span><br><span class="line">        ta = tb.also &#123;</span><br><span class="line">            tb = ta % tb</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ta</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速GCD"><a href="#快速GCD" class="headerlink" title="快速GCD"></a>快速GCD</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速gcd模板</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">qgcd_</span><span class="params">(a: <span class="type">Long</span>, b: <span class="type">Long</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0L</span>) <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0L</span>) <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((a and <span class="number">1</span>) == <span class="number">0L</span> &amp;&amp; (b and <span class="number">1</span>) == <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> qgcd_(a shr <span class="number">1</span>, b shr <span class="number">1</span>) shl <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((b and <span class="number">1</span>) == <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> qgcd_(a, b shr <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((a and <span class="number">1</span>) == <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> qgcd_(a shr <span class="number">1</span>, b)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> qgcd_(abs(a - b), min(a, b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">qgcd</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> b.toLong()</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a.toLong()</span><br><span class="line">    <span class="keyword">var</span> ta = a.toLong()</span><br><span class="line">    <span class="keyword">var</span> tb = b.toLong()</span><br><span class="line">    <span class="keyword">return</span> qgcd_(abs(ta), abs(tb))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h3 id="API-3"><a href="#API-3" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./pics/image-20200711225738407.png" alt="image-20200711225738407" title="">                </div>                <div class="image-caption">image-20200711225738407</div>            </figure><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.NoSuchElementException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span>&lt;<span class="type">T</span>&gt; : <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> n: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = first == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span> = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> oi = first</span><br><span class="line">        first = Node(</span><br><span class="line">            item,</span><br><span class="line">            oi</span><br><span class="line">        )</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator&lt;T&gt;(first)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">val</span> item: T,</span><br><span class="line">        <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;?</span><br><span class="line">    ) : Iterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> UnsupportedOperationException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> item = current?.item</span><br><span class="line">            current = current?.next</span><br><span class="line">            <span class="keyword">return</span> item!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="API-4"><a href="#API-4" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./pics/image-20200711225952602.png" alt="image-20200711225952602" title="">                </div>                <div class="image-caption">image-20200711225952602</div>            </figure><h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="type">T</span>&gt; : <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> n: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = first == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span> = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> oi = first</span><br><span class="line">        first = Node(</span><br><span class="line">            item,</span><br><span class="line">            oi</span><br><span class="line">        )</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item.also &#123;</span><br><span class="line">            first = first?.next</span><br><span class="line">            n--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder().also &#123;</span><br><span class="line">            <span class="keyword">this</span>.forEach &#123; item -&gt; it.append(<span class="string">"<span class="variable">$item</span> "</span>) &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator(first)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">val</span> item: T,</span><br><span class="line">        <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;?</span><br><span class="line">    ) : Iterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> UnsupportedOperationException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> item = current?.item</span><br><span class="line">            current = current?.next</span><br><span class="line">            <span class="keyword">return</span> item!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="API-5"><a href="#API-5" class="headerlink" title="API"></a>API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./pics/image-20200711230035937.png" alt="image-20200711230035937" title="">                </div>                <div class="image-caption">image-20200711230035937</div>            </figure><h3 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ds</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="type">T</span>&gt; : <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> first: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> last: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> n: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = first == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span> = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(item: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> ol = last</span><br><span class="line">        last = Node(</span><br><span class="line">            item,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            first = last</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ol?.next = last</span><br><span class="line">        &#125;</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">dequeue</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item.also &#123;</span><br><span class="line">            first = first?.next</span><br><span class="line">            n--</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                last = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> NoSuchElementException(<span class="string">"Stack underflow"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first?.item</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder().also &#123;</span><br><span class="line">            <span class="keyword">this</span>.forEach &#123; item -&gt; it.append(<span class="string">"<span class="variable">$item</span> "</span>) &#125;</span><br><span class="line">        &#125;.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> LinkedIterator(first)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">val</span> item: T,</span><br><span class="line">        <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> current: Node&lt;T&gt;?</span><br><span class="line">    ) : Iterator&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> UnsupportedOperationException()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: T &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> NoSuchElementException()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> item = current?.item</span><br><span class="line">            current = current?.next</span><br><span class="line">            <span class="keyword">return</span> item!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h2><h3 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 括号是否匹配</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isBanlanced</span><span class="params">(expr: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> s = Stack&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line"></span><br><span class="line">    expr.forEach &#123; c: <span class="built_in">Char</span> -&gt;</span><br><span class="line">        <span class="keyword">when</span> (c) &#123;</span><br><span class="line">            <span class="string">'('</span>, <span class="string">'&#123;'</span>, <span class="string">'['</span> -&gt; s.push(c)</span><br><span class="line">            <span class="string">')'</span> -&gt; <span class="keyword">if</span> (s.isEmpty() || s.pop() != <span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="string">']'</span> -&gt; <span class="keyword">if</span> (s.isEmpty() || s.pop() != <span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="string">'&#125;'</span> -&gt; <span class="keyword">if</span> (s.isEmpty() || s.pop() != <span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/xmmmmmovo/Algorithms4thKotlinSolutions" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法第四版第一章节
    
    </summary>
    
    
      <category term="algorithm4" scheme="http://blog.fivezha.cn/categories/algorithm4/"/>
    
    
      <category term="kotlin" scheme="http://blog.fivezha.cn/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>线性动画/非线性动画</title>
    <link href="http://blog.fivezha.cn/2020/05/01/linear-anime/"/>
    <id>http://blog.fivezha.cn/2020/05/01/linear-anime/</id>
    <published>2020-05-01T13:34:56.000Z</published>
    <updated>2020-07-28T01:28:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>起因是因为今天看到b站上有自媒体评测 <code>MIUI12</code> , 说到了动画流畅度那方面弹幕都说线性动画非线性动画什么的, 其实很早之前 <code>MUI</code> 就是全线采用非线性动画了, 但这个线性与非线性又是什么, 有什么区别呢, 我今天就稍微来讲一下.<br>其实这个高中就学习过了, 不过因为最近学习了js, 可以更加明确的展示出来了.<a id="more"></a></p><h2 id="什么是线性动画-非线性动画"><a href="#什么是线性动画-非线性动画" class="headerlink" title="什么是线性动画/非线性动画"></a>什么是线性动画/非线性动画</h2><p>要理解这个, 首先需要理解一个问题: *<em>什么是动画? *</em> </p><h3 id="什么是动画"><a href="#什么是动画" class="headerlink" title="什么是动画?"></a>什么是动画?</h3><p>根据 <strong>维基百科</strong> 所叙述的: </p><blockquote><p><strong>动画</strong>是指由许多<a href="https://zh.wikipedia.org/wiki/%E5%B8%A7" target="_blank" rel="noopener">帧</a>静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因<a href="https://zh.wikipedia.org/wiki/%E8%A7%86%E8%A7%89%E6%AE%8B%E8%B1%A1" target="_blank" rel="noopener">视觉残象</a>产生<a href="https://zh.wikipedia.org/wiki/%E9%8C%AF%E8%A6%BA" target="_blank" rel="noopener">错觉</a>，而误以为画面活动的作品。</p></blockquote><p>可以了解到, 动画, 其实就是很多静止的画面利用视觉残留现象做出来的可动的效果, 所以说如果想要模仿动画的效果, 只需要在1s内对一张图片更替一定的量的次数, 人眼就不会看出是否对这张图片进行了更替, 这, 其实就是 <strong>帧</strong> .<br>同时,并不是所有的 <strong>帧</strong> 都是会更改的, 有些帧完全就是不会变化的, 这就引出了 <strong>关键帧</strong> 的概念, 我们只需要着重关注于关键更改了图象的 <strong>帧</strong> 即可, 并不需要关注其他状态的 <strong>静止帧</strong> .<br>本次编程实践也是只针对于关键帧处理的.</p><h3 id="什么是非线性动画"><a href="#什么是非线性动画" class="headerlink" title="什么是非线性动画"></a>什么是非线性动画</h3><p>在 <code>Maya</code> 用户指南上有这么一句话:</p><blockquote><p><em>在 Maya 中，有两种类型的片段：源片段和常规剪辑。Maya 通过将角色的原始动画曲线保存在源片段中，来保留及保存角色原始动画曲线<em>。请勿使用源片段<em>为角色设置动画。但是，您可以使用源片段（称为_常规片段_）的副本或_实例_以非线性方式为角色设置动画。请参见<a href="https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2015/CHS/Maya/files/GUID-D462A79C-A766-43DD-BB43-5BCDAEC5D8BD-htm.html#GUID-D462A79C-A766-43DD-BB43-5BCDAEC5D8BD__WS17956D7ADBC6E736B6BA507117AE308213-7FF6" target="_blank" rel="noopener">动画片段</a>。</em></em></em></p><p>__非线性动画的基础是，移动、操纵和混合常规片段，从而为角色生成一系列平滑的动作<em>。<br>_</em>&gt; </p></blockquote><p>看上去很高级, 说白了其实就是动画的关键帧停留位置(时段), 也就是说, 非线性的关键帧所停留的并不是处于常见规律中的, 他可能是遵循二次函数, 遵循震荡函数, 总之, 其规律一定不是线性规律(一次函数).</p><h3 id="什么是线性动画"><a href="#什么是线性动画" class="headerlink" title="什么是线性动画"></a>什么是线性动画</h3><p>所以, 线性动画就很容易理解了, 所有关键帧停留位置其实都是处在一条线中的, 其导数永远是常数.</p><h2 id="线性动画-非线性动画有什么用"><a href="#线性动画-非线性动画有什么用" class="headerlink" title="线性动画/非线性动画有什么用"></a>线性动画/非线性动画有什么用</h2><p>那么, 非线性动画又有着什么样的特殊用途呢?<br>很简单的, 应用在手机上, 这会让你的动画感觉更有动感, 更加精致, 不会像是线性动画那样, 一板一眼.<br>比如 <code>IOS</code> 一直都是非线性动画, 给人的感受就非常的丝滑.<br>而早年间的 <code>Android</code> 动画都是线性动画, 给人的感觉就像是机械一般的精密但刻板. </p><h2 id="简单的线性动画-点击图片看动画"><a href="#简单的线性动画-点击图片看动画" class="headerlink" title="简单的线性动画(点击图片看动画):"></a>简单的线性动画(点击图片看动画):</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/1588320557603-83ac95ee-be22-4c90-8b6d-67819c6439bc.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="ExVwZpd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="线性动画">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/ExVwZpd" target="_blank" rel="noopener">  线性动画</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="简单的非线性-点击图片看动画"><a href="#简单的非线性-点击图片看动画" class="headerlink" title="简单的非线性(点击图片看动画):"></a>简单的非线性(点击图片看动画):</h2><h3 id="圆弧非线性"><a href="#圆弧非线性" class="headerlink" title="圆弧非线性"></a>圆弧非线性</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/1588320756761-3d5a0233-e333-4fdb-a2a2-38aabfc5d443.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="gOaGmpg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="加速非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/gOaGmpg" target="_blank" rel="noopener">  加速非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="加减速非线性"><a href="#加减速非线性" class="headerlink" title="加减速非线性"></a>加减速非线性</h3><p>先加速再减速, 二次函数</p><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="eYpGvYP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="二次非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/eYpGvYP" target="_blank" rel="noopener">  二次非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="碰撞反弹"><a href="#碰撞反弹" class="headerlink" title="碰撞反弹"></a>碰撞反弹</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pics/1588320853246-0a0dc7da-a845-4b4d-9280-6ada3d2c2370.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>如果在开始时有动画效果，比如弹跳 —— 那么它将在最后显示。<br>上图中常规弹跳为红色，easeOut 弹跳为蓝色。</p><ul><li>常规弹跳 —— 物体在底部弹跳，然后突然跳到顶部。</li><li><code>easeOut</code> 变换之后 —— 物体跳到顶部之后，在那里弹跳。</li></ul><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="xmmmmmovo" data-slug-hash="RwWZdeW" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="碰撞非线性">  <span>See the Pen <a href="https://codepen.io/xmmmmmovo/pen/RwWZdeW" target="_blank" rel="noopener">  碰撞非线性</a> by  !输认不永DGL (<a href="https://codepen.io/xmmmmmovo" target="_blank" rel="noopener">@xmmmmmovo</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果理论看不懂, 那大概看例子也能领会了, 有些东西,  不知道是不是我语文太差的缘故, 理论实在是难以形容, 但是当实际例子展示出来了之后, 就会发现, 其实这个还是很容易理解/看出来的嘛.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因是因为今天看到b站上有自媒体评测 &lt;code&gt;MIUI12&lt;/code&gt; , 说到了动画流畅度那方面弹幕都说线性动画非线性动画什么的, 其实很早之前 &lt;code&gt;MUI&lt;/code&gt; 就是全线采用非线性动画了, 但这个线性与非线性又是什么, 有什么区别呢, 我今天就稍微来讲一下.&lt;br&gt;其实这个高中就学习过了, 不过因为最近学习了js, 可以更加明确的展示出来了.
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="animation" scheme="http://blog.fivezha.cn/tags/animation/"/>
    
      <category term="javascript" scheme="http://blog.fivezha.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>网络编程笔记(2)---UDP与分包协议</title>
    <link href="http://blog.fivezha.cn/2020/04/29/socket-program-2/"/>
    <id>http://blog.fivezha.cn/2020/04/29/socket-program-2/</id>
    <published>2020-04-29T12:39:32.000Z</published>
    <updated>2020-07-28T01:28:05.416Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是在<code>Linux</code>环境下编写<code>socket</code>程序，本次实现简单UDP<code>echo server</code>和<code>echo client</code>，包含简单分包操作和协议设计<a id="more"></a></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>用户数据报协议, 不会存在ACK应答消息, 类似于广播的无连接传输层协议.<br>就是说UDP仅需要一个套接字便可以与多台主机通信.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588175417340-add4bff5-70e3-487a-a985-a785d128e7c2.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h3 id="基于UDP的I-O函数"><a href="#基于UDP的I-O函数" class="headerlink" title="基于UDP的I/O函数"></a>基于UDP的I/O函数</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588175460188-704393eb-505a-46e0-9693-ab613526a06a.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588175608463-c92bd247-7809-410b-a810-295798fcfd22.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h3 id="实现基于UDP的Echo服务器"><a href="#实现基于UDP的Echo服务器" class="headerlink" title="实现基于UDP的Echo服务器"></a>实现基于UDP的Echo服务器</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588254306045-87a9f7ec-9523-4eb3-afe2-5ca4deba9b2f.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//constexpr int BUF_SIZE = 256;</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;port&gt; \n"</span>, argv[ <span class="number">0</span> ]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    sockaddr_in sockAddr&#123;&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;sockAddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(sockAddr));</span><br><span class="line">    sockAddr.sin_family      = AF_INET;</span><br><span class="line">    sockAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    sockAddr.sin_port        = htons(atoi(argv[ <span class="number">1</span> ]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == bind(sock, (struct sockaddr *) &amp;sockAddr, <span class="keyword">sizeof</span>(sockAddr))) &#123;</span><br><span class="line">        error_handler(<span class="string">"bind() error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sockaddr_in clntAddr&#123;&#125;;</span><br><span class="line">    <span class="keyword">socklen_t</span>   clntAddrLen = <span class="keyword">sizeof</span>(clntAddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[ <span class="number">512</span> ];</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> recv_len = recvfrom(sock, buf, BUF_SIZE, <span class="number">0</span>, (struct sockaddr *) &amp;clntAddr, &amp;clntAddrLen);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"recv len = %d\n"</span>, recv_len);</span><br><span class="line">        sendto(sock, buf, recv_len, <span class="number">0</span>, (struct sockaddr *) &amp;clntAddr, <span class="keyword">sizeof</span>(clntAddr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//constexpr int BUF_SIZE = 256;</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InetAddress</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">InetAddress</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> port, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> ip = <span class="string">""</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;addr_, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr_));</span><br><span class="line">        addr_.sin_family = AF_INET;</span><br><span class="line">        addr_.sin_port   = htons(atoi(port.c_str()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="string">""</span>)</span><br><span class="line">            addr_.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            addr_.sin_addr.s_addr = inet_addr(ip.c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~InetAddress() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">sockaddr_in &amp;<span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr_</span> &#123;</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Socket</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Socket</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        fd_ = socket(PF_INET, type, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Socket() &#123;</span><br><span class="line">        close(fd_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">ssize_t</span> <span class="title">sendto</span><span class="params">(InetAddress &amp;addr, <span class="keyword">void</span> *pData, <span class="keyword">size_t</span> nBytes)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        sockaddr *toAddr  = (sockaddr *) &amp;(addr.getAddr());</span><br><span class="line">        <span class="keyword">socklen_t</span> addrLen = <span class="keyword">sizeof</span>(addr.getAddr());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ::sendto(fd_, pData, nBytes, <span class="number">0</span>, toAddr, addrLen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(InetAddress &amp;addr, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nBytes)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ::recvfrom(fd_, buf, nBytes, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> fd_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;ip&gt; &lt;port&gt; \n"</span>, argv[ <span class="number">0</span> ]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Socket <span class="title">sock</span><span class="params">(SOCK_DGRAM)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">InetAddress <span class="title">addr</span><span class="params">(argv[ <span class="number">2</span> ], argv[ <span class="number">1</span> ])</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[ <span class="number">1024</span> ];</span><br><span class="line">    <span class="keyword">int</span>  sl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        fgets(buf + <span class="number">3</span>, <span class="keyword">sizeof</span>(buf) - <span class="number">3</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        sl = <span class="built_in">strlen</span>(buf + <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str len = %d\n"</span>, sl);</span><br><span class="line">        <span class="keyword">if</span> (sl &lt; BUF_SIZE - <span class="number">3</span>) &#123;</span><br><span class="line">            buf[ <span class="number">1</span> ]     = (<span class="keyword">char</span>) <span class="number">1</span>;</span><br><span class="line">            buf[ <span class="number">2</span> ]     = (<span class="keyword">char</span>) sl;</span><br><span class="line">            <span class="keyword">int</span> send_len = sock.sendto(addr, buf + <span class="number">1</span>, sl + <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"send len = %d\n"</span>, send_len);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pack_num = <span class="built_in">ceil</span>((<span class="keyword">double</span>) sl / (BUF_SIZE - <span class="number">3</span>));</span><br><span class="line">            buf[ <span class="number">0</span> ] = (<span class="keyword">char</span>) <span class="number">0</span>;</span><br><span class="line">            buf[ <span class="number">1</span> ] = (<span class="keyword">char</span>) pack_num;</span><br><span class="line">            sock.sendto(addr, buf, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pack_num; ++i) &#123;</span><br><span class="line">                st            = i * (BUF_SIZE - <span class="number">3</span>);</span><br><span class="line">                buf[ st ]     = (<span class="keyword">char</span>) <span class="number">2</span>;</span><br><span class="line">                buf[ st + <span class="number">1</span> ] = (<span class="keyword">char</span>) (i + <span class="number">1</span>);</span><br><span class="line">                buf[ st + <span class="number">2</span> ] = i == pack_num - <span class="number">1</span> ? <span class="built_in">strlen</span>(buf + st + <span class="number">3</span>) : BUF_SIZE - <span class="number">3</span>;</span><br><span class="line">                sock.sendto(addr, buf + st, BUF_SIZE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> recv_len = sock.recvfrom(addr, buf, BUF_SIZE);</span><br><span class="line">        buf[ recv_len ] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf[ <span class="number">0</span> ] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Message from server: %s\n"</span>, buf + <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (buf[ <span class="number">0</span> ] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 数据包获取</span></span><br><span class="line">            <span class="keyword">int</span>  pack_num = (<span class="keyword">int</span>) buf[ <span class="number">1</span> ];</span><br><span class="line">            <span class="keyword">int</span>  cnt      = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span> pc_buf[ BUF_SIZE ];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pack_num; ++i) &#123;</span><br><span class="line">                recv_len = sock.recvfrom(addr, pc_buf, BUF_SIZE);</span><br><span class="line">                <span class="built_in">std</span>::copy(pc_buf + <span class="number">3</span>, pc_buf + recv_len, buf + cnt);</span><br><span class="line">                cnt += (<span class="keyword">int</span>) pc_buf[ <span class="number">2</span> ];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Message from server: %s\n"</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>client</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1589817412488-c00d1ea9-1c9b-4a72-8659-90660f28e957.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>server</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1589817429806-44055c2e-235d-4d11-b053-d0d8d0b4c371.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是在&lt;code&gt;Linux&lt;/code&gt;环境下编写&lt;code&gt;socket&lt;/code&gt;程序，本次实现简单UDP&lt;code&gt;echo server&lt;/code&gt;和&lt;code&gt;echo client&lt;/code&gt;，包含简单分包操作和协议设计
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
      <category term="socket" scheme="http://blog.fivezha.cn/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>网络编程笔记(1)---TCP与ECHO服务器</title>
    <link href="http://blog.fivezha.cn/2020/04/28/socket-program-1/"/>
    <id>http://blog.fivezha.cn/2020/04/28/socket-program-1/</id>
    <published>2020-04-28T12:39:26.000Z</published>
    <updated>2020-07-28T01:28:05.416Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是在<code>Linux</code>环境下编写<code>socket</code>程序，本次实现简单TCP<code>server</code>和<code>client</code>以及<code>echo server</code>和<code>echo client</code><a id="more"></a></p><h2 id="什么是Socket"><a href="#什么是Socket" class="headerlink" title="什么是Socket"></a>什么是Socket</h2><p>Socket中文译名套接字, 是一个当时没有在计网中讲到的知识, 但确实是极其重要的一个知识点, 他是基于TCP/IP协议的封装抽象层, 它对于TCP协议进行了封装, 使得其现在已经成为了最为通用的网络通信接口/应用程序接口.<br>关于TCP协议可以看下面这篇文章</p><p><a href="https://tools.ietf.org/html/rfc793" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc793</a></p><h2 id="为什么会有Socket"><a href="#为什么会有Socket" class="headerlink" title="为什么会有Socket"></a>为什么会有Socket</h2><p>我们知道, 服务/服务器其实是有很大可能不存在于一个计算机上的, 这就有了客户端与服务端, 在服务器之间, 也是需要存在连接通信的, 所以需要有一个用于进行通信的通用 <strong>可编程</strong> 接口, 这就是socket, 他对于 <code>server</code> 和 <code>client</code> 之间架起了一道桥, 让 <code>server</code> 与 <code>port</code> 绑定, 让 <code>client</code> 与 <code>ip:port</code> 连接, 这样就相当于 <code>client</code> 进程与 <code>server</code> 进程之间有了像是管道一样的通信, 不过这个通信是全双工的.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588078116060-f05e42c3-f202-4d5b-9710-2db2b576c66d.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>我们回顾TCP状态转换图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588078284676-ab9b2ed5-f0ef-4478-aaa2-9a4c24f8ca26.webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>在这里能够找到许多socket封装的影子, 从客户端来看</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588078349220-34006021-21e7-47be-b4f8-63baed9382b6.webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>则更加明显</p><h2 id="学习Linux-下的网络编程-socket编程"><a href="#学习Linux-下的网络编程-socket编程" class="headerlink" title="学习Linux 下的网络编程(socket编程)"></a>学习Linux 下的网络编程(socket编程)</h2><h4 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h4><blockquote><p>int socket(int domain, int type, int protocol)<br>return : 文件描述符 / or not -1<br>domain: 套接字所使用的协议簇<br>type: 套接字数据传输类型<br>protocol: 套接字所使用的协议</p></blockquote><h5 id="文件描述符-windows下称之为句柄"><a href="#文件描述符-windows下称之为句柄" class="headerlink" title="文件描述符(windows下称之为句柄):"></a>文件描述符(windows下称之为句柄):</h5><p>系统分配给文件或套接字的一个整数:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118202067-721fb73c-2732-4490-9e74-44e63ba46647.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p><a href="https://segmentfault.com/a/1190000009724931" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009724931</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118218855-6ed39004-f673-4193-a505-71db6c9a7026.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h5 id="协议簇"><a href="#协议簇" class="headerlink" title="协议簇:"></a>协议簇:</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118218855-6ed39004-f673-4193-a505-71db6c9a7026.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h5 id="套接字类型"><a href="#套接字类型" class="headerlink" title="套接字类型:"></a>套接字类型:</h5><ol><li>SOCK_STREAM(流式)(面向连接)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118553490-5f00c550-3323-4f3f-a659-99c18b66dff7.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure></li><li>SOCK_DGRAM(包式)(面向消息)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588118710732-9129da97-e3e2-49bd-a781-58c2fe7e0411.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure></li></ol><h5 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588119669498-7a97fde3-258f-47a8-a7df-b62090f44225.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="sockaddr-in"><a href="#sockaddr-in" class="headerlink" title="sockaddr_in"></a>sockaddr_in</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588124291436-8a2614f1-7e31-4d77-9fde-66cb601dde05.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588124419227-9e3b102c-99dd-4997-a1a9-078da7a3f9b4.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588134607200-d385c7b4-742b-4d3b-a2c8-0c1d39bf9908.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>IntelCPU默认都是小端序, 而网络连接统一都是大端序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.nlark.com/yuque/0/2020/png/1337142/1588134657937-d32ccb9f-edae-4abb-8d0c-7add2b93172f.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588134673711-34e815b2-b9fc-4578-9a8c-74887b8b3459.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h4 id="TCPserver-clien"><a href="#TCPserver-clien" class="headerlink" title="TCPserver/clien"></a>TCPserver/clien</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588134555033-16c67e97-f1d0-4c11-9306-45a335eb7672.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588135167103-c016147f-80ed-40ec-83d1-3723b6d22518.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>所以又回到了最最上面的第一个图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588135244153-85f9620d-3f95-4c35-9c83-d89022984acc.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h5 id="accept"><a href="#accept" class="headerlink" title="accept()"></a>accept()</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588138094808-4c630103-94cb-4688-9c1b-7296217a99ca.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>sock: 利用socket()函数建立的sock<br>addr: 地址变量<br>addlen: 结构体长度</p><h5 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588138363087-01c3e48a-226b-4699-a0d4-649fd7c6a53b.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="实现简单的server-client"><a href="#实现简单的server-client" class="headerlink" title="实现简单的server/client"></a>实现简单的server/client</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::to_string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span> &#123;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clnt_addr</span> &#123;</span>&#125;;</span><br><span class="line">    <span class="keyword">socklen_t</span> clnt_addr_size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));<span class="comment">// 初始化内存</span></span><br><span class="line"></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">// 当前主机ip</span></span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"bind() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"listen() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clnt_addr_size = <span class="keyword">sizeof</span>(clnt_addr);</span><br><span class="line">    clnt_sock = accept(serv_sock, (struct sockaddr *) &amp;clnt_addr, &amp;clnt_addr_size);</span><br><span class="line">    <span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"accept() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        sleep(rand() % <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">string</span> tmp = message + to_string(i);</span><br><span class="line">        write(clnt_sock, tmp.c_str(), tmp.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write(clnt_sock, message.c_str(), message.size());// 连接之后直接向client写入数据</span></span><br><span class="line">    close(clnt_sock);</span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *messgae)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock;</span><br><span class="line">    sockaddr_in serv_addr&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> str_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, read_len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> message;<span class="comment">// 信息流</span></span><br><span class="line">    message.resize(<span class="number">100</span>, <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 这里会自动将ip字符串转换为uint32_t类型IP数字</span></span><br><span class="line">    serv_addr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"connect() error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> check = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次只读出一个字节</span></span><br><span class="line">    <span class="keyword">while</span> (read_len = read(sock, &amp;message[idx++], <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str_len == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (check)</span><br><span class="line">                error_handler(<span class="string">"read() error!"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str_len += read_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Message from server is : %s \n"</span>, message.c_str());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Function read call count : %d \n"</span>, str_len);</span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>可以看到 <code>client</code> 成功接受到了流字符:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164592478-804b3536-f534-4622-bd7c-40a15e7886bf.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>同时 <code>server</code> 也发送成功结束了程序:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164562852-3e156431-c24a-49c8-b4c0-5b0900c4d368.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="实现echo服务器"><a href="#实现echo服务器" class="headerlink" title="实现echo服务器"></a>实现echo服务器</h2><h3 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::stoi;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::to_string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line">    <span class="keyword">int</span> size_len = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span> size_buf[size_len];</span><br><span class="line">    sockaddr_in serv_addr&#123;&#125;, clnt_addr&#123;&#125;;</span><br><span class="line">    <span class="keyword">socklen_t</span> clnt_addr_size;</span><br><span class="line">    <span class="keyword">int</span> str_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serv_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));<span class="comment">// 初始化内存</span></span><br><span class="line"></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">// 当前主机ip</span></span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (struct sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"bind() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"listen() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clnt_addr_size = <span class="keyword">sizeof</span>(clnt_addr);<span class="comment">// 算长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">///主体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        clnt_sock = accept(serv_sock, (sockaddr *) &amp;clnt_addr, &amp;clnt_addr_size);</span><br><span class="line">        <span class="keyword">if</span> (clnt_sock == <span class="number">1</span>) &#123;</span><br><span class="line">            error_handler(<span class="string">"accept() error!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Connected client %d \n"</span>, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((str_len = read(clnt_sock, size_buf, size_len)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((str_len = read(clnt_sock, message, stoi(size_buf))) != <span class="number">0</span>) &#123;</span><br><span class="line">                    write(clnt_sock, size_buf, size_len);</span><br><span class="line">                    write(clnt_sock, message, str_len);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(clnt_sock);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///</span></span><br><span class="line"></span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xmmmmmovo on 2020/4/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::stoi;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::to_string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *messgae)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock;</span><br><span class="line">    sockaddr_in serv_addr&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> str_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"socket() error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 这里会自动将ip字符串转换为uint32_t类型IP数字</span></span><br><span class="line">    serv_addr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">    serv_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        error_handler(<span class="string">"connect() error!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Connected......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Input message(Q/q to quit): "</span>, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">std</span>::fgets(message, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(message, <span class="string">"q\n"</span>) || !<span class="built_in">strcmp</span>(message, <span class="string">"Q\n"</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">strlen</span>(message);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"len = %d\n"</span>, l);</span><br><span class="line">        <span class="built_in">string</span> s = to_string(l);</span><br><span class="line">        s.resize(<span class="number">4</span>);</span><br><span class="line">        write(sock, s.c_str(), <span class="number">4</span>);</span><br><span class="line">        write(sock, message, <span class="built_in">strlen</span>(message));</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">        str_len = read(sock, buf, <span class="number">4</span>);</span><br><span class="line">        str_len = read(sock, message, stoi(buf));</span><br><span class="line">        message[str_len] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Message from server: %s\n"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handler</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">    fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>client:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164525052-62e2c390-1840-462d-aee2-2a8c4c7efb34.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>server:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/1588164514314-182083c4-11ca-49cd-aad0-39b7c1c1a2cc.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是在&lt;code&gt;Linux&lt;/code&gt;环境下编写&lt;code&gt;socket&lt;/code&gt;程序，本次实现简单TCP&lt;code&gt;server&lt;/code&gt;和&lt;code&gt;client&lt;/code&gt;以及&lt;code&gt;echo server&lt;/code&gt;和&lt;code&gt;echo client&lt;/code&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
      <category term="socket" scheme="http://blog.fivezha.cn/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>docker笔记</title>
    <link href="http://blog.fivezha.cn/2020/04/24/docker-note/"/>
    <id>http://blog.fivezha.cn/2020/04/24/docker-note/</id>
    <published>2020-04-24T13:31:13.000Z</published>
    <updated>2020-07-28T01:28:05.392Z</updated>
    
    <content type="html"><![CDATA[<p>一点点docker笔记<a id="more"></a></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">    "registry-mirrors": [</span><br><span class="line">      "https://hub-mirror.c.163.com",</span><br><span class="line">      "https://mirror.baidubce.com",</span><br><span class="line">      "https://dockerhub.azk8s.cn"</span><br><span class="line">    ],</span><br><span class="line">  "insecure-registries" : [</span><br><span class="line">    "hub-mirror.c.163.com",</span><br><span class="line">    "mirror.baidubce.com",</span><br><span class="line">    "dockerhub.azk8s.cn"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="利用Dockerfile定制镜像"><a href="#利用Dockerfile定制镜像" class="headerlink" title="利用Dockerfile定制镜像"></a>利用Dockerfile定制镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask部署</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; pip install -r /code/requirements.txt</span></span><br><span class="line"><span class="comment"># 如果太慢了再加上这句 不然镜像站有可能同步不全导致包安装失败</span></span><br><span class="line"><span class="comment"># -i https://pypi.tuna.tsinghua.edu.cn/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn app:app -c gunicorn.conf.py --error-logfile /<span class="built_in">log</span>/gunicorn.log</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 'name' .</span><br><span class="line">docker run -it 'name'</span><br><span class="line">docker run -d 'name'</span><br></pre></td></tr></table></figure><table><thead><tr><th>COPY</th><th>复制文件</th></tr></thead><tbody><tr><td>CMD</td><td>容器启动命令</td></tr><tr><td>ENV</td><td>设置环境变量</td></tr><tr><td>WORKDIR</td><td>指定工作目录</td></tr></tbody></table><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>docker image/container ls <strong>列出所有镜像/容器</strong> </li><li>docker rm … <strong>删除镜像</strong> </li><li>docker attach … 进入容器</li><li>docker ps -a <strong>列出所有的container包括没有运行的</strong> </li></ul><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask redis nginx mysql部署</span></span><br><span class="line">version: <span class="string">'3.6'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    container_name: web</span><br><span class="line">    volumes:</span><br><span class="line">      - ../logs:/log</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=mx/<span class="number">58</span>MFuLJ6^%.q</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/mysql:/docker-<span class="keyword">entrypoint</span><span class="bash">-initdb.d</span></span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:<span class="number">1.17</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">    depends_on:</span><br><span class="line">      - web</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">8888</span>:<span class="number">80</span></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:<span class="number">5.0</span>.<span class="number">8</span></span><br><span class="line">    volumes:</span><br><span class="line">    - ./config/redis/redis.conf:/etc/redis/redis.conf</span><br><span class="line">    command: redis-server</span><br><span class="line">    privileged: true</span><br></pre></td></tr></table></figure><ul><li>build <strong>利用Dockerfile编译的目录</strong></li><li>image <strong>镜像</strong> </li><li>volumes <strong>目录映射关系</strong> </li><li>depend_on <strong>依赖于 当依赖启动后本service才能启动</strong> </li><li>port <strong>开放的端口映射</strong> </li><li>environment <strong>环境变量</strong> </li><li>privileged <strong>权限</strong> </li><li>command <strong>自带命令行</strong> </li></ul><h2 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>docker-compose start</li><li>docker-compose stop</li><li>docker-compose top</li></ul><h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><h3 id="列出所有的容器-ID"><a href="#列出所有的容器-ID" class="headerlink" title="列出所有的容器 ID"></a>列出所有的容器 ID</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h3 id="停止所有的容器"><a href="#停止所有的容器" class="headerlink" title="停止所有的容器"></a>停止所有的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="删除所有的镜像"><a href="#删除所有的镜像" class="headerlink" title="删除所有的镜像"></a>删除所有的镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="docker1-3之后的资源清理"><a href="#docker1-3之后的资源清理" class="headerlink" title="docker1.3之后的资源清理"></a>docker1.3之后的资源清理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image prune --force --all # 删除所有不使用的镜像</span><br><span class="line">docker container prune -f # 删除所有停止的容器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一点点docker笔记
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="docker" scheme="http://blog.fivezha.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>页面置换算法之LRU算法(C++实现)</title>
    <link href="http://blog.fivezha.cn/2019/12/10/page-LRU/"/>
    <id>http://blog.fivezha.cn/2019/12/10/page-LRU/</id>
    <published>2019-12-10T01:55:45.000Z</published>
    <updated>2020-07-28T01:28:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>因为操作系统实验要写 所以写了</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p><strong>LRU(Least Recently Used)</strong>置换算法的描述</p><p>选择<strong>最后一次访问时间距离当前时间最长**</strong>的一页并淘汰之。</p><p>即淘汰没有使用的时间最长的页。实现代价很高(时间戳或硬件方法)</p><h2 id="-1"><a href="#-1" class="headerlink" title="!"></a>!</h2><p>详见: <a href="https://github.com/xmmmmmovo/ZhaOS/blob/master/OperatorSystem/exp5/LRUMain.cpp" target="_blank" rel="noopener">GIthub</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/Q0XctI.png" alt="Q0XctI.png" title="">                </div>                <div class="image-caption">Q0XctI.png</div>            </figure><p>下面是测试数据, 根据的是上课的ppt:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/Q0jAgK.jpg" alt="Q0jAgK.jpg" title="">                </div>                <div class="image-caption">Q0jAgK.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/Q0Xr0H.png" alt="Q0Xr0H.png" title="">                </div>                <div class="image-caption">Q0Xr0H.png</div>            </figure><p>可以看到, 9次页面置换跟缺页率都是正确的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为操作系统实验要写 所以写了&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="os" scheme="http://blog.fivezha.cn/tags/os/"/>
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>页面置换算法之FIFO算法(C++实现)</title>
    <link href="http://blog.fivezha.cn/2019/12/09/page-fifo/"/>
    <id>http://blog.fivezha.cn/2019/12/09/page-fifo/</id>
    <published>2019-12-09T14:09:16.000Z</published>
    <updated>2020-07-28T01:28:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>因为操作系统实验要写 所以写了</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p><strong>先进先出(FIFO)</strong>页面置换算法</p><p>选择在内存中<strong>驻留时间最长</strong>的页并淘汰之</p><h2 id="-1"><a href="#-1" class="headerlink" title="!"></a>!</h2><p>详见: <a href="https://github.com/xmmmmmovo/ZhaOS/blob/master/OperatorSystem/exp5/PageFIFOMain.cpp" target="_blank" rel="noopener">GIthub</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/09/Q0tuB6.png" alt="Q0tuB6.png" title="">                </div>                <div class="image-caption">Q0tuB6.png</div>            </figure><p>下面是测试数据, 根据的是上课的ppt:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/09/Q0Yv1s.jpg" alt="testdata.jpg" title="">                </div>                <div class="image-caption">testdata.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/09/Q0tKHK.png" alt="Q0tKHK.png" title="">                </div>                <div class="image-caption">Q0tKHK.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为操作系统实验要写 所以写了&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="os" scheme="http://blog.fivezha.cn/tags/os/"/>
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>银行家算法的C++实现</title>
    <link href="http://blog.fivezha.cn/2019/12/05/bank-algorithm/"/>
    <id>http://blog.fivezha.cn/2019/12/05/bank-algorithm/</id>
    <published>2019-12-05T12:12:48.000Z</published>
    <updated>2020-07-28T01:28:05.392Z</updated>
    
    <content type="html"><![CDATA[<p>因为操作系统实验要写 所以写了</p><a id="more"></a><h3 id="银行家算法是一种避免死锁的方法"><a href="#银行家算法是一种避免死锁的方法" class="headerlink" title="银行家算法是一种避免死锁的方法"></a>银行家算法是一种避免死锁的方法</h3><p>在避免死锁的方法中，允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次资源分配的安全性。若此次分配不会导致系统进入不安全状态，则将资源分配给进程；否则，令进程等待。<br>虽然并非所有的不安全状态都必然会转为死锁状态，但当系统进入不安全状态后，便有可能进而进入死锁状态；反之，只要系统处于安全状态，系统便可避免进入死锁状态。<br>因此，避免死锁的实质在于：系统在进行资源分配时，如何使系统不进入不安全状态。</p><h3 id="银行家算法思想很简单"><a href="#银行家算法思想很简单" class="headerlink" title="银行家算法思想很简单"></a>银行家算法思想很简单</h3><p>这个算法中,  主要是维护其中的</p><blockquote><p><code>available</code>向量</p><p><code>max</code>矩阵</p><p><code>allocation</code>矩阵</p></blockquote><p>每一次分配, 都会轮询一遍可分配矩阵, 寻求可以分配的process,  如果没有可以分配的process, 则跳出循环进行是否进入死锁的判断.</p><p>具体<a href="https://zh.wikipedia.org/wiki/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">维基百科</a>讲的其实比我好</p><h3 id="银行家算法代码好写"><a href="#银行家算法代码好写" class="headerlink" title="银行家算法代码好写"></a>银行家算法代码好写</h3><p>下面两张图一张是源码 一张是结果</p><p>其中数据来源于文件 可以方便自定义</p><p>具体可以见我的<a href="https://github.com/xmmmmmovo/ZhaOS/blob/master/OperatorSystem/exp4/BankAlgorithmMain.cpp" target="_blank" rel="noopener">GitHub仓库</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/05/QGeZM8.png" alt="代码内容" title="">                </div>                <div class="image-caption">代码内容</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/05/QGeExf.png" alt="内容" title="">                </div>                <div class="image-caption">内容</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为操作系统实验要写 所以写了&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="os" scheme="http://blog.fivezha.cn/tags/os/"/>
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>playframework初涉-2.配置MySQL并测试</title>
    <link href="http://blog.fivezha.cn/2019/10/11/play-study-s/"/>
    <id>http://blog.fivezha.cn/2019/10/11/play-study-s/</id>
    <published>2019-10-10T16:14:27.000Z</published>
    <updated>2020-07-28T01:28:05.412Z</updated>
    
    <content type="html"><![CDATA[<p>悲伤的play framework + MySQL配置过程</p><a id="more"></a><h3 id="因为playframework版本太低卸载mysql8"><a href="#因为playframework版本太低卸载mysql8" class="headerlink" title="因为playframework版本太低卸载mysql8"></a>因为playframework版本太低卸载mysql8</h3><p>首先有一件很悲伤的消息，下面这个版本</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/mysql8.jpg" alt="mysql8" title="">                </div>                <div class="image-caption">mysql8</div>            </figure><p>，因为play版本过低，无法完全兼容，需要降级到mysql5的版本，如果已经安装，那么可以以<strong>管理员启动</strong>命令行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/cmdmaster.jpg" alt="cmd" title="">                </div>                <div class="image-caption">cmd</div>            </figure><p><strong>然后先输入(前提是已经配置过mysql到环境变量 否则请到mysql文件夹中再执行)</strong></p><p><strong><code>net stop mysql</code></strong></p><p><strong><code>mysqld --remove</code></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/realremove.jpg" alt="real remove" title="">                </div>                <div class="image-caption">real remove</div>            </figure><p> 之后整个删除整个<code>mysql-8.0.12-winx64</code>版本</p><h3 id="然后安装MySQL5-7版本-地下群群文件里有"><a href="#然后安装MySQL5-7版本-地下群群文件里有" class="headerlink" title="然后安装MySQL5.7版本(地下群群文件里有)"></a>然后安装MySQL5.7版本(地下群群文件里有)</h3><p><strong>基本是一路next就可以了</strong></p><p><a href="https://blog.csdn.net/s_x123456/article/details/86754486?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener"><strong>这里也给个安装的教程</strong></a></p><p>下面几项注意下</p><p>这里选custom安装</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/complete.jpg" alt="complete" title="">                </div>                <div class="image-caption">complete</div>            </figure><p>这里选添加到环境变量</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/main.jpg" alt="main" title="">                </div>                <div class="image-caption">main</div>            </figure><p>设定登录密码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/login.jpg" alt="login" title="">                </div>                <div class="image-caption">login</div>            </figure><p>这里务必选择utf8编码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/utf8.jpg" alt="utf-8" title="">                </div>                <div class="image-caption">utf-8</div>            </figure><p>大概就是这些，最后一路next到底就行了，经过漫长的等待，可能会让你重启，重启就可以了</p><p><strong>注：如果无响应，那就直接关了然后再打开安装文件，选择repair选项，完成之后重启</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/repair.jpg" alt="repair" title="">                </div>                <div class="image-caption">repair</div>            </figure><p>重启之后再以<strong>管理员打开</strong>命令提示行，执行下面两行语句</p><p><code>mysqld -install</code></p><p><code>net start mysql</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/start.jpg" alt="start" title="">                </div>                <div class="image-caption">start</div>            </figure><p>此时，便可以输入<code>mysql -u root</code>进入数据库了</p><p>不过这个开始时没有密码的，你需要输入以下两行更新密码</p><p><strong><code>set password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;123456&#39;);</code>注：password()里面的就是你设定的密码</strong></p><p><strong><code>flush privileges;</code>这一步是更新权限</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/password.jpg" alt="change password" title="">                </div>                <div class="image-caption">change password</div>            </figure><p>好了 这样你的数据库便配置完成了</p><p>然后新建一个database(mysql里的database等同于于scheme)</p><p><strong><code>create database test;</code>(test是你新建数据库的名字 随便写)</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/database.jpg" alt="database" title="">                </div>                <div class="image-caption">database</div>            </figure><p>此时回到play你新建的app中在application.conf中设置mysql</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/setting.jpg" alt="setting" title="">                </div>                <div class="image-caption">setting</div>            </figure><p>如果你跟我做的一样，那么应该是下面这样:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/setting2.jpg" alt="setting2" title="">                </div>                <div class="image-caption">setting2</div>            </figure><p>随后编写测试程序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/user.jpg" alt="user" title="">                </div>                <div class="image-caption">user</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/test.jpg" alt="test" title="">                </div>                <div class="image-caption">test</div>            </figure><p>运行app，访问网址后，看到有正常输出</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/succ.jpg" alt="success" title="">                </div>                <div class="image-caption">success</div>            </figure><p>且数据库中有东西</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="pic/sqlin.jpg" alt="sql" title="">                </div>                <div class="image-caption">sql</div>            </figure><p>那么则说明配置成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;悲伤的play framework + MySQL配置过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="play" scheme="http://blog.fivezha.cn/tags/play/"/>
    
      <category term="java" scheme="http://blog.fivezha.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>水题五道</title>
    <link href="http://blog.fivezha.cn/2019/09/12/lab-summer-question/"/>
    <id>http://blog.fivezha.cn/2019/09/12/lab-summer-question/</id>
    <published>2019-09-12T12:10:14.000Z</published>
    <updated>2020-07-28T01:28:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>实验室暑假考核题目</p><p>随便写写解题思路来着</p><a id="more"></a><h3 id="824-山羊拉丁文"><a href="#824-山羊拉丁文" class="headerlink" title="824.山羊拉丁文"></a>824.山羊拉丁文</h3><blockquote><p>给定一个由空格分割单词的句子 S。每个单词只包含大写或小写字母。</p><p>我们要将句子转换为 “Goat Latin”（一种类似于 猪拉丁文 - Pig Latin 的虚构语言）。</p><p>山羊拉丁文的规则如下：</p><p>如果单词以元音开头（a, e, i, o, u），在单词后添加”ma”。<br>例如，单词”apple”变为”applema”。</p><p>如果单词以辅音字母开头（即非元音字母），移除第一个字符并将它放到末尾，之后再添加”ma”。<br>例如，单词”goat”变为”oatgma”。</p><p>根据单词在句子中的索引，在单词最后添加与索引相同数量的字母’a’，索引从1开始。<br>例如，在第一个单词后添加”a”，在第二个单词后添加”aa”，以此类推。<br>返回将 S 转换为山羊拉丁文后的句子。</p><p>来源：</p><p>leetcode 824</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toGoatLatin</span><span class="params">(self, S: str)</span> -&gt; str:</span></span><br><span class="line">        vowel = <span class="string">"aeiouAEIOU"</span></span><br><span class="line"></span><br><span class="line">        spllit_str = S.split(<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">for</span> k, s <span class="keyword">in</span> enumerate(spllit_str):</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> vowel:</span><br><span class="line">                s = s[<span class="number">1</span>:] + s[<span class="number">0</span>]</span><br><span class="line">            s += <span class="string">"ma"</span> + <span class="string">"a"</span> * (k + <span class="number">1</span>)</span><br><span class="line">            spllit_str[k] = s</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(spllit_str)</span><br></pre></td></tr></table></figure><p>很简单得暴力题目 直接搞定</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="img/1.png" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><h3 id="1078-Bigram-分词"><a href="#1078-Bigram-分词" class="headerlink" title="1078.Bigram 分词"></a>1078.Bigram 分词</h3><blockquote><p>给出第一个词 first 和第二个词 second，考虑在某些文本 text 中可能以 “first second third” 形式出现的情况，其中 second 紧随 first 出现，third 紧随 second 出现。</p><p>对于每种这样的情况，将第三个词 “third” 添加到答案中，并返回答案。</p><p>示例 1：</p><p>输入：text = “alice is a good girl she is a good student”, first = “a”, second = “good”<br>输出：[“girl”,”student”]<br>示例 2：</p><p>输入：text = “we will we will rock you”, first = “we”, second = “will”<br>输出：[“we”,”rock”]</p><p>提示：</p><p>1 &lt;= text.length &lt;= 1000<br>text 由一些用空格分隔的单词组成，每个单词都由小写英文字母组成<br>1 &lt;= first.length, second.length &lt;= 10<br>first 和 second 由小写英文字母组成</p><p>来源：</p><p>leetcode 1078</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOcurrences</span><span class="params">(self, text: str, first: str, second: str)</span> -&gt; List[str]:</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        split_str = text.split()</span><br><span class="line">        length = len(split_str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, s <span class="keyword">in</span> enumerate(split_str):</span><br><span class="line">            <span class="keyword">if</span> s == first <span class="keyword">and</span> k + <span class="number">1</span> &lt; length <span class="keyword">and</span> k + <span class="number">2</span> &lt; length:</span><br><span class="line">                <span class="keyword">if</span> split_str[k + <span class="number">1</span>] == second:</span><br><span class="line">                    ans.append(split_str[k + <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>暴力完事儿，这里顺便优化一下，可以把60ms提到40ms左右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOcurrences</span><span class="params">(self, text: str, first: str, second: str)</span> -&gt; List[str]:</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        split_str = text.split()</span><br><span class="line">        length = len(split_str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, s <span class="keyword">in</span> enumerate(split_str[:<span class="number">-2</span>]):</span><br><span class="line">            <span class="keyword">if</span> s == first <span class="keyword">and</span> split_str[k + <span class="number">1</span>] == second:</span><br><span class="line">                ans.append(split_str[k + <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>搞定</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="img/2.png" alt="2" title="">                </div>                <div class="image-caption">2</div>            </figure><h3 id="120-三角形最小路径和"><a href="#120-三角形最小路径和" class="headerlink" title="120. 三角形最小路径和"></a>120. 三角形最小路径和</h3><blockquote><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p><p>例如，给定三角形：</p><p>[<br>     [2],<br>    [3,4],<br>   [6,5,7],<br>  [4,1,8,3]<br>]<br>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p><p>说明：</p><p>如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。</p><p>来源：</p><p>leetcode  120</p></blockquote><p>dp 说是空间复杂度O(N)，但其实这个题目空间复杂度可以到O(1)</p><p>先尝试用DFS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># DFS</span></span><br><span class="line">        floors = len(triangle)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(floor, left, right)</span>:</span></span><br><span class="line">            <span class="comment"># 判断是否最下层也计算过了</span></span><br><span class="line">            <span class="keyword">if</span> floor == floors:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># 最低端再往下权重就是0</span></span><br><span class="line"></span><br><span class="line">            ans = <span class="number">0</span> <span class="comment"># 初始为0</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; floor + <span class="number">1</span>:</span><br><span class="line">                tl = dfs(floor + <span class="number">1</span>, left, left + <span class="number">1</span>) + triangle[floor][left]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> right &lt; floor + <span class="number">1</span>:</span><br><span class="line">                tr = dfs(floor + <span class="number">1</span>, right, right + <span class="number">1</span>) + triangle[floor][right]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ans + min(tl, tr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>) + triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>结果果然华丽丽的超时了，打眼一看过了42个，卡在了最后一个，可能改改就能过了吧(可能性比较小，因为用C++试了下也超时，应该是卡的时间)，不过也是很极限了，所以改用dp写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp</span></span><br><span class="line">        floors = len(triangle)</span><br><span class="line">        <span class="keyword">if</span> floors == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(floors - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>):</span><br><span class="line">                triangle[i][j] += min(triangle[i + <span class="number">1</span>][j + <span class="number">1</span>], triangle[i + <span class="number">1</span>][j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>这里可以不用开新的dp数组(无论是二维还是一维)，因为是从下往上的，只需要最终结果，所以可以直接利用原三角形数组当作dp数组，所以空间就变成了O(1)了。</p><p>不过这个才只打败了50%的人，甚至空间只打败了5%</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="img/3.png" alt="3" title="">                </div>                <div class="image-caption">3</div>            </figure><p>下面这个是最快用时的答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> triangle:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        res = triangle[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(triangle) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(triangle[i])):</span><br><span class="line">                res[j] = min(res[j], res[j + <span class="number">1</span>]) + triangle[i][j]</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>从中，可以看到：</p><ol><li>其实定义过多变量会减缓速度并且增加空间用量，编译器会给优化的。</li><li>尽量用一维list索引，速度会快很多</li><li>尽量使用相同的list进行索引，编译器会优化</li></ol><h3 id="872-叶子相似的树"><a href="#872-叶子相似的树" class="headerlink" title="872. 叶子相似的树"></a>872. 叶子相似的树</h3><blockquote><p>请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。</p><p>举个例子，如上图所示，给定一颗叶值序列为 (6, 7, 4, 9, 8) 的树。</p><p>如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是 叶相似 的。</p><p>如果给定的两个头结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。</p><p>提示：</p><p>给定的两颗树可能会有 1 到 100 个结点。</p><p>来源：</p><p>leetcode 872</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="img/tree4.png" alt="treepic" title="">                </div>                <div class="image-caption">treepic</div>            </figure><p>直接前序遍历加判断，暴力就完事儿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leafSimilar</span><span class="params">(self, root1: TreeNode, root2: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 前序遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">tree_leaf_sim_calcu</span><span class="params">(root: TreeNode)</span>:</span></span><br><span class="line">            stack, ans = [], []  <span class="comment"># 用list</span></span><br><span class="line">            <span class="keyword">while</span> len(stack) <span class="keyword">or</span> root:</span><br><span class="line">                <span class="keyword">if</span> root:</span><br><span class="line">                    <span class="keyword">if</span> root.left <span class="keyword">is</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        ans.append(root.val)</span><br><span class="line">                    stack.append(root)</span><br><span class="line">                    root = root.left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    root = stack.pop().right</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tree_leaf_sim_calcu(root1) == tree_leaf_sim_calcu(root2)</span><br></pre></td></tr></table></figure><p>但其实这样只击败了44%的用户，看了一下用时快的回答，发现基本上都是用的递归，递归占用资源太大，所以就不改了，思想都是一样的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="img/4.png" alt="4" title="">                </div>                <div class="image-caption">4</div>            </figure><p>为什么递归用时会短呢，这是因为python里的while循环是用纯python编写的，所以效率远不及简单函数堆栈的效率，所以会出现非递归比递归用时长的现象，如果用别的语言(没错就是C++)是不会出现这种问题的！</p><h3 id="863-二叉树中所有距离为-K-的结点"><a href="#863-二叉树中所有距离为-K-的结点" class="headerlink" title="863. 二叉树中所有距离为 K 的结点"></a>863. 二叉树中所有距离为 K 的结点</h3><blockquote><p>给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。</p><p>返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。</p><p>示例 1：</p><p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2</p><p>输出：[7,4,1]</p><p>解释：<br>所求结点为与目标结点（值为 5）距离为 2 的结点，<br>值分别为 7，4，以及 1</p><p>注意，输入的 “root” 和 “target” 实际上是树上的结点。<br>上面的输入仅仅是对这些对象进行了序列化描述。</p><p>提示：</p><p>给定的树是非空的，且最多有 K 个结点。<br>树上的每个结点都具有唯一的值 0 &lt;= node.val &lt;= 500 。<br>目标结点 target 是树上的结点。<br>0 &lt;= K &lt;= 1000.</p><p>来源：</p><p>leetcode 863</p></blockquote><p>dfs加父节点转成图问题再利用bfs寻找target为中心的节点。这里代码参考了标准答案，想看的去题解看第一个就ok了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distanceK</span><span class="params">(self, root, target, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type target: TreeNode</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否是本身</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> K:</span><br><span class="line">            <span class="keyword">return</span> [target.val]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dfs标记父节点</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node: TreeNode, father_node: TreeNode)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                node.father = father_node</span><br><span class="line">                dfs(node.left, node)</span><br><span class="line">                dfs(node.right, node)</span><br><span class="line"></span><br><span class="line">        dfs(root, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这一步过后其实就变成了图问题，每个都有三个节点的图</span></span><br><span class="line">        <span class="comment"># 下面对于target进行bfs</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">()</span>:</span></span><br><span class="line">            search = &#123;target&#125;</span><br><span class="line">            queue = deque([(target, <span class="number">0</span>)])  <span class="comment"># 存0 即原点</span></span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                <span class="keyword">if</span> queue[<span class="number">0</span>][<span class="number">1</span>] == K:</span><br><span class="line">                    <span class="keyword">return</span> [node.val <span class="keyword">for</span> node, N <span class="keyword">in</span> queue]</span><br><span class="line">                node, N = queue.popleft()</span><br><span class="line">                <span class="keyword">for</span> n <span class="keyword">in</span> (node.left, node.right, node.father):</span><br><span class="line">                    <span class="keyword">if</span> n <span class="keyword">and</span> n <span class="keyword">not</span> <span class="keyword">in</span> search:</span><br><span class="line">                        queue.append((n, N + <span class="number">1</span>))</span><br><span class="line">                        search.add(n)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bfs()</span><br></pre></td></tr></table></figure><p>看了一下速度最快的回答，也是dfs建图+bfs搜索，除了一些骚操作，应该大部分都是优化这个思路的代码实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="img/5.png" alt="5" title="">                </div>                <div class="image-caption">5</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验室暑假考核题目&lt;/p&gt;
&lt;p&gt;随便写写解题思路来着&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="algorithm" scheme="http://blog.fivezha.cn/tags/algorithm/"/>
    
      <category term="python" scheme="http://blog.fivezha.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>playframework初涉-1.环境配置</title>
    <link href="http://blog.fivezha.cn/2019/09/04/play-study-f/"/>
    <id>http://blog.fivezha.cn/2019/09/04/play-study-f/</id>
    <published>2019-09-04T09:24:50.000Z</published>
    <updated>2020-07-28T01:28:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>因为Javaee课要用这个框架 所以稍微学了下</p><a id="more"></a><h2 id="1-运行环境配置"><a href="#1-运行环境配置" class="headerlink" title="1.运行环境配置"></a>1.运行环境配置</h2><h3 id="1-1确保拥有Java环境"><a href="#1-1确保拥有Java环境" class="headerlink" title="1.1确保拥有Java环境"></a>1.1确保拥有Java环境</h3><p>检查环境：</p><p>可能之前有人配置过Java环境，所以首先先判断你是否有安装过Java，按下<code>win + R</code>键，出现运行界面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="run.png" alt="run" title="">                </div>                <div class="image-caption">run</div>            </figure></p><p>输入<code>cmd</code>会出现熟悉的命令提示框，此时输入<code>Java</code>然后按回车如果显示下面类似的便可以跳过到1.2去<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="cmd.png" alt="cmd" title="">                </div>                <div class="image-caption">cmd</div>            </figure></p><p>如果是下图情况</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="wrong_env.png" alt="wrong_env" title="">                </div>                <div class="image-caption">wrong_env</div>            </figure><p>请配置环境：</p><ol><li><p>安装Java(请看群文件javaee文件夹或者自己去官网下载)</p></li><li><p>在此电脑右键点属性<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="env2.png" alt="env1](env1.png)![env1" title="">                </div>                <div class="image-caption">env1](env1.png)![env1</div>            </figure></p></li><li><p>双击点进去，如下配置<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="env_3.png" alt="env3" title="">                </div>                <div class="image-caption">env3</div>            </figure></p></li><li><p>一路点确定下去，最后再重复最上面的检查环境操作进行判断。</p></li></ol><h3 id="1-2-配置play-framework环境"><a href="#1-2-配置play-framework环境" class="headerlink" title="1.2 配置play framework环境"></a>1.2 配置play framework环境</h3><p>这里选取的是<code>1.5.1</code>版本，可以在官网或者群文件中下载，然后找到你的<code>play-1.5.1</code>的下载的本地文件夹，解压缩后把<code>play-1.5.1</code>文件夹放到环境变量里<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="env_4.png" alt="env_4" title="">                </div>                <div class="image-caption">env_4</div>            </figure></p><p>此时在命令框中输入play则会出现如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="play_env2.png" alt="play_env2" title="">                </div>                <div class="image-caption">play_env2</div>            </figure></p><p>则说明环境已经配置好了</p><h3 id="1-3-新建web项目"><a href="#1-3-新建web项目" class="headerlink" title="1.3 新建web项目"></a>1.3 新建web项目</h3><p>这里只需要到你想要创建项目的文件夹中，按住<code>shift + 右键</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="right_click.png" alt="rc" title="">                </div>                <div class="image-caption">rc</div>            </figure></p><p>然后输入<code>play new 项目名</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="play_new.png" alt="new" title="">                </div>                <div class="image-caption">new</div>            </figure><p><strong>然后输入<code>cd 项目名</code>，在输入<code>play idealize</code>(用eclipse的话就是<code>play eclipsify</code>)</strong></p><p><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="idea_succ.png" alt="succ" title="">                </div>                <div class="image-caption">succ</div>            </figure></p><h2 id="2-IDE环境配置"><a href="#2-IDE环境配置" class="headerlink" title="2. IDE环境配置"></a>2. IDE环境配置</h2><p>配置好了运行环境，那么就应该开始配置我们使用的IDE环境了，这里有两个选择</p><ol><li>IDEA</li><li>eclipse</li></ol><p>这这两个ide个人推荐使用IDEA，但是eclipse配置简单，这个只能说是见仁见智了。</p><h3 id="2-1-配置IDEA"><a href="#2-1-配置IDEA" class="headerlink" title="2.1 配置IDEA"></a>2.1 配置IDEA</h3><p>找到idea安装文件(官网或者QQ群里有)，安装一直next到最后，出现选项选下面这几个<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ch1.png" alt="ch1" title="">                </div>                <div class="image-caption">ch1</div>            </figure></p><p>然后首次启动IDEA跟着下面的配置来就可以，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ch2.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ch3.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><p>这里是选择你的颜色主题 你可以选择暗色或者亮色</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ch4.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ch5.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="ch6.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><h3 id="2-2-项目配置流程"><a href="#2-2-项目配置流程" class="headerlink" title="2.2 项目配置流程"></a>2.2 项目配置流程</h3><p>这里如果你按照上面的操作进行了<code>play idealize</code>操作之后，你项目的文件夹里面应该会出现一个<code>项目名.ipr</code>的文件，双击打开便可以直接打开idea并加载项目了。</p><p>首先先把下面的tips关掉(因为太烦人了)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="tipoff.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><p>点开，左面的<code>project</code>出现文件结构，如果不一样请寻找是否有漏掉的步骤，然后打开<code>controllers/Application.java</code>可能会提示你填SDK，选择其中一个<code>jdk</code>就可以了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jdk1.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jdk2.png" alt="ch2" title="">                </div>                <div class="image-caption">ch2</div>            </figure><p>然后我们会发现因为docviewer导包问题会有一堆麻烦，所以我们直接删了就可以。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="delete1.png" alt="delete" title="">                </div>                <div class="image-caption">delete</div>            </figure><p>然后我们配置启动程序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="run1.png" alt="add" title="">                </div>                <div class="image-caption">add</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="run2.png" alt="add2" title="">                </div>                <div class="image-caption">add2</div>            </figure><p>其中VM options是<code>-Dapplication.path=.</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="setting.png" alt="run3" title="">                </div>                <div class="image-caption">run3</div>            </figure><p>然后我们开始运行，如果出现models不存在的bug，这个是因为你models文件夹里面没有存在文件，添加一个就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="wrong_pack.png" alt="file" title="">                </div>                <div class="image-caption">file</div>            </figure><p>然后就可以运行了，当你看到 </p><p><img src="run_succ.png" alt="run"></p><p>的时候打开浏览器，输入<code>http://localhost:9000/</code>回车</p><p>如果看见下面这个就说明配置成功了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="succ.png" alt="succ" title="">                </div>                <div class="image-caption">succ</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为Javaee课要用这个框架 所以稍微学了下&lt;/p&gt;
    
    </summary>
    
    
      <category term="assignment" scheme="http://blog.fivezha.cn/categories/assignment/"/>
    
    
      <category term="play" scheme="http://blog.fivezha.cn/tags/play/"/>
    
      <category term="java" scheme="http://blog.fivezha.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>opencv中高斯模糊(滤波器)的源码解析(c++版)</title>
    <link href="http://blog.fivezha.cn/2019/02/25/gaussianbulr-analyze/"/>
    <id>http://blog.fivezha.cn/2019/02/25/gaussianbulr-analyze/</id>
    <published>2019-02-25T11:40:25.000Z</published>
    <updated>2020-07-28T01:28:05.392Z</updated>
    
    <content type="html"><![CDATA[<p><strong>因为实验室假期需要写一篇关于opencv的作业 所以顺便看了一下opencv(版本3.2.0)里面关于高斯模糊的源码</strong></p><a id="more"></a><h2 id="分析函数接口"><a href="#分析函数接口" class="headerlink" title="分析函数接口"></a>分析函数接口</h2><p>首先，在下用的是vs版本的opencv，是直接编译好给你静态库(.lib)文件的，所以当我按住<code>ctrl</code>寻找<code>GaussianBlur</code>这个函数时 只发现了其在<code>imgproc.hpp</code>里面提供给你的接口。</p><p>大概是下面这个样子的:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/高斯函数接口2.png" alt="高斯模糊函数接口1" title="">                </div>                <div class="image-caption">高斯模糊函数接口1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/高斯函数.png" alt="高斯模糊函数接口2" title="">                </div>                <div class="image-caption">高斯模糊函数接口2</div>            </figure><blockquote><p>该函数将源图像与指定的卷积核进行卷积。并且支持原图像直接进行滤波操作。</p></blockquote><p>可以看到这个函数接口主要由四个部分组成:</p><ol><li><p><code>CV_EXPORTS_W</code><br>继续往上找 可以发现这是一个宏定义</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/%E5%AE%8F%E5%AE%9A%E4%B9%89.png" alt="宏定义1"></p><p>可以发现 这个宏定义是在<strong>编译阶段</strong>将<code>CV_EXPORTS</code>替换为了<code>CV_EXPORTS_W</code>再向上查找 会发现</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/%E5%AE%8F%E5%AE%9A%E4%B9%892.png" alt="宏定义2"></p><p>这里又是一个宏组成的用以定义<code>CV_EXPORTS</code>的宏组，这一段其实就是类似于<code>if else</code>的结构，主要的作用机理便是<strong>适配各类环境(操作系统)</strong> 。从中，我们这里又分成了三个部分进行解析:</p><ol><li><p><code>#if (defined WIN32 || defined _WIN32 || defined WINCE || defined __CYGWIN__) &amp;&amp; defined CVAPI_EXPORTS</code><br>可以看到，这里判断了两个表达式的逻辑与(<code>(defined WIN32 || defined _WIN32 || defined WINCE || defined __CYGWIN__)</code>和<code>defined CVAPI_EXPORTS</code>)</p><ol><li><p>首先，<code>defined</code>的意义在于寻找后面的字段是否已经被宏定义过。</p></li><li><p>其次，观察第一个表达式，发现<code>_WIN32</code> 在之前已经被定义过了，通过查阅<a href="https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=vs-2017" target="_blank" rel="noopener">微软官方宏定义文档</a>发现这个字段作用是基于编译器一个信号，表明是Windows环境下编译及运行的程序。</p><p><img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/WIN32.png" alt="WIN"></p><p>再查找前后未定义过的字段，继而发现<code>WIN32</code>是<strong>只要包含了 Windows.h，那么 WIN32 常量是肯定定义了</strong>的设定，不能用于判断平台环境。<br>而<code>WINCE</code>便是判断是否为WINCE环境的程序<br><code>__CYGWIN__</code>如果事先有了解过cygwin这个程序的话，这个应该不难看懂，也是用以判断环境的定义，而cywin则是在Windows环境下用以模拟Unix环境的软件(P.S.还是蛮好用的)</p></li><li><p>再次，观察第二个表达式，也是查找字段是否定义过，这个查了一下，发现这个宏定义是存在于opencv.dll这个文件里面的。也就是判断是否已经链接了动态库。</p></li><li><p>这样这一行便很容易懂了，目的便是判断程序环境<strong>是否为Windows</strong>且已经链接opencv.dll的库用以进行下一步操作。</p></li><li><p>再提一句，关于这个操作系统(环境)的判定其实还有很多，这里放一个<a href="https://github.com/qt/qt/blob/4.8/src/corelib/global/qglobal.h" target="_blank" rel="noopener">Qt里面关于系统判定的头文件(147行开始)(版本比较老了 可自行再自己qt里查看)</a></p></li></ol></li><li><p><code># define CV_EXPORTS __declspec(dllexport)</code><br>这一句涉及到的主要是dll函数导入，需要和下面最后三行联合起来看<br><code>#define CV_EXPORTS</code><br>第二行需要联合上面这句一同分析，首先，这个头文件内部写的都是接口，都是作者自己编写留给别人用以调用的，并且从第一点分析的结果来看，这些接口的<strong>实现</strong>都是放在opencv.dll文件中的，而第一行的判断便是判断你是否在最需要隐式调用，如果有，那么直接可以利用隐式调用的方法进行<a href="https://blog.csdn.net/W_Y2010/article/details/80428067" target="_blank" rel="noopener"><strong>函数导出(具体__declspec也有在微软文档里写)</strong></a><br>反之，如果判断事先未进行链接，那么使用的时候必然是显式调用(没错，就是配置环境的时候配置的lib文件链接，那就是显式调用了<a href="https://wenku.baidu.com/view/f7a24236b52acfc789ebc999.html" target="_blank" rel="noopener">参考此篇文章</a>)，既然是显式调用，自然便不需要进行函数导出操作。所以将<code>CV_EXPORTS</code>字段设置为空。</p></li><li><p><code>elif defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 4</code><br><code>define CV_EXPORTS __attribute__((visibility(&quot;default&quot;)))</code><br>这两句涉及的主要有两个功能: 1. <a href="https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html" target="_blank" rel="noopener">判断是否为GCC编译环境</a> 2. <a href="https://blog.csdn.net/mutourenzhang/article/details/47803803" target="_blank" rel="noopener">为全局动态库函数设置非隐藏声明</a><br>对于第一点，类似于分析第一条，可以知道这句的意思便是检查gcc并测试是否高于4.0.0版本(猜测与c++标准有关)</p></li></ol></li><li><p><code>void</code><br>函数返回值，这里返回值为空</p></li><li><p><code>GaussianBlur</code><br>函数名，这里因为是声明所以是跟源码的函数一样，可以很快找到源码定义。</p></li><li><p><code>()</code><br>括号里面的是函数参数根据上面的说明注释，便可解读出这个函数所有参数意义:</p><ul><li><code>src</code>  这是输入图像，这个图像可以拥有任意数量的通道，这些通道是独立处理的，但深度应该是CV_8U，CV_16U，CV_16S，CV_32F或CV_64F。</li><li><code>dst</code> 这是输出图像，大小与类型与src相同。</li><li><code>ksize</code> 这是卷积核的大小参数(是数字desu)。其中ksize.width和ksize.height可以不同，但是它们必须是一个正奇数(或者零)，并且您不用担心卷积核内部参数问题，卷积核会根据sigma来计算。</li><li><code>sigmaX</code> X方向的卷积核标准偏差。</li><li><code>sigmaY</code> Y方向的高斯核标准偏差; 如果sigmaY为零，则设置为等于sigmaX，如果两个sigma都是零，则它们是从ksize.width和ksize.height计算的（详见cv :: getGaussianKernel）; 这些语义未来均有可能修改，建议指定所有ksize，sigmaX和sigmaY。</li><li><code>borderType</code> 像素外推模式，请参阅cv :: BorderTypes</li><li><code>sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur</code>。这里显示了函数的相关函数，是观察源码的重要提示</li></ul></li></ol><p>这样，对于函数接口的解析就算是完成了，从中我们可以得出以下几个结论：</p><ol><li>直接ctrl寻找到底是不能找到原函数代码的。</li><li>找到原函数的同时也需要sepFilter2D, filter2D, blur, boxFilter, bilateralFilter, medianBlur这一些列函数辅助理解。</li><li>这个函数在cv命名空间中，名称应该为<code>cv::GaussianBlur</code> 。</li></ol><p>所以接下来第一步便是需要在源码中寻找到真正的函数实现。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="理解高斯模糊函数"><a href="#理解高斯模糊函数" class="headerlink" title="理解高斯模糊函数"></a>理解高斯模糊函数</h3><p>高斯模糊函数本质是利用<strong>高斯滤波器</strong>对于给定图像进行<strong>平滑</strong>操作。平滑操作时什么，是减少噪点。噪点的原因又是什么，是单个像素包含的信息过于独立。如何减少噪点，很简单，只需要让每个像素点包含有周围像素的部分信息就行了呗。选用什么方法，最简单的方法便是——卷积(见下图)。利用一个给定的以某种分布函数构建的二维卷积内核，将中心点对准像素点，进行卷积操作，得到的像素点便包含了周围像素的不完全信息，这样子附近的像素点差异性便会越来越小，当整张图像(或选中部分)卷积完成后，每个像素点便不再过于独立，每个便有了附近像素点的信息，这样字图像便不会看上去那么的“扎眼”，会温润平滑许多，这就是高斯模糊的本质了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/卷积.png" alt="卷积操作" title="">                </div>                <div class="image-caption">卷积操作</div>            </figure><center>[相信看图大概大家就能明白卷积是个啥东西了 再结合上面语句应该就差不多了]</center><h3 id="查找函数"><a href="#查找函数" class="headerlink" title="查找函数"></a>查找函数</h3><p>利用grep命令，很容易便能找到这个函数，找到文件并切到这个函数定义，便可以窥见整个函数的全貌了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/关键字查找1.png" alt="查找" title="">                </div>                <div class="image-caption">查找</div>            </figure><p>以下是cv::GaussianBlur函数全貌:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数1.png" alt="func1" title="">                </div>                <div class="image-caption">func1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数2.png" alt="func2" title="">                </div>                <div class="image-caption">func2</div>            </figure><h3 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h3><p>分析这个函数之前，首先先要从内部关联的函数看起。</p><h4 id="CV-INSTRUMENT-REGION"><a href="#CV-INSTRUMENT-REGION" class="headerlink" title="CV_INSTRUMENT_REGION()"></a>CV_INSTRUMENT_REGION()</h4><p>这一行末尾没有分号，这样的类似函数的字符段有很大可能是一个宏定义变量，经查找，在private.hpp文件中有以下定义：</p><blockquote><p> ///// General instrumentation<br> // General OpenCV region instrumentation macro<br> #define CV_INSTRUMENT_REGION() CV_INSTRUMENT_REGION_META(cv::instr::TYPE_GENERAL, cv::instr::IMPL_PLAIN) </p></blockquote><p>经查找，这个字段主要是关于初始化以及边界类型的判断。</p><h4 id="if-borderType-BORDER-CONSTANT-amp-amp-borderType-amp-BORDER-ISOLATED-0"><a href="#if-borderType-BORDER-CONSTANT-amp-amp-borderType-amp-BORDER-ISOLATED-0" class="headerlink" title="if( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != 0 )"></a>if( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != 0 )</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> type = _src.type();</span><br><span class="line">Size <span class="built_in">size</span> = _src.<span class="built_in">size</span>();</span><br><span class="line">_dst.create( <span class="built_in">size</span>, type );</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    根据说明文档中所写的</span></span><br><span class="line"><span class="comment">    BORDER_CONSTANT    = 0, //!&lt; `iiiiii|abcdefgh|iiiiiii`with some specified `i`</span></span><br><span class="line"><span class="comment">    BORDER_REPLICATE   = 1, //!&lt; `aaaaaa|abcdefgh|hhhhhhh`</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT     = 2, //!&lt; `fedcba|abcdefgh|hgfedcb`</span></span><br><span class="line"><span class="comment">    BORDER_WRAP        = 3, //!&lt; `cdefgh|abcdefgh|abcdefg`</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT_101 = 4, //!&lt; `gfedcb|abcdefgh|gfedcba`</span></span><br><span class="line"><span class="comment">    BORDER_TRANSPARENT = 5, //!&lt; `uvwxyz|absdefgh|ijklmno`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    BORDER_REFLECT101  = BORDER_REFLECT_101, //!&lt; same as BORDER_REFLECT_101</span></span><br><span class="line"><span class="comment">    BORDER_DEFAULT     = BORDER_REFLECT_101, //!&lt; same as BORDER_REFLECT_101</span></span><br><span class="line"><span class="comment">    BORDER_ISOLATED    = 16 //!&lt; do not look outside of ROI</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    BORDER_CONSTANT 需要设置borderValue 指定 ' i ' 值（常数）</span></span><br><span class="line"><span class="comment">    BORDER_REPLICATE ，复制边界像素</span></span><br><span class="line"><span class="comment">    BORDER_REFLECT  ，反射复制边界像素   </span></span><br><span class="line"><span class="comment">    BORDER_REFLECT_101，以边界为对称轴反射复制像素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里是说如果边缘扩展不是常数扩展，且在规定图像范围内部，便执行下列操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>( borderType != BORDER_CONSTANT &amp;&amp; (borderType &amp; BORDER_ISOLATED) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果输入矩阵是一个行向量，则滤波核的高强制为1</span></span><br><span class="line">    <span class="comment">// 下面同理</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">size</span>.<span class="built_in">height</span> == <span class="number">1</span> )</span><br><span class="line">        ksize.<span class="built_in">height</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">size</span>.<span class="built_in">width</span> == <span class="number">1</span> )</span><br><span class="line">        ksize.<span class="built_in">width</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果核宽跟核高都是一直接复制输出</span></span><br><span class="line"><span class="keyword">if</span>( ksize.<span class="built_in">width</span> == <span class="number">1</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    _src.copyTo(_dst);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CV-OVX-RUN-true-openvx-gaussianBlur-src-dst-ksize-sigma1-sigma2-borderType"><a href="#CV-OVX-RUN-true-openvx-gaussianBlur-src-dst-ksize-sigma1-sigma2-borderType" class="headerlink" title="CV_OVX_RUN(true, openvx_gaussianBlur(_src, _dst, ksize, sigma1, sigma2, borderType))"></a>CV_OVX_RUN(true, openvx_gaussianBlur(_src, _dst, ksize, sigma1, sigma2, borderType))</h4><p>这里很明显是一个被宏定义的字段，通过查找，我们能够找到其定位在<code>modules/core/include/opencv2/core/openvx/ovx_defs.hpp</code>当中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/函数3.png" alt="func3" title="">                </div>                <div class="image-caption">func3</div>            </figure><p>按每行解析的话就是如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于检测基于OpenVX的实现的实用程序宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_OPENVX</span></span><br><span class="line"><span class="comment">// 如果检测到OPENVX便执行下列语句</span></span><br><span class="line"><span class="comment">// 下面这两句主要作用也是标识</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IVX_HIDE_INFO_WARNINGS <span class="comment">// 隐藏警告信息</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> IVX_USE_OPENCV <span class="comment">// 使用opencv的标识</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ivx.hpp"</span> <span class="comment">// 将hpp文件包含进来</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CV_OVX_RUN(condition, func, ...)          \ <span class="comment">// ...会被替换</span></span></span><br><span class="line">    <span class="comment">// 这里为了给外界提供OpenVX使用表示 利用宏定义做成了一个接口</span></span><br><span class="line"><span class="comment">// 而这个接口则是主要为了提供硬件层面加速用的(主要面向对象是嵌入式设计)</span></span><br><span class="line">        <span class="keyword">if</span> (cv::useOpenVX() &amp;&amp; (condition) &amp;&amp; func)   \</span><br><span class="line">        &#123;                                             \</span><br><span class="line">        <span class="comment">// __VA_ARGS__是可变参数宏定义 用以替换上面...的内容</span></span><br><span class="line">            <span class="keyword">return</span> __VA_ARGS__;                       \</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// 否则便执行下面这条</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> CV_OVX_RUN(condition, func, ...)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HAVE_OPENVX</span></span></span><br></pre></td></tr></table></figure><p>其中<code>useOpenVX()</code>函数主要是返回一个bool类型的变量用以判断是否使用openVX用以计算。</p><p>所以<code>CV_OVX_RUN()</code>这句话便是对于嵌入式设计进行尝试性的优化操作。</p><h4 id="ifdef至endif部分"><a href="#ifdef至endif部分" class="headerlink" title="ifdef至endif部分"></a>ifdef至endif部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若之前有过HAVE_TEGRA_OPTIMIZATION优化选项的定义，则执行宏体中的tegra优化版函数并返回</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_TEGRA_OPTIMIZATION</span></span><br><span class="line"><span class="comment">// 拷贝到临时变量(暂不知为什么要拷贝到一个临时变量里面去)</span></span><br><span class="line">    Mat src = _src.getMat();</span><br><span class="line">    Mat dst = _dst.getMat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sigma1 == <span class="number">0</span> &amp;&amp; sigma2 == <span class="number">0</span> &amp;&amp; tegra::useTegra() &amp;&amp; tegra::gaussian(src, dst, ksize, borderType))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这里也显而易见是尝试tegra优化。</p><p>但是为什么拷贝到临时变量里也可以改变原值，这里需要进一步到Mat变量的运算符重载里面进行参考。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span></span><br><span class="line">Mat&amp; Mat::<span class="keyword">operator</span> = (<span class="keyword">const</span> Mat&amp; m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span> != &amp;m )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m.u )</span><br><span class="line">            CV_XADD(&amp;m.u-&gt;refcount, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">release</span>(); <span class="comment">// 归零初始化</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        归零后进行基本数据共享</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        flags = m.flags;</span><br><span class="line">        <span class="keyword">if</span>( dims &lt;= <span class="number">2</span> &amp;&amp; m.dims &lt;= <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            dims = m.dims;</span><br><span class="line">            rows = m.rows;</span><br><span class="line">            cols = m.cols;</span><br><span class="line">            <span class="built_in">step</span>[<span class="number">0</span>] = m.<span class="built_in">step</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">step</span>[<span class="number">1</span>] = m.<span class="built_in">step</span>[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            copySize(m);</span><br><span class="line">        data = m.data;</span><br><span class="line">        datastart = m.datastart; <span class="comment">// 共享数据头</span></span><br><span class="line">        dataend = m.dataend; <span class="comment">// 共享数据尾</span></span><br><span class="line">        datalimit = m.datalimit;</span><br><span class="line">        allocator = m.allocator; <span class="comment">// 内存共享</span></span><br><span class="line">        u = m.u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 返回当前对象的引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现在<code>=</code>重载的时候仅是进行的浅拷贝操作，意思是只将数据头数据尾进行复制，而所有数据的内存数据都是相通共享的。固仅需要一方变量更改便会联动所有对其进行过浅拷贝的变量变化。</p><h4 id="剩下部分"><a href="#剩下部分" class="headerlink" title="剩下部分"></a>剩下部分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里主要是针对opencl(GPU加速)无法使用的情况进行CPU版本计算</span></span><br><span class="line"><span class="comment">这个IPP是一个Intel提供的开源的计算机视觉加速库，可以提供很多算法的Intel专属的多线程优化方案API，这也是为什么下面在opencl的gpu优化代码之后还又添加了利用CPU版本的filter2D的计算方案(因为有部分Intel专属的优化函数，针对APU和老式的Intel CPU(09年之前)无法进行计算，所以只能选取最普通的filter2D计算方案执行)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">官网FAQ(有兴趣可以了解一下): https://software.intel.com/en-us/articles/intel-integrated-performance-primitives-intel-ipp-open-source-computer-vision-library-opencv-faq/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">CV_IPP_RUN(!(ocl::useOpenCL() &amp;&amp; _dst.isUMat()), ipp_GaussianBlur( _src,  _dst,  ksize, sigma1,  sigma2, borderType));</span><br><span class="line"></span><br><span class="line">Mat kx, ky;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里是新建一个高斯卷积内核(后面讲)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">createGaussianKernels(kx, ky, type, ksize, sigma1, sigma2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里是针对ksize = 3 or 5的情况做了opencl优化(A卡N卡均可享受opencl优化qwq)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">CV_OCL_RUN(_dst.isUMat() &amp;&amp; _src.dims() &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">           ((ksize.<span class="built_in">width</span> == <span class="number">3</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">3</span>) ||</span><br><span class="line">            (ksize.<span class="built_in">width</span> == <span class="number">5</span> &amp;&amp; ksize.<span class="built_in">height</span> == <span class="number">5</span>)) &amp;&amp;</span><br><span class="line">           (<span class="keyword">size_t</span>)_src.rows() &gt; ky.total() &amp;&amp; (<span class="keyword">size_t</span>)_src.cols() &gt; kx.total(),</span><br><span class="line">           ocl_GaussianBlur_8UC1(_src, _dst, ksize, CV_MAT_DEPTH(type), kx, ky, borderType));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里便是利用filter2D进行操作了</span></span><br><span class="line"><span class="comment">传入Point(-1, -1) 是指内核中的锚点(就是后面的anchor)位置。默认值（-1，-1）表示锚点位于内核中心。</span></span><br><span class="line"><span class="comment">0 则是存储单位 默认是0 后面会通过计算改变并存储</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sepFilter2D(_src, _dst, CV_MAT_DEPTH(type), kx, ky, Point(<span class="number">-1</span>,<span class="number">-1</span>), <span class="number">0</span>, borderType);</span><br></pre></td></tr></table></figure><p>这里在下主要解析<code>createGaussianKernels</code>与<code>sepFilter2D</code>这两个函数，主要是因为无论是<code>openvx_gaussianBlur</code>还是<code>ipp_GaussianBlur</code>以及<code>ocl_GaussianBlur_8UC1</code>都有着大量未知的API，要读懂这些API还需要大量文档查阅，在下在此就先不解析了。</p><p>所以首先先来看一下<code>createGaussianKernels</code>这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个函数仅是用于是创建高斯卷积核</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createGaussianKernels</span><span class="params">( Mat &amp; kx, Mat &amp; ky, <span class="keyword">int</span> type, Size ksize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">double</span> sigma1, <span class="keyword">double</span> sigma2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = CV_MAT_DEPTH(type); <span class="comment">// 根据输入图像类型获得位深度</span></span><br><span class="line">    <span class="keyword">if</span>( sigma2 &lt;= <span class="number">0</span> )</span><br><span class="line">        sigma2 = sigma1; <span class="comment">// 非正则与sigma1相同</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从sigma自动检测内核大小(如果用户没有设置ksize的话)</span></span><br><span class="line">    <span class="comment">// 根据CV_8U来计算 大致接近7*sigma 或者 9*sigma</span></span><br><span class="line">    <span class="comment">// cvRound函数还内联了汇编 在下看不懂了</span></span><br><span class="line">    <span class="comment">// |1 的原因是使宽高为奇数</span></span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">width</span> &lt;= <span class="number">0</span> &amp;&amp; sigma1 &gt; <span class="number">0</span> )</span><br><span class="line">        ksize.<span class="built_in">width</span> = cvRound(sigma1*(depth == CV_8U ? <span class="number">3</span> : <span class="number">4</span>)*<span class="number">2</span> + <span class="number">1</span>)|<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">height</span> &lt;= <span class="number">0</span> &amp;&amp; sigma2 &gt; <span class="number">0</span> )</span><br><span class="line">        ksize.<span class="built_in">height</span> = cvRound(sigma2*(depth == CV_8U ? <span class="number">3</span> : <span class="number">4</span>)*<span class="number">2</span> + <span class="number">1</span>)|<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这句只是为了保证卷积核的宽跟高是正奇数</span></span><br><span class="line">    CV_Assert( ksize.<span class="built_in">width</span> &gt; <span class="number">0</span> &amp;&amp; ksize.<span class="built_in">width</span> % <span class="number">2</span> == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        ksize.<span class="built_in">height</span> &gt; <span class="number">0</span> &amp;&amp; ksize.<span class="built_in">height</span> % <span class="number">2</span> == <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取最大</span></span><br><span class="line">    sigma1 = <span class="built_in">std</span>::<span class="built_in">max</span>( sigma1, <span class="number">0.</span> );</span><br><span class="line">    sigma2 = <span class="built_in">std</span>::<span class="built_in">max</span>( sigma2, <span class="number">0.</span> );</span><br><span class="line"></span><br><span class="line">    kx = getGaussianKernel( ksize.<span class="built_in">width</span>, sigma1, <span class="built_in">std</span>::<span class="built_in">max</span>(depth, CV_32F) );</span><br><span class="line">    <span class="keyword">if</span>( ksize.<span class="built_in">height</span> == ksize.<span class="built_in">width</span> &amp;&amp; <span class="built_in">std</span>::<span class="built_in">abs</span>(sigma1 - sigma2) &lt; DBL_EPSILON )</span><br><span class="line">        <span class="comment">// 这里 如果判断核高与核宽相等，且sigma相差很小的情况下</span></span><br><span class="line">        <span class="comment">// 便可以直接进行赋值操作，减少了计算量</span></span><br><span class="line">        ky = kx;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ky = getGaussianKernel( ksize.<span class="built_in">height</span>, sigma2, <span class="built_in">std</span>::<span class="built_in">max</span>(depth, CV_32F) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中我们还需要解析<code>getGaussianKernel</code>这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">cv::getGaussianKernel</span><span class="params">( <span class="keyword">int</span> n, <span class="keyword">double</span> sigma, <span class="keyword">int</span> ktype )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里定义了一个常量用以规定大小</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SMALL_GAUSSIAN_SIZE = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">// 一个4 * 7的矩阵，用于对奇数长度小内核进行优化计算</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> small_gaussian_tab[][SMALL_GAUSSIAN_SIZE] =</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1.f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.25f</span>, <span class="number">0.5f</span>, <span class="number">0.25f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.0625f</span>, <span class="number">0.25f</span>, <span class="number">0.375f</span>, <span class="number">0.25f</span>, <span class="number">0.0625f</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0.03125f</span>, <span class="number">0.109375f</span>, <span class="number">0.21875f</span>, <span class="number">0.28125f</span>, <span class="number">0.21875f</span>, <span class="number">0.109375f</span>, <span class="number">0.03125f</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里计算滤波系数（数组）</span></span><br><span class="line"><span class="comment">    如果 内核尺寸为奇数 且小于7</span></span><br><span class="line"><span class="comment">    并且sigma小于等于0</span></span><br><span class="line"><span class="comment">    那么滤波系数便是根据上面的small_gaussian_tab决定的</span></span><br><span class="line"><span class="comment">    否则便是0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* fixed_kernel = n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; n &lt;= SMALL_GAUSSIAN_SIZE &amp;&amp; sigma &lt;= <span class="number">0</span> ? small_gaussian_tab[n&gt;&gt;<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    检测数据类型是否为float和double</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    CV_Assert( ktype == CV_32F || ktype == CV_64F );</span><br><span class="line">    <span class="function">Mat <span class="title">kernel</span><span class="params">(n, <span class="number">1</span>, ktype)</span></span>; <span class="comment">// 建立一维向量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义指针指向数据</span></span><br><span class="line">    <span class="keyword">float</span>* cf = kernel.ptr&lt;<span class="keyword">float</span>&gt;();</span><br><span class="line">    <span class="keyword">double</span>* cd = kernel.ptr&lt;<span class="keyword">double</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当sigma小于0时，采用公式得到sigma(只与n有关)，大于0就可以直接使用了。</span></span><br><span class="line">    <span class="keyword">double</span> sigmaX = sigma &gt; <span class="number">0</span> ? sigma : ((n<span class="number">-1</span>)*<span class="number">0.5</span> - <span class="number">1</span>)*<span class="number">0.3</span> + <span class="number">0.8</span>;</span><br><span class="line">    <span class="comment">// 表达式中e指数要用到</span></span><br><span class="line">    <span class="keyword">double</span> scale2X = <span class="number">-0.5</span>/(sigmaX*sigmaX);</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x = i - (n<span class="number">-1</span>)*<span class="number">0.5</span>;</span><br><span class="line">        <span class="comment">// 根据上面计算出来的系数来决定是否重新计算值</span></span><br><span class="line">        <span class="keyword">double</span> t = fixed_kernel ? (<span class="keyword">double</span>)fixed_kernel[i]:<span class="built_in">std</span>::<span class="built_in">exp</span>(scale2X*x*x);</span><br><span class="line">        <span class="comment">//根据精度选择变量</span></span><br><span class="line">        <span class="keyword">if</span>( ktype == CV_32F )</span><br><span class="line">        &#123;</span><br><span class="line">            cf[i] = (<span class="keyword">float</span>)t;</span><br><span class="line">            sum += cf[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cd[i] = t;</span><br><span class="line">            sum += cd[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum = <span class="number">1.</span>/sum; <span class="comment">// 归一化操作，计算需要除的数值</span></span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( ktype == CV_32F )</span><br><span class="line">            cf[i] = (<span class="keyword">float</span>)(cf[i]*sum);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cd[i] *= sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kernel; <span class="comment">// 返回建立好的一维内核</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数的主要目的就是计算出高斯卷积核，这里选用分离计算，就是先计算水平（x）方向的一维卷积核，再根据sigma判断是否重新计算垂直（y）方向的一维卷积内核，这样子分离计算再针对尺寸较大的滤波器也可以有很高的效率，并且分离计算结合多线程也是很好的选择。</p><p>看完高斯内核的建立，我们知道高斯模糊主要利用了分离计算，那最后<code>sepFilter2D</code>函数也很容易看懂了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cv::sepFilter2D</span><span class="params">( InputArray _src, OutputArray _dst, <span class="keyword">int</span> ddepth,</span></span></span><br><span class="line"><span class="function"><span class="params">                      InputArray _kernelX, InputArray _kernelY, Point anchor,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_INSTRUMENT_REGION()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里考虑如果输入函数是UMat形式且维度小于等于2的情况下</span></span><br><span class="line"><span class="comment">优先考虑使用opencl优化过的filter2D计算</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    CV_OCL_RUN(_dst.isUMat() &amp;&amp; _src.dims() &lt;= <span class="number">2</span> </span><br><span class="line">               &amp;&amp; (<span class="keyword">size_t</span>)_src.rows() &gt; _kernelY.total() </span><br><span class="line">               &amp;&amp; (<span class="keyword">size_t</span>)_src.cols() &gt; _kernelX.total(),</span><br><span class="line">               ocl_sepFilter2D(_src, _dst, ddepth, _kernelX, _kernelY, anchor, delta, borderType))</span><br><span class="line"></span><br><span class="line">    Mat src = _src.getMat(), </span><br><span class="line">    kernelX = _kernelX.getMat(), </span><br><span class="line">    kernelY = _kernelY.getMat();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ddepth &lt; <span class="number">0</span> )</span><br><span class="line">        ddepth = src.depth();</span><br><span class="line"></span><br><span class="line">    _dst.create( src.<span class="built_in">size</span>(), CV_MAKETYPE(ddepth, src.channels()) );</span><br><span class="line">    Mat dst = _dst.getMat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    找到src的矩阵的矩阵头存入wsz当中，并且将偏移量存入ofs变量中</span></span><br><span class="line"><span class="comment">    这两个变量用于快速读取全部图像</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Point ofs;</span><br><span class="line">    <span class="function">Size <span class="title">wsz</span><span class="params">(src.cols, src.rows)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>( (borderType &amp; BORDER_ISOLATED) == <span class="number">0</span> )</span><br><span class="line">        src.locateROI( wsz, ofs );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    进行预先检测内核是否有误</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    CV_Assert( kernelX.type() == kernelY.type() &amp;&amp;</span><br><span class="line">               (kernelX.cols == <span class="number">1</span> || kernelX.rows == <span class="number">1</span>) &amp;&amp;</span><br><span class="line">               (kernelY.cols == <span class="number">1</span> || kernelY.rows == <span class="number">1</span>) );</span><br><span class="line"></span><br><span class="line">    Mat contKernelX = kernelX.isContinuous() ? kernelX : kernelX.clone();</span><br><span class="line">    Mat contKernelY = kernelY.isContinuous() ? kernelY : kernelY.clone();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    生成一个二维滤波(filter2D)引擎</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Ptr&lt;hal::SepFilter2D&gt; c = hal::SepFilter2D::create(</span><br><span class="line">        src.type(), dst.type(), kernelX.type(),</span><br><span class="line">        contKernelX.data, </span><br><span class="line">        kernelX.cols + kernelX.rows - <span class="number">1</span>,</span><br><span class="line">        contKernelY.data, </span><br><span class="line">        kernelY.cols + kernelY.rows - <span class="number">1</span>,</span><br><span class="line">        anchor.x, </span><br><span class="line">        anchor.y, </span><br><span class="line">        delta, </span><br><span class="line">        borderType &amp; ~BORDER_ISOLATED);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    调用这个引擎</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    c-&gt;apply(src.data, src.<span class="built_in">step</span>, dst.data, dst.<span class="built_in">step</span>, dst.cols, dst.rows, wsz.<span class="built_in">width</span>, wsz.<span class="built_in">height</span>, ofs.x, ofs.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的便是寻找到这个引擎跟调用函数的实现了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Ptr类似于boost::shared_ptr，它是Boost库的一部分</span></span><br><span class="line"><span class="comment">(http://www.boost.org/doc/libs/release/libs/smart_ptr/shared_ptr.htm)</span></span><br><span class="line"><span class="comment">和 std::shared_ptr[C ++ 11标准]（http://en.wikipedia.org/wiki/C++11）</span></span><br><span class="line"><span class="comment">P.S.其实大部分c++11标准都是boost库里面抄过来的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Ptr&lt;SepFilter2D&gt; <span class="title">SepFilter2D::create</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        ReplacementSepFilter * impl = <span class="keyword">new</span> ReplacementSepFilter();</span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;init(stype, dtype, ktype,</span><br><span class="line">                       kernelx_data, kernelx_len,</span><br><span class="line">                       kernely_data, kernely_len,</span><br><span class="line">                       anchor_x, anchor_y, delta, borderType))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Ptr&lt;hal::SepFilter2D&gt;(impl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> impl;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        OcvSepFilter * impl = <span class="keyword">new</span> OcvSepFilter();</span><br><span class="line">        impl-&gt;init(stype, dtype, ktype,</span><br><span class="line">                   kernelx_data, kernelx_len,</span><br><span class="line">                   kernely_data, kernely_len,</span><br><span class="line">                   anchor_x, anchor_y, delta, borderType);</span><br><span class="line">        <span class="keyword">return</span> Ptr&lt;hal::SepFilter2D&gt;(impl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经查找，<code>SepFilter2D</code>是一个结构体，内含有上面的create函数以及两个虚函数(apply与析构函数)，这就说明对于不同的impl有着不同的apply跟init。</p><p>然后，从<code>ReplacementSepFilter</code>的函数开始看起:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个结构体继承自SepFilter2D</span></span><br><span class="line"><span class="comment">具体作用便是使用hal api进行优化加速计算</span></span><br><span class="line"><span class="comment">是一个关于移动和嵌入式设计的库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReplacementSepFilter</span> :</span> <span class="keyword">public</span> hal::SepFilter2D</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这里的cvhalFilter2D是一个结构体</span></span><br><span class="line"><span class="comment">其目的就是作为context变量使用(ctx 便是context简写)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    cvhalFilter2D *ctx;</span><br><span class="line">    <span class="keyword">bool</span> isInitialized;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    委托构造函数 委托了两个构造函数进行构造</span></span><br><span class="line"><span class="comment">    一个是定义了context为0，另一个则是定义了isInitialized为否</span></span><br><span class="line"><span class="comment">    关于context(上下文)这个概念可以百度一下</span></span><br><span class="line"><span class="comment">    在下是看的这篇:</span></span><br><span class="line"><span class="comment">    https://wanderinghorse.net/computing/papers/context_types.html</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ReplacementSepFilter() : ctx(<span class="number">0</span>), isInitialized(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    初始化函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这里返回的值根据是否初始化成功赋值的</span></span><br><span class="line">        <span class="keyword">int</span> res = cv_hal_sepFilterInit(&amp;ctx, stype, dtype, ktype,</span><br><span class="line">                                       kernelx_data, kernelx_len,</span><br><span class="line">                                       kernely_data, kernely_len,</span><br><span class="line">                                       anchor_x, anchor_y, delta, borderType);</span><br><span class="line">        <span class="comment">// 这里首先判断res是否与CV_HAL_ERROR_OK(0)相等</span></span><br><span class="line">        <span class="comment">// 如果不相等便将0赋值给isInitialized</span></span><br><span class="line">        <span class="comment">// 否则便是将1赋值</span></span><br><span class="line">        isInitialized = (res == CV_HAL_ERROR_OK);</span><br><span class="line">        <span class="keyword">return</span> isInitialized;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这个是ReplacementSepFilter的执行函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(uchar* src_data, <span class="keyword">size_t</span> src_step, uchar* dst_data, <span class="keyword">size_t</span></span></span></span><br><span class="line"><span class="function"><span class="params">    dst_step, <span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> full_width, <span class="keyword">int</span> full_height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> offset_x, <span class="keyword">int</span> offset_y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isInitialized)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 这里是调用并返回是否成功的结果</span></span><br><span class="line">            <span class="keyword">int</span> res = cv_hal_sepFilter(ctx, src_data, src_step, dst_data,</span><br><span class="line">            dst_step, <span class="built_in">width</span>, <span class="built_in">height</span>, full_width,</span><br><span class="line">            full_height, offset_x, offset_y);</span><br><span class="line">            <span class="comment">// 判断res是否与CV_HAL_ERROR_OK(0)不等</span></span><br><span class="line">            <span class="comment">// 如果不等便无法调用</span></span><br><span class="line">            <span class="comment">// 进入错误选项跳出滤波器</span></span><br><span class="line">            <span class="keyword">if</span> (res != CV_HAL_ERROR_OK)</span><br><span class="line">                CV_Error(Error::StsNotImplemented, <span class="string">"Failed to run HAL sepFilter implementation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里的析构函数在本篇不解析</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ~ReplacementSepFilter()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInitialized)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> res = cv_hal_sepFilterFree(ctx);</span><br><span class="line">            <span class="keyword">if</span> (res != CV_HAL_ERROR_OK)</span><br><span class="line">                CV_Error(Error::StsNotImplemented, <span class="string">"Failed to run HAL sepFilter implementation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在接下来便是<code>OcvSepFilter</code>函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OcvSepFilter</span> :</span> <span class="keyword">public</span> hal::SepFilter2D</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">建立一个滤波引擎 f</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    Ptr&lt;FilterEngine&gt; f;</span><br><span class="line">    <span class="keyword">int</span> src_type;</span><br><span class="line">    <span class="keyword">int</span> dst_type;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> stype, <span class="keyword">int</span> dtype, <span class="keyword">int</span> ktype,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernelx_data, <span class="keyword">int</span> kernelx_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              uchar * kernely_data, <span class="keyword">int</span> kernely_len,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span> anchor_x, <span class="keyword">int</span> anchor_y, <span class="keyword">double</span> delta, <span class="keyword">int</span> borderType)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        src_type = stype;</span><br><span class="line">        dst_type = dtype;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        分离卷积所以建立了X与Y的卷积内核</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function">Mat <span class="title">kernelX</span><span class="params">(Size(kernelx_len, <span class="number">1</span>), ktype, kernelx_data)</span></span>;</span><br><span class="line">        <span class="function">Mat <span class="title">kernelY</span><span class="params">(Size(kernely_len, <span class="number">1</span>), ktype, kernely_data)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        创建一个创建可分离的线性滤波器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        f = createSeparableLinearFilter( stype, dtype, kernelX, kernelY,</span><br><span class="line">                                         Point(anchor_x, anchor_y),</span><br><span class="line">                                         delta, borderType &amp; ~BORDER_ISOLATED );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(uchar* src_data, <span class="keyword">size_t</span> src_step, uchar* dst_data, <span class="keyword">size_t</span> </span></span></span><br><span class="line"><span class="function"><span class="params">    dst_step, nt <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, <span class="keyword">int</span> full_width, <span class="keyword">int</span> full_height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> offset_x, <span class="keyword">int</span> offset_y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Mat <span class="title">src</span><span class="params">(Size(<span class="built_in">width</span>, <span class="built_in">height</span>), src_type, src_data, src_step)</span></span>;</span><br><span class="line">        <span class="function">Mat <span class="title">dst</span><span class="params">(Size(<span class="built_in">width</span>, <span class="built_in">height</span>), dst_type, dst_data, dst_step)</span></span>;</span><br><span class="line">        <span class="comment">// 因为Ptr将模板设置为了FilterEngine，所以这里apply调用的是FilterEngine的启动函数</span></span><br><span class="line">        f-&gt;apply(src, dst, Size(full_width, full_height), Point(offset_x,</span><br><span class="line">        offset_y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后便是分析<code>createSeparableLinearFilter</code> 这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">可以看到其返回的是是一个引擎，</span></span><br><span class="line"><span class="comment">所以里面肯定是有横向与纵向线性滤波器了(所以才使用可分离的qwq)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">cv::Ptr&lt;cv::FilterEngine&gt; <span class="title">cv::createSeparableLinearFilter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType,</span></span></span><br><span class="line"><span class="function"><span class="params">    InputArray __rowKernel, InputArray __columnKernel,</span></span></span><br><span class="line"><span class="function"><span class="params">    Point _anchor, <span class="keyword">double</span> _delta,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Scalar&amp; _borderValue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    Mat _rowKernel = __rowKernel.getMat(), </span><br><span class="line">    _columnKernel = __columnKernel.getMat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求矩阵的数组类型，数据类型包过通道数，深度，和据类型3种</span></span><br><span class="line">    _srcType = CV_MAT_TYPE(_srcType); </span><br><span class="line">    _dstType = CV_MAT_TYPE(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求深度(输入输出都求)</span></span><br><span class="line">    <span class="keyword">int</span> sdepth = CV_MAT_DEPTH(_srcType),</span><br><span class="line">    ddepth = CV_MAT_DEPTH(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 求输入矩阵的通道数并判断输入矩阵是否与输出矩阵通道数相等</span></span><br><span class="line">    <span class="keyword">int</span> cn = CV_MAT_CN(_srcType);</span><br><span class="line">    CV_Assert( cn == CV_MAT_CN(_dstType) );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// rowsize</span></span><br><span class="line">    <span class="keyword">int</span> rsize = _rowKernel.rows + _rowKernel.cols - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// columnsize</span></span><br><span class="line">    <span class="keyword">int</span> csize = _columnKernel.rows + _columnKernel.cols - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果内核锚点是负数，则从中心点开始进行</span></span><br><span class="line">    <span class="keyword">if</span>( _anchor.x &lt; <span class="number">0</span> )</span><br><span class="line">        _anchor.x = rsize/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>( _anchor.y &lt; <span class="number">0</span> )</span><br><span class="line">        _anchor.y = csize/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    获得内核的类型</span></span><br><span class="line"><span class="comment">    大致分为五种：</span></span><br><span class="line"><span class="comment">    KERNEL_GENERAL 通用内核 无任何对称性或其他属性</span></span><br><span class="line"><span class="comment">    KERNEL_SYMMETRICAL kernel[i] == kernel[ksize-i-1] (系数对称)，且锚点位于中心</span></span><br><span class="line"><span class="comment">    KERNEL_ASYMMETRICAL kernel[i] == -kernel[ksize-i-1] (系数相反对称)，锚点同上</span></span><br><span class="line"><span class="comment">    KERNEL_SMOOTH  所有内核元素都是非负的并且总和为1</span></span><br><span class="line"><span class="comment">    KERNEL_INTEGER 所有内核系数都是整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> rtype = getKernelType(_rowKernel,</span><br><span class="line">        _rowKernel.rows == <span class="number">1</span> ? Point(_anchor.x, <span class="number">0</span>) : Point(<span class="number">0</span>, _anchor.x));</span><br><span class="line">    <span class="keyword">int</span> ctype = getKernelType(_columnKernel,</span><br><span class="line">        _columnKernel.rows == <span class="number">1</span> ? Point(_anchor.y, <span class="number">0</span>) : Point(<span class="number">0</span>, _anchor.y));</span><br><span class="line">    Mat rowKernel, columnKernel;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    在CV_32F, sdepth, ddepth中找到最大值并赋值给bdepth</span></span><br><span class="line"><span class="comment">    bdepth: 位深度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> bdepth = <span class="built_in">std</span>::<span class="built_in">max</span>(CV_32F,<span class="built_in">std</span>::<span class="built_in">max</span>(sdepth, ddepth));</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    判断如果</span></span><br><span class="line"><span class="comment">    输入输出图像都是8位无符号型且内核使用平滑对称核</span></span><br><span class="line"><span class="comment">    或者</span></span><br><span class="line"><span class="comment">    输出图像为16位有符号型且使用整形对称或反对称核</span></span><br><span class="line"><span class="comment">    那么就不需要进行任何转换便可以直接使用，</span></span><br><span class="line"><span class="comment">    否则便需要转换，因为输入前后的图像格式是完全相等的</span></span><br><span class="line"><span class="comment">    所以delta就默认是0了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>( sdepth == CV_8U &amp;&amp;</span><br><span class="line">        (</span><br><span class="line">             (rtype == KERNEL_SMOOTH+KERNEL_SYMMETRICAL &amp;&amp;</span><br><span class="line">              ctype == KERNEL_SMOOTH+KERNEL_SYMMETRICAL &amp;&amp;</span><br><span class="line">              ddepth == CV_8U) </span><br><span class="line">             ||</span><br><span class="line">             (</span><br><span class="line">                  (rtype &amp; (KERNEL_SYMMETRICAL+KERNEL_ASYMMETRICAL)) &amp;&amp;</span><br><span class="line">                  (ctype &amp; (KERNEL_SYMMETRICAL+KERNEL_ASYMMETRICAL)) &amp;&amp;</span><br><span class="line">                  (rtype &amp; ctype &amp; KERNEL_INTEGER) &amp;&amp;</span><br><span class="line">                  ddepth == CV_16S</span><br><span class="line">             )</span><br><span class="line">        ) </span><br><span class="line">      )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 重新给bdepth赋值</span></span><br><span class="line">        bdepth = CV_32S;</span><br><span class="line">        <span class="comment">// 此时bits(单位字节)将根据位深度进行计算，如果是8位无符号型则直接赋值为8位</span></span><br><span class="line">        bits = ddepth == CV_8U ? <span class="number">8</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 此时将row内核转换为CV_32S，即32位整数型，并且根据单位字节转换比例因子</span></span><br><span class="line">        <span class="comment">// 如果不加比例因子那么图像会变得很白</span></span><br><span class="line">        <span class="comment">// (可参见这篇提问https://bbs.csdn.net/topics/392411554)</span></span><br><span class="line">        <span class="comment">// 比例因子：将原矩阵的所有元素乘以alpha</span></span><br><span class="line">        _rowKernel.convertTo( rowKernel, CV_32S, <span class="number">1</span> &lt;&lt; bits );</span><br><span class="line">        _columnKernel.convertTo( columnKernel, CV_32S, <span class="number">1</span> &lt;&lt; bits );</span><br><span class="line">        <span class="comment">// 在这里是将单位字节*2</span></span><br><span class="line">        bits *= <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 根据单位字节计算出了存储单位(偏移量)</span></span><br><span class="line">        _delta *= (<span class="number">1</span> &lt;&lt; bits);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        如果不属于上面if里的任何一种情况，那么需要进行转换，用以使数据类型统一</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>( _rowKernel.type() != bdepth )</span><br><span class="line">            _rowKernel.convertTo( rowKernel, bdepth );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rowKernel = _rowKernel;</span><br><span class="line">        <span class="keyword">if</span>( _columnKernel.type() != bdepth )</span><br><span class="line">            _columnKernel.convertTo( columnKernel, bdepth );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            columnKernel = _columnKernel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区存储，用于写入单个色所有素信息(包括多通道与深度信息)</span></span><br><span class="line">    <span class="keyword">int</span> _bufType = CV_MAKETYPE(bdepth, cn);</span><br><span class="line">    <span class="comment">// getLinearRowFilter是根据不同的输入图像类型，输出图像返回不同的线性滤波器</span></span><br><span class="line">    Ptr&lt;BaseRowFilter&gt; _rowFilter = getLinearRowFilter(</span><br><span class="line">        _srcType, _bufType, rowKernel, _anchor.x, rtype);</span><br><span class="line">    Ptr&lt;BaseColumnFilter&gt; _columnFilter = getLinearColumnFilter(</span><br><span class="line">        _bufType, _dstType, columnKernel, _anchor.y, ctype, _delta, bits );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用这两个线性滤波器建立滤波引擎</span></span><br><span class="line">    <span class="keyword">return</span> Ptr&lt;FilterEngine&gt;( <span class="keyword">new</span> FilterEngine(Ptr&lt;BaseFilter&gt;(), _rowFilter,</span><br><span class="line">                                               _columnFilter,_srcType, _dstType,</span><br><span class="line">                                               _bufType, _rowBorderType,</span><br><span class="line">                                               _columnBorderType, _borderValue ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">建立滤波引擎函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">FilterEngine::FilterEngine( <span class="keyword">const</span> Ptr&lt;BaseFilter&gt;&amp; _filter2D,</span><br><span class="line">                            <span class="keyword">const</span> Ptr&lt;BaseRowFilter&gt;&amp; _rowFilter,</span><br><span class="line">                            <span class="keyword">const</span> Ptr&lt;BaseColumnFilter&gt;&amp; _columnFilter,</span><br><span class="line">                            <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType, <span class="keyword">int</span> _bufType,</span><br><span class="line">                            <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span><br><span class="line">                            <span class="keyword">const</span> Scalar&amp; _borderValue )</span><br><span class="line">&#123;</span><br><span class="line">    init(_filter2D, _rowFilter, _columnFilter, _srcType, _dstType, _bufType,</span><br><span class="line">         _rowBorderType, _columnBorderType, _borderValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilterEngine::init</span><span class="params">( <span class="keyword">const</span> Ptr&lt;BaseFilter&gt;&amp; _filter2D,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Ptr&lt;BaseRowFilter&gt;&amp; _rowFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Ptr&lt;BaseColumnFilter&gt;&amp; _columnFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> _srcType, <span class="keyword">int</span> _dstType, <span class="keyword">int</span> _bufType,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> _rowBorderType, <span class="keyword">int</span> _columnBorderType,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> Scalar&amp; _borderValue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 依旧是获取类型</span></span><br><span class="line">    _srcType = CV_MAT_TYPE(_srcType);</span><br><span class="line">    _bufType = CV_MAT_TYPE(_bufType);</span><br><span class="line">    _dstType = CV_MAT_TYPE(_dstType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 临时变量</span></span><br><span class="line">    srcType = _srcType;</span><br><span class="line">    <span class="comment">// 计算单个像素大小</span></span><br><span class="line">    <span class="comment">// 下面会降解</span></span><br><span class="line">    <span class="keyword">int</span> srcElemSize = (<span class="keyword">int</span>)getElemSize(srcType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面这些全是建立临时变量的</span></span><br><span class="line">    dstType = _dstType;</span><br><span class="line">    bufType = _bufType;</span><br><span class="line"></span><br><span class="line">    filter2D = _filter2D;</span><br><span class="line">    rowFilter = _rowFilter;</span><br><span class="line">    columnFilter = _columnFilter;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里是判断行列边缘类型是否出问题</span></span><br><span class="line">    <span class="keyword">if</span>( _columnBorderType &lt; <span class="number">0</span> )</span><br><span class="line">        _columnBorderType = _rowBorderType;</span><br><span class="line"></span><br><span class="line">    rowBorderType = _rowBorderType;</span><br><span class="line">    columnBorderType = _columnBorderType;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测边界填充类型是否不是wrap(复制元素填充)类型</span></span><br><span class="line">    CV_Assert( columnBorderType != BORDER_WRAP );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测是否为可分离滤波器(因为这个是通用滤波引擎 并不知道是否为可分离滤波器)</span></span><br><span class="line">    <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检测横纵滤波器类型是否相等</span></span><br><span class="line">        CV_Assert( rowFilter &amp;&amp; columnFilter );</span><br><span class="line">        <span class="comment">// 并以横纵滤波器定义内核大小</span></span><br><span class="line">        ksize = Size(rowFilter-&gt;ksize, columnFilter-&gt;ksize);</span><br><span class="line">        <span class="comment">// 锚点也根据滤波器锚点定义</span></span><br><span class="line">        anchor = Point(rowFilter-&gt;anchor, columnFilter-&gt;anchor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果不是  检测缓冲图像类型是否与输入图像类型相等</span></span><br><span class="line">        CV_Assert( bufType == srcType );</span><br><span class="line">        <span class="comment">// 这里跟上面定义差不多，不过是非分离滤波器所以是只有一个(filter2D二维滤波器)</span></span><br><span class="line">        ksize = filter2D-&gt;ksize;</span><br><span class="line">        anchor = filter2D-&gt;anchor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个一看就懂了</span></span><br><span class="line">    CV_Assert( m <span class="number">0</span> &lt;= anchor.x &amp;&amp; anchor.x &lt; ksize.<span class="built_in">width</span> &amp;&amp;</span><br><span class="line">               <span class="number">0</span> &lt;= anchor.y &amp;&amp; anchor.y &lt; ksize.<span class="built_in">height</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据边缘填充类型进行像素计算</span></span><br><span class="line">    borderElemSize = srcElemSize/(CV_MAT_DEPTH(srcType) &gt;= CV_32S ?</span><br><span class="line">                                  <span class="keyword">sizeof</span>(<span class="keyword">int</span>) : <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 这里也很好懂</span></span><br><span class="line">    <span class="keyword">int</span> borderLength = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">width</span> - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 重定义边缘向量大小(这里是所占空间大小)</span></span><br><span class="line">    borderTab.resize(borderLength*borderElemSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    maxWidth = bufStep = <span class="number">0</span>;</span><br><span class="line">    constBorderRow.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果行列边界是常数填充的</span></span><br><span class="line">    <span class="keyword">if</span>( rowBorderType == BORDER_CONSTANT || columnBorderType == BORDER_CONSTANT )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 则计算图像边长</span></span><br><span class="line">        constBorderValue.resize(srcElemSize*borderLength);</span><br><span class="line">        <span class="keyword">int</span> srcType1 = CV_MAKETYPE(CV_MAT_DEPTH(srcType), </span><br><span class="line">                                   MIN(CV_MAT_CN(srcType),</span><br><span class="line">                                   <span class="number">4</span>));</span><br><span class="line">        <span class="comment">// 根据位深度将边界像素值转换成可直接使用的vector变量</span></span><br><span class="line">        scalarToRawData(_borderValue, &amp;constBorderValue[<span class="number">0</span>], srcType1,</span><br><span class="line">                        borderLength*CV_MAT_CN(srcType));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化size</span></span><br><span class="line">    wholeSize = Size(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这时候来看上面提到的<code>getElemSize</code>:</p><blockquote><p>最终这个其实是个宏定义，返回的就是这个宏定义计算的结果：</p><p><strong>(CV_MAT_CN(type) &lt;&lt; ((((sizeof(size_t)/4+1)*16384|0x3a50) &gt;&gt; CV_MAT_DEPTH(type)*2) &amp; 3))</strong></p><p>首先，针对<code>0x3a50</code>这个奇怪的数值，我们先转换为2进制查看规律，通过查找比对，发现其数值与变量类型有着一一对应的关系，然后16384则是1 &lt;&lt; 14的结果(刚好每个对应两位二进制数值)，这个换成二进制则是</p><p>​    16384   = 10 00 00 00 00 00 00</p><p>​    0x3a50 = 11 10 10 01 01 00 00</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/bin.png" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><p>稍微先理解一下，在下先说一下剩下的函数然后一起解析。</p><p>这里先计算无符号整型的长度(在64位系统下是4 desu)然后除以4 再加上1 ，</p><p>就是说这是2 * 16384 | 0x3a50</p><p>就是</p><p>01 00 00 00 00 00 00 00</p><p>00 11 10 10 01 01 00 00</p><hr><p>01 11 10 10 01 01 00 00</p><p>的结果右移2 * 深度，观察上面便会发现最终右移之后便使得最后两位二进制数对应的刚好便是对应变量类型所占的二进制数。</p><p>这样，在跟3(二进制为11)进行 ‘与‘ 操作，便能得到各个变量的对应所占字节数的对数了。</p><p>又因为这里是 通道数 * 2 ^ (所占字节对数)</p><p>所以这样就能够计算的出单个像素点所占用的大小(size)了</p></blockquote><p>因为滤波引擎是一个通用引擎，还可用以驱动其他的滤波器(中值滤波或者其他什么的)所以主要的就只不过是根据一些信息初始化用以后面的操作(就是init函数的意思)。</p><p>返回了滤波引擎之后便是调用了，这个是<code>apply</code>函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilterEngine::apply</span><span class="params">(<span class="keyword">const</span> Mat&amp; src, Mat&amp; dst, <span class="keyword">const</span> Size &amp; wsz, <span class="keyword">const</span> Point &amp; ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_INSTRUMENT_REGION()</span><br><span class="line"></span><br><span class="line">    CV_Assert( src.type() == srcType &amp;&amp; dst.type() == dstType );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回变化y值</span></span><br><span class="line">    <span class="keyword">int</span> y = start(src, wsz, ofs);</span><br><span class="line">    <span class="comment">// 传参的时候切除第一行与最后一列</span></span><br><span class="line">    proceed(src.ptr() + y*src.<span class="built_in">step</span>,</span><br><span class="line">            (<span class="keyword">int</span>)src.<span class="built_in">step</span>,</span><br><span class="line">            endY - startY,</span><br><span class="line">            dst.ptr(),</span><br><span class="line">            (<span class="keyword">int</span>)dst.<span class="built_in">step</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>start</code>便是开始函数后面的<code>proceed</code>则是持续卷积到整个图像的关键，<code>start</code>函数最终返回了起始的Y值，一句一句写太累了，我就不解释了，只贴出<code>start</code>与<code>proceed</code>函数：</p><p>*<em>这两块其实在下分析的很差，很多函数都没看懂，有很大可能错误，建议先跳过，在下以后c++学透了还会回来改的。 *</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">滤波引擎</span></span><br><span class="line"><span class="comment">发动！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::start</span><span class="params">(<span class="keyword">const</span> Mat&amp; src, <span class="keyword">const</span> Size &amp;wsz, <span class="keyword">const</span> Point &amp;ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    start( wsz, src.<span class="built_in">size</span>(), ofs);</span><br><span class="line">    <span class="keyword">return</span> startY - ofs.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::start</span><span class="params">(<span class="keyword">const</span> Size &amp;_wholeSize, <span class="keyword">const</span> Size &amp;sz, <span class="keyword">const</span> Point &amp;ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    wholeSize = _wholeSize;</span><br><span class="line">    <span class="comment">// 根据偏移量与矩阵头设置范围</span></span><br><span class="line">    roi = Rect(ofs, sz);</span><br><span class="line">    <span class="comment">// 依旧是错误检测，很好懂</span></span><br><span class="line">    CV_Assert( roi.x &gt;= <span class="number">0</span> &amp;&amp; roi.y &gt;= <span class="number">0</span> &amp;&amp; roi.<span class="built_in">width</span> &gt;= <span class="number">0</span> &amp;&amp; roi.<span class="built_in">height</span> &gt;= <span class="number">0</span> &amp;&amp; roi.x + roi.<span class="built_in">width</span> &lt;= wholeSize.<span class="built_in">width</span> &amp;&amp; roi.y + roi.<span class="built_in">height</span> &lt;= wholeSize.<span class="built_in">height</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下面这些依旧是初始化</span></span><br><span class="line">    <span class="keyword">int</span> esz = (<span class="keyword">int</span>)getElemSize(srcType);</span><br><span class="line">    <span class="keyword">int</span> bufElemSize = (<span class="keyword">int</span>)getElemSize(bufType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定值检查</span></span><br><span class="line">    <span class="keyword">const</span> uchar* constVal = !constBorderValue.empty() ? &amp;constBorderValue[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _maxBufRows = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">height</span> + <span class="number">3</span>, <span class="built_in">std</span>::<span class="built_in">max</span>(anchor.y, ksize.<span class="built_in">height</span>-anchor.y<span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( maxWidth &lt; roi.<span class="built_in">width</span> || _maxBufRows != (<span class="keyword">int</span>)rows.<span class="built_in">size</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">        rows.resize(_maxBufRows);</span><br><span class="line">        maxWidth = <span class="built_in">std</span>::<span class="built_in">max</span>(maxWidth, roi.<span class="built_in">width</span>);</span><br><span class="line">        <span class="keyword">int</span> cn = CV_MAT_CN(srcType);</span><br><span class="line">        srcRow.resize(esz*(maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>( columnBorderType == BORDER_CONSTANT )</span><br><span class="line">        &#123;</span><br><span class="line">            constBorderRow.resize(getElemSize(bufType)</span><br><span class="line">                                  *(maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span> + VEC_ALIGN));</span><br><span class="line">            uchar *dst = alignPtr(&amp;constBorderRow[<span class="number">0</span>], VEC_ALIGN), *tdst;</span><br><span class="line">            <span class="keyword">int</span> n = (<span class="keyword">int</span>)constBorderValue.<span class="built_in">size</span>(), N;</span><br><span class="line">            N = (maxWidth + ksize.<span class="built_in">width</span> - <span class="number">1</span>)*esz;</span><br><span class="line">            tdst = isSeparable() ? &amp;srcRow[<span class="number">0</span>] : dst;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; N; i += n )</span><br><span class="line">            &#123;</span><br><span class="line">                n = <span class="built_in">std</span>::<span class="built_in">min</span>( n, N - i );</span><br><span class="line">                <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    tdst[i+j] = constVal[j];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">                (*rowFilter)(&amp;srcRow[<span class="number">0</span>], dst, maxWidth, cn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxBufStep = bufElemSize*(<span class="keyword">int</span>)alignSize(maxWidth + (!isSeparable() ? ksize.<span class="built_in">width</span> - <span class="number">1</span> : <span class="number">0</span>),VEC_ALIGN);</span><br><span class="line">        ringBuf.resize(maxBufStep*rows.<span class="built_in">size</span>()+VEC_ALIGN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整bufstep，使环形缓冲区的已使用部分在内存中保持紧凑</span></span><br><span class="line">    bufStep = bufElemSize*(<span class="keyword">int</span>)alignSize(roi.<span class="built_in">width</span> + (!isSeparable() ? ksize.<span class="built_in">width</span> - <span class="number">1</span> : <span class="number">0</span>),<span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dx1是检测锚点位置是否与范围边界检测</span></span><br><span class="line">    dx1 = <span class="built_in">std</span>::<span class="built_in">max</span>(anchor.x - roi.x, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 检测内核是否存在偏差</span></span><br><span class="line">    dx2 = <span class="built_in">std</span>::<span class="built_in">max</span>(ksize.<span class="built_in">width</span> - anchor.x - <span class="number">1</span> + roi.x + roi.<span class="built_in">width</span> - wholeSize.<span class="built_in">width</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在偏差则重新计算边界表</span></span><br><span class="line">    <span class="keyword">if</span>( dx1 &gt; <span class="number">0</span> || dx2 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( rowBorderType == BORDER_CONSTANT )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nr = isSeparable() ? <span class="number">1</span> : (<span class="keyword">int</span>)rows.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; nr; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                uchar* dst = isSeparable() ? &amp;srcRow[<span class="number">0</span>] : alignPtr(&amp;ringBuf[<span class="number">0</span>],VEC_ALIGN) + bufStep*i;</span><br><span class="line">                <span class="comment">// 在内存中用后者填充前者，最后一个参数是大小</span></span><br><span class="line">                <span class="built_in">memcpy</span>( dst, constVal, dx1*esz );</span><br><span class="line">                <span class="built_in">memcpy</span>( dst + (roi.<span class="built_in">width</span> + ksize.<span class="built_in">width</span> - <span class="number">1</span> - dx2)*esz, constVal, dx2*esz );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> xofs1 = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.x, anchor.x) - roi.x;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> btab_esz = borderElemSize, wholeWidth = wholeSize.<span class="built_in">width</span>;</span><br><span class="line">            <span class="keyword">int</span>* btab = (<span class="keyword">int</span>*)&amp;borderTab[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; dx1; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p0 = (borderInterpolate(i-dx1, wholeWidth, rowBorderType) +  xofs1)*btab_esz;</span><br><span class="line">                <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; btab_esz; j++ )</span><br><span class="line">                    btab[i*btab_esz + j] = p0 + j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; dx2; i++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p0 = (borderInterpolate(wholeWidth + i, wholeWidth,  rowBorderType) + xofs1)*btab_esz;</span><br><span class="line">                <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; btab_esz; j++ )</span><br><span class="line">                    btab[(i + dx1)*btab_esz + j] = p0 + j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rowCount = dstY = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这整个函数其实最重要的就是这个</span></span><br><span class="line"><span class="comment">    上面这些都是防止错误进行的调整</span></span><br><span class="line"><span class="comment">    并用以计算下面这个值的</span></span><br><span class="line"><span class="comment">    这个startY是另一方向的偏离值，就是说一个像素到另一个像素的偏离量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    startY = startY0 = <span class="built_in">std</span>::<span class="built_in">max</span>(roi.y - anchor.y, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    endY = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.y + roi.<span class="built_in">height</span> + ksize.<span class="built_in">height</span> - anchor.y - <span class="number">1</span>, wholeSize.<span class="built_in">height</span>);</span><br><span class="line">    <span class="keyword">if</span>( columnFilter )</span><br><span class="line">        columnFilter-&gt;reset();</span><br><span class="line">    <span class="keyword">if</span>( filter2D )</span><br><span class="line">        filter2D-&gt;reset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> startY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterEngine::proceed</span><span class="params">( <span class="keyword">const</span> uchar* src, <span class="keyword">int</span> srcstep, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                           uchar* dst, <span class="keyword">int</span> dststep )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CV_Assert( wholeSize.<span class="built_in">width</span> &gt; <span class="number">0</span> &amp;&amp; wholeSize.<span class="built_in">height</span> &gt; <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *btab = &amp;borderTab[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> esz = (<span class="keyword">int</span>)getElemSize(srcType), btab_esz = borderElemSize;</span><br><span class="line">    uchar** brows = &amp;rows[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> bufRows = (<span class="keyword">int</span>)rows.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> cn = CV_MAT_CN(bufType);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span> = roi.<span class="built_in">width</span>, kwidth = ksize.<span class="built_in">width</span>;</span><br><span class="line">    <span class="keyword">int</span> kheight = ksize.<span class="built_in">height</span>, ay = anchor.y;</span><br><span class="line">    <span class="keyword">int</span> _dx1 = dx1, _dx2 = dx2;</span><br><span class="line">    <span class="keyword">int</span> width1 = roi.<span class="built_in">width</span> + kwidth - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> xofs1 = <span class="built_in">std</span>::<span class="built_in">min</span>(roi.x, anchor.x);</span><br><span class="line">    <span class="keyword">bool</span> isSep = isSeparable();</span><br><span class="line">    <span class="keyword">bool</span> makeBorder = (_dx1 &gt; <span class="number">0</span> || _dx2 &gt; <span class="number">0</span>) &amp;&amp; rowBorderType != BORDER_CONSTANT;</span><br><span class="line">    <span class="keyword">int</span> dy = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    src -= xofs1*esz;</span><br><span class="line">    count = <span class="built_in">std</span>::<span class="built_in">min</span>(count, remainingInputRows());</span><br><span class="line"></span><br><span class="line">    CV_Assert( src &amp;&amp; dst &amp;&amp; count &gt; <span class="number">0</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    这里就是卷积的主函数了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(;; dst += dststep*i, dy += i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> dcount = bufRows - ay - startY - rowCount + roi.y;</span><br><span class="line">        dcount = dcount &gt; <span class="number">0</span> ? dcount : bufRows - kheight + <span class="number">1</span>;</span><br><span class="line">        dcount = <span class="built_in">std</span>::<span class="built_in">min</span>(dcount, count);</span><br><span class="line">        count -= dcount;</span><br><span class="line">        <span class="keyword">for</span>( ; dcount-- &gt; <span class="number">0</span>; src += srcstep )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> bi = (startY - startY0 + rowCount) % bufRows;</span><br><span class="line">            uchar* brow = alignPtr(&amp;ringBuf[<span class="number">0</span>], VEC_ALIGN) + bi*bufStep;</span><br><span class="line">            uchar* row = isSep ? &amp;srcRow[<span class="number">0</span>] : brow;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( ++rowCount &gt; bufRows )</span><br><span class="line">            &#123;</span><br><span class="line">                --rowCount;</span><br><span class="line">                ++startY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>( row + _dx1*esz, src, (width1 - _dx2 - _dx1)*esz );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( makeBorder )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( btab_esz*(<span class="keyword">int</span>)<span class="keyword">sizeof</span>(<span class="keyword">int</span>) == esz )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">const</span> <span class="keyword">int</span>* isrc = (<span class="keyword">const</span> <span class="keyword">int</span>*)src;</span><br><span class="line">                    <span class="keyword">int</span>* irow = (<span class="keyword">int</span>*)row;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx1*btab_esz; i++ )</span><br><span class="line">                        irow[i] = isrc[btab[i]];</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx2*btab_esz; i++ )</span><br><span class="line">                        irow[i + (width1 - _dx2)*btab_esz] =  isrc[btab[i+_dx1*btab_esz]];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx1*esz; i++ )</span><br><span class="line">                        row[i] = src[btab[i]];</span><br><span class="line">                    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; _dx2*esz; i++ )</span><br><span class="line">                        row[i + (width1 - _dx2)*esz] = src[btab[i+_dx1*esz]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( isSep )</span><br><span class="line">                (*rowFilter)(row, brow, <span class="built_in">width</span>, CV_MAT_CN(srcType));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max_i = <span class="built_in">std</span>::<span class="built_in">min</span>(bufRows, roi.<span class="built_in">height</span> - (dstY + dy) + (kheight - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; max_i; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> srcY = borderInterpolate(dstY + dy + i + roi.y - ay, wholeSize.<span class="built_in">height</span>, columnBorderType);</span><br><span class="line">            <span class="keyword">if</span>( srcY &lt; <span class="number">0</span> ) <span class="comment">// can happen only with constant border type</span></span><br><span class="line">                brows[i] = alignPtr(&amp;constBorderRow[<span class="number">0</span>], VEC_ALIGN);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                CV_Assert( srcY &gt;= startY );</span><br><span class="line">                <span class="keyword">if</span>( srcY &gt;= startY + rowCount )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> bi = (srcY - startY0) % bufRows;</span><br><span class="line">                brows[i] = alignPtr(&amp;ringBuf[<span class="number">0</span>], VEC_ALIGN) + bi*bufStep;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( i &lt; kheight )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i -= kheight - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( isSeparable() )</span><br><span class="line">            (*columnFilter)((<span class="keyword">const</span> uchar**)brows, dst, dststep, i, roi.<span class="built_in">width</span>*cn);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            (*filter2D)((<span class="keyword">const</span> uchar**)brows, dst, dststep, i, roi.<span class="built_in">width</span>, cn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dstY += dy;</span><br><span class="line">    CV_Assert( dstY &lt;= roi.<span class="built_in">height</span> );</span><br><span class="line">    <span class="keyword">return</span> dy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>C++语法复杂度感觉世界上排的了前十</li><li>复杂但却也是少有的可以直接操作内存的语言之一，内联汇编效率不要太高</li><li>用轮子很简单，但是造轮子很难，造出普适性的轮子更难，自己用感觉有些算法还是很容易写的，但是要照顾到大量的其他语法或者平台那就很困难了</li><li>优化不一定是自己算法的优化，还有使用平台的优化，用别人的轮子真的很爽</li><li>大型项目里面代码风格各异，变量命名方案比较混乱，并且简写的比较多，看起来真的头大。。。。</li><li>在下的代码逻辑思维还是太低了，希望能够在毕业的时候看上20000行代码用以提升自己</li><li>相比之下python源码看起来真的舒服死了55555</li></ul><h2 id="借物表"><a href="#借物表" class="headerlink" title="借物表"></a>借物表</h2><ul><li><a href="https://www.cnblogs.com/marvin-notes/p/4482805.html" target="_blank" rel="noopener"><strong>attribute</strong> 机制详解(一)</a></li><li><a href="https://stackoverflow.com/questions/19908922/what-is-this-ifdef-gnuc-about" target="_blank" rel="noopener">What is this #ifdef <strong>GNUC</strong> about?</a></li><li><a href="https://www.cnblogs.com/testlife007/p/8134702.html" target="_blank" rel="noopener">关于VC预定义常量_WIN32，WIN32，_WIN64等预定义宏的介绍（整理、转载）</a></li><li><a href="http://www.voidcn.com/article/p-uolrpafg-bcx.html" target="_blank" rel="noopener">opencv的CV_EXPORT</a></li><li><a href="https://www.cnblogs.com/wangguchangqing/p/6407717.html" target="_blank" rel="noopener">图像处理基础(4)：高斯滤波器详解</a></li><li><a href="https://blog.csdn.net/u012707739/article/details/80170671" target="_blank" rel="noopener">C/C++ 可变参数宏与<strong>VA_ARGS</strong> 宏</a></li><li><a href="https://blog.csdn.net/q2519008/article/details/80934815" target="_blank" rel="noopener">#、##、<strong>VA_ARGS</strong>和##<strong>VA_ARGS</strong>的作用</a></li><li><a href="https://blog.csdn.net/sx1503198/article/details/51764367" target="_blank" rel="noopener">OpenVX嵌入式图像处理（一）硬件平台及软件介绍</a></li><li><a href="https://blog.csdn.net/jia20003/article/details/69802932" target="_blank" rel="noopener">OpenCV3.x中UMat对象介绍与使用</a></li><li><a href="https://blog.csdn.net/qq_26460507/article/details/60154061" target="_blank" rel="noopener">opencv学习之GaussianBlur()源码解析</a></li><li><a href="https://blog.csdn.net/u011028771/article/details/80556457" target="_blank" rel="noopener">手撕OpenCV源码之GaussianBlur</a></li><li><a href="https://www.xuebuyuan.com/1054789.html" target="_blank" rel="noopener">OpenCV的一些宏</a></li></ul><p><strong>感谢以上各位大佬给在下提供的各类知识</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;因为实验室假期需要写一篇关于opencv的作业 所以顺便看了一下opencv(版本3.2.0)里面关于高斯模糊的源码&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="c++" scheme="http://blog.fivezha.cn/tags/c/"/>
    
      <category term="cv" scheme="http://blog.fivezha.cn/tags/cv/"/>
    
  </entry>
  
  <entry>
    <title>nazo.io攻略(完)</title>
    <link href="http://blog.fivezha.cn/2018/10/15/nazo-io-answer/"/>
    <id>http://blog.fivezha.cn/2018/10/15/nazo-io-answer/</id>
    <published>2018-10-15T11:22:26.000Z</published>
    <updated>2020-07-28T01:28:05.404Z</updated>
    
    <content type="html"><![CDATA[<p>有点像小学玩过的某个解密游戏的游戏  偶然又发现了这种类型的游戏 鄙人玩了2个小时 写了点攻略 希望能够帮到你</p><a id="more"></a><h3 id="顺便附上网址-其实就是nazo-io"><a href="#顺便附上网址-其实就是nazo-io" class="headerlink" title="顺便附上网址(其实就是nazo.io)"></a><a href="https://nazo.io/" target="_blank" rel="noopener">顺便附上网址(其实就是nazo.io)</a></h3><h3 id="1-欢迎"><a href="#1-欢迎" class="headerlink" title="1.欢迎"></a>1.欢迎</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qhqf5j30ih0dk0sv.jpg" alt="1" title="">                </div>                <div class="image-caption">1</div>            </figure><p>直接输入:<strong>welcome</strong>即可</p><h3 id="2-规则"><a href="#2-规则" class="headerlink" title="2.规则"></a>2.规则</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qjrz1j30f10ax0sr.jpg" alt="2" title="">                </div>                <div class="image-caption">2</div>            </figure><p>点击：key即可出现答案——<strong>gotcha</strong></p><h3 id="3-从右往左念"><a href="#3-从右往左念" class="headerlink" title="3.从右往左念"></a>3.从右往左念</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qml7ij30fb0b6aa2.jpg" alt="3" title="">                </div>                <div class="image-caption">3</div>            </figure><p>顾名思义，从右往左念：key is where</p><p>答案便是：<strong>where</strong></p><h3 id="4-完形填空"><a href="#4-完形填空" class="headerlink" title="4.完形填空"></a>4.完形填空</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qlt8pj30gy0apq2y.jpg" alt="4" title="">                </div>                <div class="image-caption">4</div>            </figure><p><strong>这关便是教你使用搜索引擎搜索答案（其实大多数时间搜不到。。。。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qnadzj30lh0d375d.jpg" alt="百度" title="">                </div>                <div class="image-caption">百度</div>            </figure><p>答案便是：<strong>survival</strong></p><h3 id="5-Morse"><a href="#5-Morse" class="headerlink" title="5.Morse"></a>5.Morse</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949ql6f1j30hr0a53yf.jpg" alt="5" title="">                </div>                <div class="image-caption">5</div>            </figure><p>摩尔斯电码，没什么好说的</p><p>答案：<strong>sos</strong></p><h3 id="6-Base64"><a href="#6-Base64" class="headerlink" title="6.Base64"></a>6.Base64</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qon6pj30gq0bxglo.jpg" alt="6" title="">                </div>                <div class="image-caption">6</div>            </figure><p>就是base64解码 随便找个网站就行了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949quc7cj30jr0bz75v.jpg" alt="解密" title="">                </div>                <div class="image-caption">解密</div>            </figure><p>答案：<strong>1029174037</strong></p><h3 id="6-Base64-新"><a href="#6-Base64-新" class="headerlink" title="6.Base64(新)"></a>6.Base64(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712000900198.png" alt="image-20200712000900198" title="">                </div>                <div class="image-caption">image-20200712000900198</div>            </figure><p>答案：<strong>bytealigned</strong></p><h3 id="7-OICQ"><a href="#7-OICQ" class="headerlink" title="7.OICQ"></a>7.OICQ</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qpr45j30fg0b3dfv.jpg" alt="7" title="">                </div>                <div class="image-caption">7</div>            </figure><p>这个标题是qq的前身名称</p><p>这里有个提示：你<a href="https://nazo.io/6" target="_blank" rel="noopener">刚</a>输入了什么？/以及联系作者</p><p>很清楚 ，上一题的答案就是作者的QQ号</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qp17sj30cq09xmxl.jpg" alt="qq搜索" title="">                </div>                <div class="image-caption">qq搜索</div>            </figure><p>看 果不其然</p><p>答案：<strong>macintosh</strong></p><h3 id="7-RCNB-app-新"><a href="#7-RCNB-app-新" class="headerlink" title="7.RCNB.app(新)"></a>7.RCNB.app(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001003985.png" alt="image-20200712001003985" title="">                </div>                <div class="image-caption">image-20200712001003985</div>            </figure><p>编码随便百度一下就出来了</p><p>答案：<strong>unprintable</strong></p><h3 id="8-IDNs"><a href="#8-IDNs" class="headerlink" title="8.IDNs"></a>8.IDNs</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qa1llj30gd0bh0sp.jpg" alt="8" title="">                </div>                <div class="image-caption">8</div>            </figure><p>这个题也是那种没有知识前提就不会的那种</p><p>正巧前两天刚买域名的时候看见了中文域名，所以这题小case😄</p><p>直接访问：错的是.世界便可知道答案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qccbgj314z03e3z3.jpg" alt="直接访问" title="">                </div>                <div class="image-caption">直接访问</div>            </figure><p>答案：<strong>saionjisekai</strong></p><h3 id="9-角度"><a href="#9-角度" class="headerlink" title="9.角度"></a>9.角度</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qt8x2j30hu0je40c.jpg" alt="9" title="">                </div>                <div class="image-caption">9</div>            </figure><p>这张图片是斜角图片，就是字都向内偏向了45°</p><p>用画图打开拉长一下就知道答案了：<strong>pineapple</strong></p><h3 id="10-回到上世纪"><a href="#10-回到上世纪" class="headerlink" title="10.回到上世纪"></a>10.回到上世纪</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qvavgj30f90i3gom.jpg" alt="10" title="">                </div>                <div class="image-caption">10</div>            </figure><p>典型的百度搜图题目</p><p>答案：<strong>mouse</strong></p><h3 id="11-Unicode"><a href="#11-Unicode" class="headerlink" title="11.Unicode"></a>11.Unicode</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qdfelj30h60b5wen.jpg" alt="11" title="">                </div>                <div class="image-caption">11</div>            </figure><p>可能部分手机字库支持不全看不了</p><p>答案：<strong>neweroslesstofu</strong></p><h3 id="11-Unicode-新"><a href="#11-Unicode-新" class="headerlink" title="11.Unicode(新)"></a>11.Unicode(新)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001517859.png" alt="image-20200712001517859" title="">                </div>                <div class="image-caption">image-20200712001517859</div>            </figure><p>答案：<strong>oopscode</strong></p><h3 id="12-1A2B"><a href="#12-1A2B" class="headerlink" title="12.1A2B"></a>12.1A2B</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qattnj30gl0c9749.jpg" alt="12" title="">                </div>                <div class="image-caption">12</div>            </figure><p>小时候的猜数题目</p><p>大意是：有一个未知数需要猜测</p><p>下面0A0B代表不仅数字没猜对位置也没猜对</p><p>0A2B代表数字猜对了两个但是位置没猜对</p><p>3A0B代表着数字跟位置都猜对的有三位有一位数字跟位置都没猜对</p><p>答案：<strong>9506</strong></p><h3 id="13-虚无"><a href="#13-虚无" class="headerlink" title="13.虚无"></a>13.虚无</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qawkhj30i50bvmx2.jpg" alt="13" title="">                </div>                <div class="image-caption">13</div>            </figure><p>中间有图片，新窗口打开便可知</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qbbc4j307w06jt8h.jpg" alt="新页面打开" title="">                </div>                <div class="image-caption">新页面打开</div>            </figure><p>答案：<strong>thealpha</strong></p><h3 id="14-我爱记歌词"><a href="#14-我爱记歌词" class="headerlink" title="14.我爱记歌词"></a>14.我爱记歌词</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qgnznj30fy0g0gm7.jpg" alt="14" title="">                </div>                <div class="image-caption">14</div>            </figure><p>hint是里的歌词是种子，歌名又是小苹果，图片名字叫apple</p><p>不用多说了吧 ——图种</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qftumj30dv07qmyf.jpg" alt="图种" title="">                </div>                <div class="image-caption">图种</div>            </figure><p>答案：<strong>greendam</strong></p><h3 id="15-声音的轨迹"><a href="#15-声音的轨迹" class="headerlink" title="15.声音的轨迹"></a>15.声音的轨迹</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qgllmj30gm0atwei.jpg" alt="15" title="">                </div>                <div class="image-caption">15</div>            </figure><p>音波解析 随便找个能看音波的软件就行了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw949qgu11j30cr075ab2.jpg" alt="妹子挺好看" title="">                </div>                <div class="image-caption">妹子挺好看</div>            </figure><p>答案：<strong>koenokiseki</strong></p><h3 id="16-虚掩"><a href="#16-虚掩" class="headerlink" title="16.虚掩"></a>16.虚掩</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw970hy3m4j30ga0cn0sn.jpg" alt="16" title="">                </div>                <div class="image-caption">16</div>            </figure><p>打开隐藏图片之后发现是多层结构</p><p>直接将遮罩层大小改为0</p><p>key显现</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw970i23waj317j0mpn0d.jpg" alt="key" title="">                </div>                <div class="image-caption">key</div>            </figure><p>密码：<strong>secretvg</strong></p><h3 id="17-虚空"><a href="#17-虚空" class="headerlink" title="17.虚空"></a>17.虚空</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQly1fw98fbl0nhj30i10crdfp.jpg" alt="17" title="">                </div>                <div class="image-caption">17</div>            </figure><p>空格切换 这里的字符由全角跟半角的空格组成 替换任意一种便可知道答案</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw98gt6vvwj30k00cpaaz.jpg" alt="答案" title="">                </div>                <div class="image-caption">答案</div>            </figure><p>答案：<strong>entropy</strong></p><h3 id="18-Twitter"><a href="#18-Twitter" class="headerlink" title="18.Twitter"></a>18.Twitter</h3><p>科学上网</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQly1fw98fblypnj30hp0dnjrk.jpg" alt="18" title="">                </div>                <div class="image-caption">18</div>            </figure><p>打开发现居然作者是位打ctf的大佬</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQly1fw98fbpojoj30gn0lt429.jpg" alt="作者推特" title="">                </div>                <div class="image-caption">作者推特</div>            </figure><p>答案：<strong>th4nky0u</strong></p><h3 id="18-Twitter-新"><a href="#18-Twitter-新" class="headerlink" title="18.Twitter(新)"></a>18.Twitter(新)</h3><p>访问一下url就可以知道了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.jsdelivr.net/gh/xmmmmmovo/ResourcesBackup/blog/pics/image-20200712001718333.png" alt="image-20200712001718333" title="">                </div>                <div class="image-caption">image-20200712001718333</div>            </figure><p>答案：<strong>shortweet</strong></p><h3 id="19-最后"><a href="#19-最后" class="headerlink" title="19.最后"></a>19.最后</h3><p>感谢语</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fw98kipw7hj30fr0fht8s.jpg" alt="hit3" title="">                </div>                <div class="image-caption">hit3</div>            </figure><p>我是<strong>20</strong>位通关的(正儿八经的第20位 ←.hit1)，<strong>你呢？</strong></p><h3 id="20-强迫症与总结"><a href="#20-强迫症与总结" class="headerlink" title="20.强迫症与总结"></a>20.强迫症与总结</h3><p>(↑.hit2)</p><p>花了我2个多小时的游戏终于完美落下了帷幕</p><p>期初我只是想分享一下在群里，没想到大家兴致如此之高，以至于最后都为找到一个个key而兴致高涨😄</p><p>这种游戏果然需要跟大家一起玩才有意思嘛</p><p>总之，游戏体验良好，5⭐️ 好评！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有点像小学玩过的某个解密游戏的游戏  偶然又发现了这种类型的游戏 鄙人玩了2个小时 写了点攻略 希望能够帮到你&lt;/p&gt;
    
    </summary>
    
    
      <category term="games" scheme="http://blog.fivezha.cn/categories/games/"/>
    
    
      <category term="game" scheme="http://blog.fivezha.cn/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX数学符号</title>
    <link href="http://blog.fivezha.cn/2018/09/08/LaTeX-math-symbols/"/>
    <id>http://blog.fivezha.cn/2018/09/08/LaTeX-math-symbols/</id>
    <published>2018-09-08T14:02:03.000Z</published>
    <updated>2020-07-28T01:28:05.380Z</updated>
    
    <content type="html"><![CDATA[<p>自己的LaTeX笔记</p><a id="more"></a><h2 id="先贴教程总览！！"><a href="#先贴教程总览！！" class="headerlink" title="先贴教程总览！！"></a><a href="https://blog.csdn.net/garfielder007/article/details/51646604#t2" target="_blank" rel="noopener">先贴教程总览！！</a></h2><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h3><ul><li>$$ + enter便可进入LaTeX编辑模式</li><li>^ 上标</li><li>_ 下标</li><li>{} 块/分组</li></ul><h3 id="常用环境"><a href="#常用环境" class="headerlink" title="常用环境"></a>常用环境</h3><blockquote><p>\begin{equation}</p><p><strong>自动编号</strong> \label(eq: ```)<strong>标签</strong></p><p>\end{equation}</p><p>\ref{eq:} <strong>引用</strong></p></blockquote><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><ul><li>\alpha</li><li>\beta</li><li>\gamma</li><li>\epsilon</li><li>\pi</li><li>\omerga</li></ul><ul><li>\Gamma</li><li>\Delta</li><li>\Theta</li><li>\Pi</li><li>\Omega</li></ul><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li>\log</li><li>\sin</li><li>\cos</li><li>\arcsin</li><li>\arccos</li><li>\ln</li><li>\sqrt[]{} <strong>根式</strong></li><li>\frac{}{} <strong>分式</strong></li></ul><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><blockquote><p>\begin{matrix}</p><pre><code>1 &amp; 1 \\\1 &amp; 1</code></pre><p>\end{matrix}</p><p>其中：</p><p>&amp; 分割<strong>列</strong></p><p>\   分割<strong>行</strong></p><p>p小括号</p><p>b中括号</p><p>B大括号</p><p>v单竖线</p><p>V双竖线</p></blockquote><ul><li>\dots <strong>横向省略号</strong></li><li>\vdots <strong>竖向省略号</strong></li><li>\ddots <strong>斜向省略号</strong></li><li>{n \times n} <strong>n x n</strong></li></ul><h3 id="分块矩阵-矩阵嵌套"><a href="#分块矩阵-矩阵嵌套" class="headerlink" title="分块矩阵(矩阵嵌套)"></a>分块矩阵(矩阵嵌套)</h3><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>\multicolumn{}{}{} <strong>合并多列</strong></li><li>\raisebox{}[]{} <strong>调整高度</strong></li><li>\hdotsfor{列数} <strong>整列省略号</strong> </li></ul><blockquote><p>\left ( <strong>左括号</strong></p><p>\begin{smallmatrix}</p><p>\end{smallmatrix}</p><p>\right ) <strong>右括号</strong></p><p><strong>行内小矩阵</strong></p></blockquote><blockquote><p>\begin{array}{c|c}</p><p>\hline <strong>分割线</strong></p><p>\end{array}</p></blockquote><h2 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h2><blockquote><p>\begin{gather}</p><p>==== \notag <strong>不自动编号</strong> \ *<em>换行*</em></p><p>==== \ \</p><p>\end{gather}</p></blockquote><ul><li>{align}</li><li>{split}</li><li>{cases} <strong>分段函数</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己的LaTeX笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="latex" scheme="http://blog.fivezha.cn/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>git超简单教程</title>
    <link href="http://blog.fivezha.cn/2018/04/20/git-guide/"/>
    <id>http://blog.fivezha.cn/2018/04/20/git-guide/</id>
    <published>2018-04-20T12:34:09.000Z</published>
    <updated>2020-07-28T01:28:05.392Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>git的超简单用法（以test-repository为例）</em></strong></p><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="1-初始化git的email与name"><a href="#1-初始化git的email与name" class="headerlink" title="1.初始化git的email与name"></a>1.初始化git的email与name</h3><p>首先先打开git(这个随便在哪个文件夹都可以)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"这里写你的名字"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"这里写你的邮箱"</span></span></span><br></pre></td></tr></table></figure><h3 id="2-设置ssh连接"><a href="#2-设置ssh连接" class="headerlink" title="2.设置ssh连接"></a>2.设置ssh连接</h3><p>PS：这一步主要是<strong>防止他人盗用你的github账号</strong>所设置的双重保护，仅是为了安全，<strong>不设置</strong>这步<strong>也可运行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"这里是你的邮箱"</span></span></span><br></pre></td></tr></table></figure><p>然后你能在你<code>c://用户//13256(这里是你的用户名)//.ssh</code>里面找到以下三个文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8wkanj30g702k3yf.jpg" alt="文件列表" title="">                </div>                <div class="image-caption">文件列表</div>            </figure><p>然后登陆github网站 在setting里面找到ssh设置 然后新建ssh填入你<code>id_rsa.pub</code>里面的东西就ok了(title随便填)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8xgioj305u09u74a.jpg" alt="setting" title="">                </div>                <div class="image-caption">setting</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/006ZO6XQgy1fx8xk8ywkqj30un0hwwff.jpg" alt="add key" title="">                </div>                <div class="image-caption">add key</div>            </figure><p>然后点<code>add key</code>就完事儿了</p><h2 id="连接仓库"><a href="#连接仓库" class="headerlink" title="连接仓库"></a>连接仓库</h2><h3 id="1-获取项目URL"><a href="#1-获取项目URL" class="headerlink" title="1.获取项目URL"></a>1.获取项目URL</h3><h4 id="首先找到你想要clone（类似下载）到本地的项目页面"><a href="#首先找到你想要clone（类似下载）到本地的项目页面" class="headerlink" title="首先找到你想要clone（类似下载）到本地的项目页面"></a>首先找到你想要clone（类似下载）到本地的项目页面</h4><h4 id="按照箭头复制项目地址"><a href="#按照箭头复制项目地址" class="headerlink" title="按照箭头复制项目地址"></a>按照箭头复制项目地址</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/006ZO6XQly1fq7nac5d1vj30su0h7gmy.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="2-在本地clone项目"><a href="#2-在本地clone项目" class="headerlink" title="2.在本地clone项目"></a>2.在本地clone项目</h3><p><strong>首先找到你想要在<em>本地硬盘</em>clone（下载）的地址</strong></p><p><strong><em>右键<em>点击</em>Git Bash Here</em></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7nabiwpzj30o40i4gnm.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><p><strong>然后输入以下指令（就只有第一行）</strong></p><h4 id="git-clone-你刚刚复制的网址"><a href="#git-clone-你刚刚复制的网址" class="headerlink" title="git clone 你刚刚复制的网址"></a>git clone 你刚刚复制的网址</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7naco5yhj30gj0ahglw.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h4 id="完成后关闭这个命令提示框！"><a href="#完成后关闭这个命令提示框！" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><h4 id="完成后关闭这个命令提示框！-1"><a href="#完成后关闭这个命令提示框！-1" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><h4 id="完成后关闭这个命令提示框！-2"><a href="#完成后关闭这个命令提示框！-2" class="headerlink" title="完成后关闭这个命令提示框！"></a><center>完成后关闭这个命令提示框！</center></h4><p><strong>Then你就会发现在目录下有一个你clone的仓库的名字的文件夹了（如下图）</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7nmlz8mhj30nt0hcgnd.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="3-进入clone后的仓库（文件夹）进行修改和push"><a href="#3-进入clone后的仓库（文件夹）进行修改和push" class="headerlink" title="3.进入clone后的仓库（文件夹）进行修改和push"></a>3.进入clone后的仓库（文件夹）进行修改和push</h3><p>进入刚刚clone的那个文件夹，此时你可以<strong><em>随意修改文件内容 增加内容</em></strong></p><p>修改完成后，在clone的文件夹里 <strong>右键然后点击Git Bash Here</strong></p><p>然后输入下面三行指令</p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h4><h4 id="git-commit-m-‘随便上传点东西’"><a href="#git-commit-m-‘随便上传点东西’" class="headerlink" title="git commit -m ‘随便上传点东西’"></a>git commit -m ‘随便上传点东西’</h4><h4 id="git-push-origin-master（主分支一般为master-如果你没别的分支就写master）"><a href="#git-push-origin-master（主分支一般为master-如果你没别的分支就写master）" class="headerlink" title="git push origin master（主分支一般为master,如果你没别的分支就写master）"></a>git push origin master（主分支一般为master,如果你没别的分支就写master）</h4><h4 id="注：第二行-‘-‘-里面的东西随便写-这里主要写你push的东西主要修改了什么（会在项目上显示）"><a href="#注：第二行-‘-‘-里面的东西随便写-这里主要写你push的东西主要修改了什么（会在项目上显示）" class="headerlink" title="注：第二行 ‘ ‘ 里面的东西随便写 这里主要写你push的东西主要修改了什么（会在项目上显示）"></a>注：第二行 ‘ ‘ 里面的东西随便写 这里主要写你push的东西主要修改了什么（会在项目上显示）</h4><h4 id="push时可能会让你输入邮箱密码-填上就行"><a href="#push时可能会让你输入邮箱密码-填上就行" class="headerlink" title="push时可能会让你输入邮箱密码 填上就行"></a>push时可能会让你输入邮箱密码 填上就行</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/006ZO6XQly1fq7o8kan65j30gc0d5mxu.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h4 id="在项目中显示的修改信息"><a href="#在项目中显示的修改信息" class="headerlink" title="在项目中显示的修改信息"></a>在项目中显示的修改信息</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006ZO6XQly1fq7o8l251ej30rf03x0st.jpg" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><h3 id="4-更新自己修改后的文件"><a href="#4-更新自己修改后的文件" class="headerlink" title="4.更新自己修改后的文件"></a>4.更新自己修改后的文件</h3><p><strong>如果你后来修改了文件想要同步到github上面去的话，那么:</strong></p><h3 id="重复步骤-3中的-三个指令便可以了"><a href="#重复步骤-3中的-三个指令便可以了" class="headerlink" title="重复步骤 3中的 三个指令便可以了"></a>重复<em>步骤 3</em>中的 <em>三个指令</em>便可以了</h3><h3 id="5-分支开发"><a href="#5-分支开发" class="headerlink" title="5. 分支开发"></a>5. 分支开发</h3><h4 id="这个有点大就直接放地址了"><a href="#这个有点大就直接放地址了" class="headerlink" title="这个有点大就直接放地址了"></a>这个有点大就直接放地址了</h4><p><a href="http://www.runoob.com/git/git-branch.html" target="_blank" rel="noopener">菜鸟教程的教程 简单介绍的</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">还有廖雪峰老师的教程 ！推荐！讲的很详细！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;git的超简单用法（以test-repository为例）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://blog.fivezha.cn/categories/study/"/>
    
    
      <category term="git" scheme="http://blog.fivezha.cn/tags/git/"/>
    
  </entry>
  
</feed>
